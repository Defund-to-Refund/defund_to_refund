{"ast":null,"code":"import { Sizeable } from \"./types\";\nimport { ContentLayoutable } from \"./layoutable\";\nimport { isString } from \"../util/types\"; // This table lays out the rules for configuring the baseline, alignment, etc. of\n// title text, based on it's location and orientation\n//\n// side    orient        baseline   align     angle   normal-dist\n// ------------------------------------------------------------------------------\n// above   parallel      bottom     center    0       height\n//         normal        middle     left      -90     width\n//         horizontal    bottom     center    0       height\n//         [angle > 0]   middle     left              width * sin + height * cos\n//         [angle < 0]   middle     right             width * sin + height * cos\n//\n// below   parallel      top        center    0       height\n//         normal        middle     right     90      width\n//         horizontal    top        center    0       height\n//         [angle > 0]   middle     right             width * sin + height * cos\n//         [angle < 0]   middle     left              width * sin + height * cos\n//\n// left    parallel      bottom     center    90      height\n//         normal        middle     right     0       width\n//         horizontal    middle     right     0       width\n//         [angle > 0]   middle     right             width * cos + height * sin\n//         [angle < 0]   middle     right             width * cos + height + sin\n//\n// right   parallel      bottom     center   -90      height\n//         normal        middle     left     0        width\n//         horizontal    middle     left     0        width\n//         [angle > 0]   middle     left              width * cos + height * sin\n//         [angle < 0]   middle     left              width * cos + height + sin\n\nconst pi2 = Math.PI / 2;\nconst ALPHABETIC = 'alphabetic';\nconst TOP = 'top';\nconst BOTTOM = 'bottom';\nconst MIDDLE = 'middle';\nconst HANGING = 'hanging';\nconst LEFT = 'left';\nconst RIGHT = 'right';\nconst CENTER = 'center';\nconst _angle_lookup = {\n  above: {\n    parallel: 0,\n    normal: -pi2,\n    horizontal: 0,\n    vertical: -pi2\n  },\n  below: {\n    parallel: 0,\n    normal: pi2,\n    horizontal: 0,\n    vertical: pi2\n  },\n  left: {\n    parallel: -pi2,\n    normal: 0,\n    horizontal: 0,\n    vertical: -pi2\n  },\n  right: {\n    parallel: pi2,\n    normal: 0,\n    horizontal: 0,\n    vertical: pi2\n  }\n};\nconst _baseline_lookup = {\n  above: {\n    justified: TOP,\n    parallel: ALPHABETIC,\n    normal: MIDDLE,\n    horizontal: ALPHABETIC,\n    vertical: MIDDLE\n  },\n  below: {\n    justified: BOTTOM,\n    parallel: HANGING,\n    normal: MIDDLE,\n    horizontal: HANGING,\n    vertical: MIDDLE\n  },\n  left: {\n    justified: TOP,\n    parallel: ALPHABETIC,\n    normal: MIDDLE,\n    horizontal: MIDDLE,\n    vertical: ALPHABETIC\n  },\n  right: {\n    justified: TOP,\n    parallel: ALPHABETIC,\n    normal: MIDDLE,\n    horizontal: MIDDLE,\n    vertical: ALPHABETIC\n  }\n};\nconst _align_lookup = {\n  above: {\n    justified: CENTER,\n    parallel: CENTER,\n    normal: LEFT,\n    horizontal: CENTER,\n    vertical: LEFT\n  },\n  below: {\n    justified: CENTER,\n    parallel: CENTER,\n    normal: LEFT,\n    horizontal: CENTER,\n    vertical: LEFT\n  },\n  left: {\n    justified: CENTER,\n    parallel: CENTER,\n    normal: RIGHT,\n    horizontal: RIGHT,\n    vertical: CENTER\n  },\n  right: {\n    justified: CENTER,\n    parallel: CENTER,\n    normal: LEFT,\n    horizontal: LEFT,\n    vertical: CENTER\n  }\n};\nconst _align_lookup_negative = {\n  above: RIGHT,\n  below: LEFT,\n  left: RIGHT,\n  right: LEFT\n};\nconst _align_lookup_positive = {\n  above: LEFT,\n  below: RIGHT,\n  left: RIGHT,\n  right: LEFT\n};\nexport class SidePanel extends ContentLayoutable {\n  constructor(side, obj) {\n    super();\n    this.side = side;\n    this.obj = obj;\n\n    switch (this.side) {\n      case \"above\":\n        this._dim = 0;\n        this._normals = [0, -1];\n        break;\n\n      case \"below\":\n        this._dim = 0;\n        this._normals = [0, 1];\n        break;\n\n      case \"left\":\n        this._dim = 1;\n        this._normals = [-1, 0];\n        break;\n\n      case \"right\":\n        this._dim = 1;\n        this._normals = [1, 0];\n        break;\n    }\n\n    if (this.is_horizontal) this.set_sizing({\n      width_policy: \"max\",\n      height_policy: \"fixed\"\n    });else this.set_sizing({\n      width_policy: \"fixed\",\n      height_policy: \"max\"\n    });\n  }\n\n  _content_size() {\n    return new Sizeable(this.get_oriented_size());\n  }\n\n  get_oriented_size() {\n    const {\n      width,\n      height\n    } = this.obj.get_size();\n    if (!this.obj.rotate || this.is_horizontal) return {\n      width,\n      height\n    };else return {\n      width: height,\n      height: width\n    };\n  }\n\n  has_size_changed() {\n    const {\n      width,\n      height\n    } = this.get_oriented_size();\n    if (this.is_horizontal) return this.bbox.height != height;else return this.bbox.width != width;\n  }\n\n  get dimension() {\n    return this._dim;\n  }\n\n  get normals() {\n    return this._normals;\n  }\n\n  get is_horizontal() {\n    return this._dim == 0;\n  }\n\n  get is_vertical() {\n    return this._dim == 1;\n  }\n\n  apply_label_text_heuristics(ctx, orient) {\n    const side = this.side;\n    let baseline;\n    let align;\n\n    if (isString(orient)) {\n      baseline = _baseline_lookup[side][orient];\n      align = _align_lookup[side][orient];\n    } else {\n      if (orient === 0) {\n        baseline = \"whatever\"; // XXX: _baseline_lookup[side][orient]\n\n        align = \"whatever\"; // XXX: _align_lookup[side][orient]\n      } else if (orient < 0) {\n        baseline = 'middle';\n        align = _align_lookup_negative[side];\n      } else {\n        baseline = 'middle';\n        align = _align_lookup_positive[side];\n      }\n    }\n\n    ctx.textBaseline = baseline;\n    ctx.textAlign = align;\n  }\n\n  get_label_angle_heuristic(orient) {\n    return _angle_lookup[this.side][orient];\n  }\n\n}\nSidePanel.__name__ = \"SidePanel\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/layout/side_panel.js"],"names":["Sizeable","ContentLayoutable","isString","pi2","Math","PI","ALPHABETIC","TOP","BOTTOM","MIDDLE","HANGING","LEFT","RIGHT","CENTER","_angle_lookup","above","parallel","normal","horizontal","vertical","below","left","right","_baseline_lookup","justified","_align_lookup","_align_lookup_negative","_align_lookup_positive","SidePanel","constructor","side","obj","_dim","_normals","is_horizontal","set_sizing","width_policy","height_policy","_content_size","get_oriented_size","width","height","get_size","rotate","has_size_changed","bbox","dimension","normals","is_vertical","apply_label_text_heuristics","ctx","orient","baseline","align","textBaseline","textAlign","get_label_angle_heuristic","__name__"],"mappings":"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","sourcesContent":["import { Sizeable } from \"./types\";\nimport { ContentLayoutable } from \"./layoutable\";\nimport { isString } from \"../util/types\";\n// This table lays out the rules for configuring the baseline, alignment, etc. of\n// title text, based on it's location and orientation\n//\n// side    orient        baseline   align     angle   normal-dist\n// ------------------------------------------------------------------------------\n// above   parallel      bottom     center    0       height\n//         normal        middle     left      -90     width\n//         horizontal    bottom     center    0       height\n//         [angle > 0]   middle     left              width * sin + height * cos\n//         [angle < 0]   middle     right             width * sin + height * cos\n//\n// below   parallel      top        center    0       height\n//         normal        middle     right     90      width\n//         horizontal    top        center    0       height\n//         [angle > 0]   middle     right             width * sin + height * cos\n//         [angle < 0]   middle     left              width * sin + height * cos\n//\n// left    parallel      bottom     center    90      height\n//         normal        middle     right     0       width\n//         horizontal    middle     right     0       width\n//         [angle > 0]   middle     right             width * cos + height * sin\n//         [angle < 0]   middle     right             width * cos + height + sin\n//\n// right   parallel      bottom     center   -90      height\n//         normal        middle     left     0        width\n//         horizontal    middle     left     0        width\n//         [angle > 0]   middle     left              width * cos + height * sin\n//         [angle < 0]   middle     left              width * cos + height + sin\nconst pi2 = Math.PI / 2;\nconst ALPHABETIC = 'alphabetic';\nconst TOP = 'top';\nconst BOTTOM = 'bottom';\nconst MIDDLE = 'middle';\nconst HANGING = 'hanging';\nconst LEFT = 'left';\nconst RIGHT = 'right';\nconst CENTER = 'center';\nconst _angle_lookup = {\n    above: {\n        parallel: 0,\n        normal: -pi2,\n        horizontal: 0,\n        vertical: -pi2,\n    },\n    below: {\n        parallel: 0,\n        normal: pi2,\n        horizontal: 0,\n        vertical: pi2,\n    },\n    left: {\n        parallel: -pi2,\n        normal: 0,\n        horizontal: 0,\n        vertical: -pi2,\n    },\n    right: {\n        parallel: pi2,\n        normal: 0,\n        horizontal: 0,\n        vertical: pi2,\n    },\n};\nconst _baseline_lookup = {\n    above: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: ALPHABETIC,\n        vertical: MIDDLE,\n    },\n    below: {\n        justified: BOTTOM,\n        parallel: HANGING,\n        normal: MIDDLE,\n        horizontal: HANGING,\n        vertical: MIDDLE,\n    },\n    left: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: MIDDLE,\n        vertical: ALPHABETIC,\n    },\n    right: {\n        justified: TOP,\n        parallel: ALPHABETIC,\n        normal: MIDDLE,\n        horizontal: MIDDLE,\n        vertical: ALPHABETIC,\n    },\n};\nconst _align_lookup = {\n    above: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: CENTER,\n        vertical: LEFT,\n    },\n    below: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: CENTER,\n        vertical: LEFT,\n    },\n    left: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: RIGHT,\n        horizontal: RIGHT,\n        vertical: CENTER,\n    },\n    right: {\n        justified: CENTER,\n        parallel: CENTER,\n        normal: LEFT,\n        horizontal: LEFT,\n        vertical: CENTER,\n    },\n};\nconst _align_lookup_negative = {\n    above: RIGHT,\n    below: LEFT,\n    left: RIGHT,\n    right: LEFT,\n};\nconst _align_lookup_positive = {\n    above: LEFT,\n    below: RIGHT,\n    left: RIGHT,\n    right: LEFT,\n};\nexport class SidePanel extends ContentLayoutable {\n    constructor(side, obj) {\n        super();\n        this.side = side;\n        this.obj = obj;\n        switch (this.side) {\n            case \"above\":\n                this._dim = 0;\n                this._normals = [0, -1];\n                break;\n            case \"below\":\n                this._dim = 0;\n                this._normals = [0, 1];\n                break;\n            case \"left\":\n                this._dim = 1;\n                this._normals = [-1, 0];\n                break;\n            case \"right\":\n                this._dim = 1;\n                this._normals = [1, 0];\n                break;\n        }\n        if (this.is_horizontal)\n            this.set_sizing({ width_policy: \"max\", height_policy: \"fixed\" });\n        else\n            this.set_sizing({ width_policy: \"fixed\", height_policy: \"max\" });\n    }\n    _content_size() {\n        return new Sizeable(this.get_oriented_size());\n    }\n    get_oriented_size() {\n        const { width, height } = this.obj.get_size();\n        if (!this.obj.rotate || this.is_horizontal)\n            return { width, height };\n        else\n            return { width: height, height: width };\n    }\n    has_size_changed() {\n        const { width, height } = this.get_oriented_size();\n        if (this.is_horizontal)\n            return this.bbox.height != height;\n        else\n            return this.bbox.width != width;\n    }\n    get dimension() {\n        return this._dim;\n    }\n    get normals() {\n        return this._normals;\n    }\n    get is_horizontal() {\n        return this._dim == 0;\n    }\n    get is_vertical() {\n        return this._dim == 1;\n    }\n    apply_label_text_heuristics(ctx, orient) {\n        const side = this.side;\n        let baseline;\n        let align;\n        if (isString(orient)) {\n            baseline = _baseline_lookup[side][orient];\n            align = _align_lookup[side][orient];\n        }\n        else {\n            if (orient === 0) {\n                baseline = \"whatever\"; // XXX: _baseline_lookup[side][orient]\n                align = \"whatever\"; // XXX: _align_lookup[side][orient]\n            }\n            else if (orient < 0) {\n                baseline = 'middle';\n                align = _align_lookup_negative[side];\n            }\n            else {\n                baseline = 'middle';\n                align = _align_lookup_positive[side];\n            }\n        }\n        ctx.textBaseline = baseline;\n        ctx.textAlign = align;\n    }\n    get_label_angle_heuristic(orient) {\n        return _angle_lookup[this.side][orient];\n    }\n}\nSidePanel.__name__ = \"SidePanel\";\n//# sourceMappingURL=side_panel.js.map"]},"metadata":{},"sourceType":"module"}