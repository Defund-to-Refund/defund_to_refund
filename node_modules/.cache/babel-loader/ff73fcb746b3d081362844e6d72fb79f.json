{"ast":null,"code":"import { HasProps } from \"./has_props\";\nimport { Selection } from \"../models/selections/selection\";\nimport { GlyphRendererView } from \"../models/renderers/glyph_renderer\";\nimport { GraphRendererView } from \"../models/renderers/graph_renderer\";\nimport * as p from \"./properties\";\nexport class SelectionManager extends HasProps {\n  constructor(attrs) {\n    super(attrs);\n    this.inspectors = {};\n  }\n\n  static init_SelectionManager() {\n    this.internal({\n      source: [p.Any]\n    });\n  }\n\n  select(renderer_views, geometry, final, append = false) {\n    // divide renderers into glyph_renderers or graph_renderers\n    const glyph_renderer_views = [];\n    const graph_renderer_views = [];\n\n    for (const r of renderer_views) {\n      if (r instanceof GlyphRendererView) glyph_renderer_views.push(r);else if (r instanceof GraphRendererView) graph_renderer_views.push(r);\n    }\n\n    let did_hit = false; // graph renderer case\n\n    for (const r of graph_renderer_views) {\n      const hit_test_result = r.model.selection_policy.hit_test(geometry, r);\n      did_hit = did_hit || r.model.selection_policy.do_selection(hit_test_result, r.model, final, append);\n    } // glyph renderers\n\n\n    if (glyph_renderer_views.length > 0) {\n      const hit_test_result = this.source.selection_policy.hit_test(geometry, glyph_renderer_views);\n      did_hit = did_hit || this.source.selection_policy.do_selection(hit_test_result, this.source, final, append);\n    }\n\n    return did_hit;\n  }\n\n  inspect(renderer_view, geometry) {\n    let did_hit = false;\n\n    if (renderer_view instanceof GlyphRendererView) {\n      const hit_test_result = renderer_view.hit_test(geometry);\n\n      if (hit_test_result != null) {\n        did_hit = !hit_test_result.is_empty();\n        const inspection = this.get_or_create_inspector(renderer_view.model);\n        inspection.update(hit_test_result, true, false);\n        this.source.setv({\n          inspected: inspection\n        }, {\n          silent: true\n        });\n        this.source.inspect.emit([renderer_view, {\n          geometry\n        }]);\n      }\n    } else if (renderer_view instanceof GraphRendererView) {\n      const hit_test_result = renderer_view.model.inspection_policy.hit_test(geometry, renderer_view);\n      did_hit = did_hit || renderer_view.model.inspection_policy.do_inspection(hit_test_result, geometry, renderer_view, false, false);\n    }\n\n    return did_hit;\n  }\n\n  clear(rview) {\n    this.source.selected.clear();\n    if (rview != null) this.get_or_create_inspector(rview.model).clear();\n  }\n\n  get_or_create_inspector(rmodel) {\n    if (this.inspectors[rmodel.id] == null) this.inspectors[rmodel.id] = new Selection();\n    return this.inspectors[rmodel.id];\n  }\n\n}\nSelectionManager.__name__ = \"SelectionManager\";\nSelectionManager.init_SelectionManager();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/selection_manager.js"],"names":["HasProps","Selection","GlyphRendererView","GraphRendererView","p","SelectionManager","constructor","attrs","inspectors","init_SelectionManager","internal","source","Any","select","renderer_views","geometry","final","append","glyph_renderer_views","graph_renderer_views","r","push","did_hit","hit_test_result","model","selection_policy","hit_test","do_selection","length","inspect","renderer_view","is_empty","inspection","get_or_create_inspector","update","setv","inspected","silent","emit","inspection_policy","do_inspection","clear","rview","selected","rmodel","id","__name__"],"mappings":"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","sourcesContent":["import { HasProps } from \"./has_props\";\nimport { Selection } from \"../models/selections/selection\";\nimport { GlyphRendererView } from \"../models/renderers/glyph_renderer\";\nimport { GraphRendererView } from \"../models/renderers/graph_renderer\";\nimport * as p from \"./properties\";\nexport class SelectionManager extends HasProps {\n    constructor(attrs) {\n        super(attrs);\n        this.inspectors = {};\n    }\n    static init_SelectionManager() {\n        this.internal({\n            source: [p.Any],\n        });\n    }\n    select(renderer_views, geometry, final, append = false) {\n        // divide renderers into glyph_renderers or graph_renderers\n        const glyph_renderer_views = [];\n        const graph_renderer_views = [];\n        for (const r of renderer_views) {\n            if (r instanceof GlyphRendererView)\n                glyph_renderer_views.push(r);\n            else if (r instanceof GraphRendererView)\n                graph_renderer_views.push(r);\n        }\n        let did_hit = false;\n        // graph renderer case\n        for (const r of graph_renderer_views) {\n            const hit_test_result = r.model.selection_policy.hit_test(geometry, r);\n            did_hit = did_hit || r.model.selection_policy.do_selection(hit_test_result, r.model, final, append);\n        }\n        // glyph renderers\n        if (glyph_renderer_views.length > 0) {\n            const hit_test_result = this.source.selection_policy.hit_test(geometry, glyph_renderer_views);\n            did_hit = did_hit || this.source.selection_policy.do_selection(hit_test_result, this.source, final, append);\n        }\n        return did_hit;\n    }\n    inspect(renderer_view, geometry) {\n        let did_hit = false;\n        if (renderer_view instanceof GlyphRendererView) {\n            const hit_test_result = renderer_view.hit_test(geometry);\n            if (hit_test_result != null) {\n                did_hit = !hit_test_result.is_empty();\n                const inspection = this.get_or_create_inspector(renderer_view.model);\n                inspection.update(hit_test_result, true, false);\n                this.source.setv({ inspected: inspection }, { silent: true });\n                this.source.inspect.emit([renderer_view, { geometry }]);\n            }\n        }\n        else if (renderer_view instanceof GraphRendererView) {\n            const hit_test_result = renderer_view.model.inspection_policy.hit_test(geometry, renderer_view);\n            did_hit = did_hit || renderer_view.model.inspection_policy.do_inspection(hit_test_result, geometry, renderer_view, false, false);\n        }\n        return did_hit;\n    }\n    clear(rview) {\n        this.source.selected.clear();\n        if (rview != null)\n            this.get_or_create_inspector(rview.model).clear();\n    }\n    get_or_create_inspector(rmodel) {\n        if (this.inspectors[rmodel.id] == null)\n            this.inspectors[rmodel.id] = new Selection();\n        return this.inspectors[rmodel.id];\n    }\n}\nSelectionManager.__name__ = \"SelectionManager\";\nSelectionManager.init_SelectionManager();\n//# sourceMappingURL=selection_manager.js.map"]},"metadata":{},"sourceType":"module"}