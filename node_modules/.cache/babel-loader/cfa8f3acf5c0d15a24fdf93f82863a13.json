{"ast":null,"code":"import { CategoricalScale } from \"../scales/categorical_scale\";\nimport { ContinuousScale } from \"../scales/continuous_scale\";\nimport { LogScale } from \"../scales/log_scale\";\nimport { Range1d } from \"../ranges/range1d\";\nimport { DataRange1d } from \"../ranges/data_range1d\";\nimport { FactorRange } from \"../ranges/factor_range\";\nimport { LayoutItem } from \"../../core/layout\";\nexport class CartesianFrame extends LayoutItem {\n  constructor(x_scale, y_scale, x_range, y_range, extra_x_ranges = {}, extra_y_ranges = {}) {\n    super();\n    this.x_scale = x_scale;\n    this.y_scale = y_scale;\n    this.x_range = x_range;\n    this.y_range = y_range;\n    this.extra_x_ranges = extra_x_ranges;\n    this.extra_y_ranges = extra_y_ranges;\n\n    this._configure_scales();\n  }\n\n  map_to_screen(x, y, x_name = \"default\", y_name = \"default\") {\n    const sx = this.xscales[x_name].v_compute(x);\n    const sy = this.yscales[y_name].v_compute(y);\n    return [sx, sy];\n  }\n\n  _get_ranges(range, extra_ranges) {\n    return Object.assign(Object.assign({}, extra_ranges), {\n      default: range\n    });\n  }\n  /*protected*/\n\n\n  _get_scales(scale, ranges, frame_range) {\n    const scales = {};\n\n    for (const name in ranges) {\n      const range = ranges[name];\n\n      if (range instanceof DataRange1d || range instanceof Range1d) {\n        if (!(scale instanceof ContinuousScale)) throw new Error(`Range ${range.type} is incompatible is Scale ${scale.type}`);\n      }\n\n      if (range instanceof FactorRange) {\n        if (!(scale instanceof CategoricalScale)) throw new Error(`Range ${range.type} is incompatible is Scale ${scale.type}`);\n      }\n\n      if (scale instanceof LogScale && range instanceof DataRange1d) range.scale_hint = \"log\";\n      const s = scale.clone();\n      s.setv({\n        source_range: range,\n        target_range: frame_range\n      });\n      scales[name] = s;\n    }\n\n    return scales;\n  }\n\n  _configure_frame_ranges() {\n    // data to/from screen space transform (left-bottom <-> left-top origin)\n    this._h_target = new Range1d({\n      start: this._left.value,\n      end: this._right.value\n    });\n    this._v_target = new Range1d({\n      start: this._bottom.value,\n      end: this._top.value\n    });\n  }\n\n  _configure_scales() {\n    this._configure_frame_ranges();\n\n    this._x_ranges = this._get_ranges(this.x_range, this.extra_x_ranges);\n    this._y_ranges = this._get_ranges(this.y_range, this.extra_y_ranges);\n    this._xscales = this._get_scales(this.x_scale, this._x_ranges, this._h_target);\n    this._yscales = this._get_scales(this.y_scale, this._y_ranges, this._v_target);\n  }\n\n  _update_scales() {\n    this._configure_frame_ranges();\n\n    for (const name in this._xscales) {\n      const scale = this._xscales[name];\n      scale.target_range = this._h_target;\n    }\n\n    for (const name in this._yscales) {\n      const scale = this._yscales[name];\n      scale.target_range = this._v_target;\n    }\n  }\n\n  _set_geometry(outer, inner) {\n    super._set_geometry(outer, inner);\n\n    this._update_scales();\n  }\n\n  get x_ranges() {\n    return this._x_ranges;\n  }\n\n  get y_ranges() {\n    return this._y_ranges;\n  }\n\n  get xscales() {\n    return this._xscales;\n  }\n\n  get yscales() {\n    return this._yscales;\n  }\n\n}\nCartesianFrame.__name__ = \"CartesianFrame\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/canvas/cartesian_frame.js"],"names":["CategoricalScale","ContinuousScale","LogScale","Range1d","DataRange1d","FactorRange","LayoutItem","CartesianFrame","constructor","x_scale","y_scale","x_range","y_range","extra_x_ranges","extra_y_ranges","_configure_scales","map_to_screen","x","y","x_name","y_name","sx","xscales","v_compute","sy","yscales","_get_ranges","range","extra_ranges","Object","assign","default","_get_scales","scale","ranges","frame_range","scales","name","Error","type","scale_hint","s","clone","setv","source_range","target_range","_configure_frame_ranges","_h_target","start","_left","value","end","_right","_v_target","_bottom","_top","_x_ranges","_y_ranges","_xscales","_yscales","_update_scales","_set_geometry","outer","inner","x_ranges","y_ranges","__name__"],"mappings":"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","sourcesContent":["import { CategoricalScale } from \"../scales/categorical_scale\";\nimport { ContinuousScale } from \"../scales/continuous_scale\";\nimport { LogScale } from \"../scales/log_scale\";\nimport { Range1d } from \"../ranges/range1d\";\nimport { DataRange1d } from \"../ranges/data_range1d\";\nimport { FactorRange } from \"../ranges/factor_range\";\nimport { LayoutItem } from \"../../core/layout\";\nexport class CartesianFrame extends LayoutItem {\n    constructor(x_scale, y_scale, x_range, y_range, extra_x_ranges = {}, extra_y_ranges = {}) {\n        super();\n        this.x_scale = x_scale;\n        this.y_scale = y_scale;\n        this.x_range = x_range;\n        this.y_range = y_range;\n        this.extra_x_ranges = extra_x_ranges;\n        this.extra_y_ranges = extra_y_ranges;\n        this._configure_scales();\n    }\n    map_to_screen(x, y, x_name = \"default\", y_name = \"default\") {\n        const sx = this.xscales[x_name].v_compute(x);\n        const sy = this.yscales[y_name].v_compute(y);\n        return [sx, sy];\n    }\n    _get_ranges(range, extra_ranges) {\n        return Object.assign(Object.assign({}, extra_ranges), { default: range });\n    }\n    /*protected*/ _get_scales(scale, ranges, frame_range) {\n        const scales = {};\n        for (const name in ranges) {\n            const range = ranges[name];\n            if (range instanceof DataRange1d || range instanceof Range1d) {\n                if (!(scale instanceof ContinuousScale))\n                    throw new Error(`Range ${range.type} is incompatible is Scale ${scale.type}`);\n            }\n            if (range instanceof FactorRange) {\n                if (!(scale instanceof CategoricalScale))\n                    throw new Error(`Range ${range.type} is incompatible is Scale ${scale.type}`);\n            }\n            if (scale instanceof LogScale && range instanceof DataRange1d)\n                range.scale_hint = \"log\";\n            const s = scale.clone();\n            s.setv({ source_range: range, target_range: frame_range });\n            scales[name] = s;\n        }\n        return scales;\n    }\n    _configure_frame_ranges() {\n        // data to/from screen space transform (left-bottom <-> left-top origin)\n        this._h_target = new Range1d({ start: this._left.value, end: this._right.value });\n        this._v_target = new Range1d({ start: this._bottom.value, end: this._top.value });\n    }\n    _configure_scales() {\n        this._configure_frame_ranges();\n        this._x_ranges = this._get_ranges(this.x_range, this.extra_x_ranges);\n        this._y_ranges = this._get_ranges(this.y_range, this.extra_y_ranges);\n        this._xscales = this._get_scales(this.x_scale, this._x_ranges, this._h_target);\n        this._yscales = this._get_scales(this.y_scale, this._y_ranges, this._v_target);\n    }\n    _update_scales() {\n        this._configure_frame_ranges();\n        for (const name in this._xscales) {\n            const scale = this._xscales[name];\n            scale.target_range = this._h_target;\n        }\n        for (const name in this._yscales) {\n            const scale = this._yscales[name];\n            scale.target_range = this._v_target;\n        }\n    }\n    _set_geometry(outer, inner) {\n        super._set_geometry(outer, inner);\n        this._update_scales();\n    }\n    get x_ranges() {\n        return this._x_ranges;\n    }\n    get y_ranges() {\n        return this._y_ranges;\n    }\n    get xscales() {\n        return this._xscales;\n    }\n    get yscales() {\n        return this._yscales;\n    }\n}\nCartesianFrame.__name__ = \"CartesianFrame\";\n//# sourceMappingURL=cartesian_frame.js.map"]},"metadata":{},"sourceType":"module"}