{"ast":null,"code":"import { DataSource } from \"./data_source\";\nimport { Signal, Signal0 } from \"../../core/signaling\";\nimport { logger } from \"../../core/logging\";\nimport { SelectionManager } from \"../../core/selection_manager\";\nimport * as p from \"../../core/properties\";\nimport { isArray } from \"../../core/util/types\";\nimport { uniq, range } from \"../../core/util/array\";\nimport { keys, values } from \"../../core/util/object\";\nimport { Selection } from \"../selections/selection\";\nimport { UnionRenderers } from \"../selections/interaction_policy\";\nexport class ColumnarDataSource extends DataSource {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  get_array(key) {\n    let column = this.data[key];\n    if (column == null) this.data[key] = column = [];else if (!isArray(column)) this.data[key] = column = Array.from(column);\n    return column;\n  }\n\n  static init_ColumnarDataSource() {\n    this.define({\n      selection_policy: [p.Instance, () => new UnionRenderers()]\n    });\n    this.internal({\n      selection_manager: [p.Instance, self => new SelectionManager({\n        source: self\n      })],\n      inspected: [p.Instance, () => new Selection()],\n      _shapes: [p.Any, {}]\n    });\n  }\n\n  initialize() {\n    super.initialize();\n    this._select = new Signal0(this, \"select\");\n    this.inspect = new Signal(this, \"inspect\"); // XXX: <[indices, tool, renderer-view, source, data], this>\n\n    this.streaming = new Signal0(this, \"streaming\");\n    this.patching = new Signal(this, \"patching\");\n  }\n\n  get_column(colname) {\n    const column = this.data[colname];\n    return column != null ? column : null;\n  }\n\n  columns() {\n    // return the column names in this data source\n    return keys(this.data);\n  }\n\n  get_length(soft = true) {\n    const lengths = uniq(values(this.data).map(v => v.length));\n\n    switch (lengths.length) {\n      case 0:\n        {\n          return null; // XXX: don't guess, treat on case-by-case basis\n        }\n\n      case 1:\n        {\n          return lengths[0];\n        }\n\n      default:\n        {\n          const msg = \"data source has columns of inconsistent lengths\";\n\n          if (soft) {\n            logger.warn(msg);\n            return lengths.sort()[0];\n          } else throw new Error(msg);\n        }\n    }\n  }\n\n  get_indices() {\n    const length = this.get_length();\n    return range(0, length != null ? length : 1); //TODO: returns [0] when no data, should it?\n  }\n\n  clear() {\n    const empty = {};\n\n    for (const col of this.columns()) {\n      empty[col] = new this.data[col].constructor(0);\n    }\n\n    this.data = empty;\n  }\n\n}\nColumnarDataSource.__name__ = \"ColumnarDataSource\";\nColumnarDataSource.init_ColumnarDataSource();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/sources/columnar_data_source.js"],"names":["DataSource","Signal","Signal0","logger","SelectionManager","p","isArray","uniq","range","keys","values","Selection","UnionRenderers","ColumnarDataSource","constructor","attrs","get_array","key","column","data","Array","from","init_ColumnarDataSource","define","selection_policy","Instance","internal","selection_manager","self","source","inspected","_shapes","Any","initialize","_select","inspect","streaming","patching","get_column","colname","columns","get_length","soft","lengths","map","v","length","msg","warn","sort","Error","get_indices","clear","empty","col","__name__"],"mappings":"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","sourcesContent":["import { DataSource } from \"./data_source\";\nimport { Signal, Signal0 } from \"../../core/signaling\";\nimport { logger } from \"../../core/logging\";\nimport { SelectionManager } from \"../../core/selection_manager\";\nimport * as p from \"../../core/properties\";\nimport { isArray } from \"../../core/util/types\";\nimport { uniq, range } from \"../../core/util/array\";\nimport { keys, values } from \"../../core/util/object\";\nimport { Selection } from \"../selections/selection\";\nimport { UnionRenderers } from \"../selections/interaction_policy\";\nexport class ColumnarDataSource extends DataSource {\n    constructor(attrs) {\n        super(attrs);\n    }\n    get_array(key) {\n        let column = this.data[key];\n        if (column == null)\n            this.data[key] = column = [];\n        else if (!isArray(column))\n            this.data[key] = column = Array.from(column);\n        return column;\n    }\n    static init_ColumnarDataSource() {\n        this.define({\n            selection_policy: [p.Instance, () => new UnionRenderers()],\n        });\n        this.internal({\n            selection_manager: [p.Instance, (self) => new SelectionManager({ source: self })],\n            inspected: [p.Instance, () => new Selection()],\n            _shapes: [p.Any, {}],\n        });\n    }\n    initialize() {\n        super.initialize();\n        this._select = new Signal0(this, \"select\");\n        this.inspect = new Signal(this, \"inspect\"); // XXX: <[indices, tool, renderer-view, source, data], this>\n        this.streaming = new Signal0(this, \"streaming\");\n        this.patching = new Signal(this, \"patching\");\n    }\n    get_column(colname) {\n        const column = this.data[colname];\n        return column != null ? column : null;\n    }\n    columns() {\n        // return the column names in this data source\n        return keys(this.data);\n    }\n    get_length(soft = true) {\n        const lengths = uniq(values(this.data).map((v) => v.length));\n        switch (lengths.length) {\n            case 0: {\n                return null; // XXX: don't guess, treat on case-by-case basis\n            }\n            case 1: {\n                return lengths[0];\n            }\n            default: {\n                const msg = \"data source has columns of inconsistent lengths\";\n                if (soft) {\n                    logger.warn(msg);\n                    return lengths.sort()[0];\n                }\n                else\n                    throw new Error(msg);\n            }\n        }\n    }\n    get_indices() {\n        const length = this.get_length();\n        return range(0, length != null ? length : 1);\n        //TODO: returns [0] when no data, should it?\n    }\n    clear() {\n        const empty = {};\n        for (const col of this.columns()) {\n            empty[col] = new this.data[col].constructor(0);\n        }\n        this.data = empty;\n    }\n}\nColumnarDataSource.__name__ = \"ColumnarDataSource\";\nColumnarDataSource.init_ColumnarDataSource();\n//# sourceMappingURL=columnar_data_source.js.map"]},"metadata":{},"sourceType":"module"}