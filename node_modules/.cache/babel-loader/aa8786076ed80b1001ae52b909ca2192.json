{"ast":null,"code":"import { Signal0, Signal } from \"./signaling\";\nimport { isArray } from \"./util/types\";\nimport { uniqueId } from \"./util/string\";\nexport class View {\n  constructor(options) {\n    this.removed = new Signal0(this, \"removed\");\n    this._ready = Promise.resolve(undefined);\n    if (options.model != null) this.model = options.model;else throw new Error(\"model of a view wasn't configured\");\n    this._parent = options.parent;\n    this.id = options.id || uniqueId();\n  }\n\n  get ready() {\n    return this._ready;\n  }\n\n  connect(signal, slot) {\n    const new_slot = (args, sender) => {\n      const promise = Promise.resolve(slot.call(this, args, sender));\n      this._ready = this._ready.then(() => promise);\n    };\n\n    return signal.connect(new_slot, this);\n  }\n\n  disconnect(signal, slot) {\n    return signal.disconnect(slot, this);\n  }\n\n  initialize() {}\n\n  async lazy_initialize() {}\n\n  remove() {\n    this._parent = undefined;\n    this.disconnect_signals();\n    this.removed.emit();\n  }\n\n  toString() {\n    return `${this.model.type}View(${this.id})`;\n  }\n\n  serializable_state() {\n    return {\n      type: this.model.type\n    };\n  }\n\n  get parent() {\n    if (this._parent !== undefined) return this._parent;else throw new Error(\"parent of a view wasn't configured\");\n  }\n\n  get is_root() {\n    return this.parent === null;\n  }\n\n  get root() {\n    return this.is_root ? this : this.parent.root;\n  }\n\n  assert_root() {\n    if (!this.is_root) throw new Error(`${this.toString()} is not a root layout`);\n  }\n\n  connect_signals() {}\n\n  disconnect_signals() {\n    Signal.disconnectReceiver(this);\n  }\n\n  on_change(properties, fn) {\n    for (const property of isArray(properties) ? properties : [properties]) this.connect(property.change, fn);\n  }\n\n}\nView.__name__ = \"View\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/view.js"],"names":["Signal0","Signal","isArray","uniqueId","View","constructor","options","removed","_ready","Promise","resolve","undefined","model","Error","_parent","parent","id","ready","connect","signal","slot","new_slot","args","sender","promise","call","then","disconnect","initialize","lazy_initialize","remove","disconnect_signals","emit","toString","type","serializable_state","is_root","root","assert_root","connect_signals","disconnectReceiver","on_change","properties","fn","property","change","__name__"],"mappings":"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","sourcesContent":["import { Signal0, Signal } from \"./signaling\";\nimport { isArray } from \"./util/types\";\nimport { uniqueId } from \"./util/string\";\nexport class View {\n    constructor(options) {\n        this.removed = new Signal0(this, \"removed\");\n        this._ready = Promise.resolve(undefined);\n        if (options.model != null)\n            this.model = options.model;\n        else\n            throw new Error(\"model of a view wasn't configured\");\n        this._parent = options.parent;\n        this.id = options.id || uniqueId();\n    }\n    get ready() {\n        return this._ready;\n    }\n    connect(signal, slot) {\n        const new_slot = (args, sender) => {\n            const promise = Promise.resolve(slot.call(this, args, sender));\n            this._ready = this._ready.then(() => promise);\n        };\n        return signal.connect(new_slot, this);\n    }\n    disconnect(signal, slot) {\n        return signal.disconnect(slot, this);\n    }\n    initialize() { }\n    async lazy_initialize() { }\n    remove() {\n        this._parent = undefined;\n        this.disconnect_signals();\n        this.removed.emit();\n    }\n    toString() {\n        return `${this.model.type}View(${this.id})`;\n    }\n    serializable_state() {\n        return { type: this.model.type };\n    }\n    get parent() {\n        if (this._parent !== undefined)\n            return this._parent;\n        else\n            throw new Error(\"parent of a view wasn't configured\");\n    }\n    get is_root() {\n        return this.parent === null;\n    }\n    get root() {\n        return this.is_root ? this : this.parent.root;\n    }\n    assert_root() {\n        if (!this.is_root)\n            throw new Error(`${this.toString()} is not a root layout`);\n    }\n    connect_signals() { }\n    disconnect_signals() {\n        Signal.disconnectReceiver(this);\n    }\n    on_change(properties, fn) {\n        for (const property of isArray(properties) ? properties : [properties])\n            this.connect(property.change, fn);\n    }\n}\nView.__name__ = \"View\";\n//# sourceMappingURL=view.js.map"]},"metadata":{},"sourceType":"module"}