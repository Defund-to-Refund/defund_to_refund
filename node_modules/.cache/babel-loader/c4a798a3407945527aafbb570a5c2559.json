{"ast":null,"code":"import { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { isArray } from \"../../../core/util/types\";\nimport { EditTool, EditToolView } from \"./edit_tool\";\nimport { bk_tool_icon_freehand_draw } from \"../../../styles/icons\";\nexport class FreehandDrawToolView extends EditToolView {\n  _draw(ev, mode, emit = false) {\n    if (!this.model.active) return;\n    const renderer = this.model.renderers[0];\n\n    const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n    if (point == null) return;\n    const [x, y] = point;\n    const cds = renderer.data_source;\n    const glyph = renderer.glyph;\n    const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n\n    if (mode == 'new') {\n      this._pop_glyphs(cds, this.model.num_objects);\n\n      if (xkey) cds.get_array(xkey).push([x]);\n      if (ykey) cds.get_array(ykey).push([y]);\n\n      this._pad_empty_columns(cds, [xkey, ykey]);\n    } else if (mode == 'add') {\n      if (xkey) {\n        const xidx = cds.data[xkey].length - 1;\n        let xs = cds.get_array(xkey)[xidx];\n\n        if (!isArray(xs)) {\n          xs = Array.from(xs);\n          cds.data[xkey][xidx] = xs;\n        }\n\n        xs.push(x);\n      }\n\n      if (ykey) {\n        const yidx = cds.data[ykey].length - 1;\n        let ys = cds.get_array(ykey)[yidx];\n\n        if (!isArray(ys)) {\n          ys = Array.from(ys);\n          cds.data[ykey][yidx] = ys;\n        }\n\n        ys.push(y);\n      }\n    }\n\n    this._emit_cds_changes(cds, true, true, emit);\n  }\n\n  _pan_start(ev) {\n    this._draw(ev, 'new');\n  }\n\n  _pan(ev) {\n    this._draw(ev, 'add');\n  }\n\n  _pan_end(ev) {\n    this._draw(ev, 'add', true);\n  }\n\n  _tap(ev) {\n    this._select_event(ev, ev.shiftKey, this.model.renderers);\n  }\n\n  _keyup(ev) {\n    if (!this.model.active || !this._mouse_in_frame) return;\n\n    for (const renderer of this.model.renderers) {\n      if (ev.keyCode === Keys.Esc) {\n        renderer.data_source.selection_manager.clear();\n      } else if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n      }\n    }\n  }\n\n}\nFreehandDrawToolView.__name__ = \"FreehandDrawToolView\";\nexport class FreehandDrawTool extends EditTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Freehand Draw Tool\";\n    this.icon = bk_tool_icon_freehand_draw;\n    this.event_type = [\"pan\", \"tap\"];\n    this.default_order = 3;\n  }\n\n  static init_FreehandDrawTool() {\n    this.prototype.default_view = FreehandDrawToolView;\n    this.define({\n      num_objects: [p.Int, 0]\n    });\n  }\n\n}\nFreehandDrawTool.__name__ = \"FreehandDrawTool\";\nFreehandDrawTool.init_FreehandDrawTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/edit/freehand_draw_tool.js"],"names":["Keys","p","isArray","EditTool","EditToolView","bk_tool_icon_freehand_draw","FreehandDrawToolView","_draw","ev","mode","emit","model","active","renderer","renderers","point","_map_drag","sx","sy","x","y","cds","data_source","glyph","xkey","ykey","xs","field","ys","_pop_glyphs","num_objects","get_array","push","_pad_empty_columns","xidx","data","length","Array","from","yidx","_emit_cds_changes","_pan_start","_pan","_pan_end","_tap","_select_event","shiftKey","_keyup","_mouse_in_frame","keyCode","Esc","selection_manager","clear","Backspace","_delete_selected","__name__","FreehandDrawTool","constructor","attrs","tool_name","icon","event_type","default_order","init_FreehandDrawTool","prototype","default_view","define","Int"],"mappings":"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","sourcesContent":["import { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { isArray } from \"../../../core/util/types\";\nimport { EditTool, EditToolView } from \"./edit_tool\";\nimport { bk_tool_icon_freehand_draw } from \"../../../styles/icons\";\nexport class FreehandDrawToolView extends EditToolView {\n    _draw(ev, mode, emit = false) {\n        if (!this.model.active)\n            return;\n        const renderer = this.model.renderers[0];\n        const point = this._map_drag(ev.sx, ev.sy, renderer);\n        if (point == null)\n            return;\n        const [x, y] = point;\n        const cds = renderer.data_source;\n        const glyph = renderer.glyph;\n        const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n        if (mode == 'new') {\n            this._pop_glyphs(cds, this.model.num_objects);\n            if (xkey)\n                cds.get_array(xkey).push([x]);\n            if (ykey)\n                cds.get_array(ykey).push([y]);\n            this._pad_empty_columns(cds, [xkey, ykey]);\n        }\n        else if (mode == 'add') {\n            if (xkey) {\n                const xidx = cds.data[xkey].length - 1;\n                let xs = cds.get_array(xkey)[xidx];\n                if (!isArray(xs)) {\n                    xs = Array.from(xs);\n                    cds.data[xkey][xidx] = xs;\n                }\n                xs.push(x);\n            }\n            if (ykey) {\n                const yidx = cds.data[ykey].length - 1;\n                let ys = cds.get_array(ykey)[yidx];\n                if (!isArray(ys)) {\n                    ys = Array.from(ys);\n                    cds.data[ykey][yidx] = ys;\n                }\n                ys.push(y);\n            }\n        }\n        this._emit_cds_changes(cds, true, true, emit);\n    }\n    _pan_start(ev) {\n        this._draw(ev, 'new');\n    }\n    _pan(ev) {\n        this._draw(ev, 'add');\n    }\n    _pan_end(ev) {\n        this._draw(ev, 'add', true);\n    }\n    _tap(ev) {\n        this._select_event(ev, ev.shiftKey, this.model.renderers);\n    }\n    _keyup(ev) {\n        if (!this.model.active || !this._mouse_in_frame)\n            return;\n        for (const renderer of this.model.renderers) {\n            if (ev.keyCode === Keys.Esc) {\n                renderer.data_source.selection_manager.clear();\n            }\n            else if (ev.keyCode === Keys.Backspace) {\n                this._delete_selected(renderer);\n            }\n        }\n    }\n}\nFreehandDrawToolView.__name__ = \"FreehandDrawToolView\";\nexport class FreehandDrawTool extends EditTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Freehand Draw Tool\";\n        this.icon = bk_tool_icon_freehand_draw;\n        this.event_type = [\"pan\", \"tap\"];\n        this.default_order = 3;\n    }\n    static init_FreehandDrawTool() {\n        this.prototype.default_view = FreehandDrawToolView;\n        this.define({\n            num_objects: [p.Int, 0],\n        });\n    }\n}\nFreehandDrawTool.__name__ = \"FreehandDrawTool\";\nFreehandDrawTool.init_FreehandDrawTool();\n//# sourceMappingURL=freehand_draw_tool.js.map"]},"metadata":{},"sourceType":"module"}