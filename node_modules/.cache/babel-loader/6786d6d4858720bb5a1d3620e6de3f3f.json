{"ast":null,"code":"/*!\n * numbro.js\n * version : 1.6.2\n * author : FÃ¶retagsplatsen AB\n * license : MIT\n * http://www.foretagsplatsen.se\n */\n\n/************************************\n    Constants\n************************************/\nvar numbro,\n    VERSION = '1.6.2',\n    // internal storage for culture config files\ncultures = {},\n    // Todo: Remove in 2.0.0\nlanguages = cultures,\n    currentCulture = 'en-US',\n    zeroFormat = null,\n    defaultFormat = '0,0',\n    defaultCurrencyFormat = '0$',\n    // check for nodeJS\nhasModule = typeof module !== 'undefined' && module.exports,\n    // default culture\nenUS = {\n  delimiters: {\n    thousands: ',',\n    decimal: '.'\n  },\n  abbreviations: {\n    thousand: 'k',\n    million: 'm',\n    billion: 'b',\n    trillion: 't'\n  },\n  ordinal: function (number) {\n    var b = number % 10;\n    return ~~(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';\n  },\n  currency: {\n    symbol: '$',\n    position: 'prefix'\n  },\n  defaults: {\n    currencyFormat: ',0000 a'\n  },\n  formats: {\n    fourDigits: '0000 a',\n    fullWithTwoDecimals: '$ ,0.00',\n    fullWithTwoDecimalsNoCurrency: ',0.00'\n  }\n};\n/************************************\n    Constructors\n************************************/\n// Numbro prototype object\n\nfunction Numbro(number) {\n  this._value = number;\n}\n\nfunction zeroes(count) {\n  var i,\n      ret = '';\n\n  for (i = 0; i < count; i++) {\n    ret += '0';\n  }\n\n  return ret;\n}\n/**\n * Implementation of toFixed() for numbers with exponent > 21\n *\n *\n */\n\n\nfunction toFixedLarge(value, precision) {\n  var mantissa, beforeDec, afterDec, exponent, str;\n  str = value.toString();\n  mantissa = str.split('e')[0];\n  exponent = str.split('e')[1];\n  beforeDec = mantissa.split('.')[0];\n  afterDec = mantissa.split('.')[1] || '';\n  str = beforeDec + afterDec + zeroes(exponent - afterDec.length);\n\n  if (precision > 0) {\n    str += '.' + zeroes(precision);\n  }\n\n  return str;\n}\n/**\n * Implementation of toFixed() that treats floats more like decimals\n *\n * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n * problems for accounting- and finance-related software.\n */\n\n\nfunction toFixed(value, precision, roundingFunction, optionals) {\n  var power = Math.pow(10, precision),\n      optionalsRegExp,\n      output;\n\n  if (value.toFixed(0).search('e') > -1) {\n    // Above 1e21, toFixed returns scientific notation, which\n    // is useless and unexpected\n    output = toFixedLarge(value, precision);\n  } else {\n    //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n    // Multiply up by precision, round accurately, then divide and use native toFixed():\n    output = (roundingFunction(value * power) / power).toFixed(precision);\n  }\n\n  if (optionals) {\n    optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n    output = output.replace(optionalsRegExp, '');\n  }\n\n  return output;\n}\n/************************************\n    Formatting\n************************************/\n// determine what type of formatting we need to do\n\n\nfunction formatNumbro(value, format, roundingFunction) {\n  var output; // TODO: do something with `language`\n  // figure out what kind of format we are dealing with\n\n  if (format.indexOf('$') > -1) {\n    // currency!!!!!\n    output = formatCurrency(value, format, roundingFunction);\n  } else if (format.indexOf('%') > -1) {\n    // percentage\n    output = formatPercentage(value, format, roundingFunction);\n  } else if (format.indexOf(':') > -1) {\n    // time\n    output = formatTime(value);\n  } else {\n    // plain ol' numbers or bytes\n    output = formatNumber(value, format, roundingFunction);\n  } // return string\n\n\n  return output;\n}\n\nfunction formatCurrency(value, originalFormat, roundingFunction) {\n  var format = originalFormat,\n      symbolIndex = format.indexOf('$'),\n      openParenIndex = format.indexOf('('),\n      plusSignIndex = format.indexOf('+'),\n      minusSignIndex = format.indexOf('-'),\n      space = '',\n      decimalSeparator = '',\n      spliceIndex,\n      output;\n\n  if (format.indexOf('$') === -1) {\n    // Use defaults instead of the format provided\n    if (cultures[currentCulture].currency.position === 'infix') {\n      decimalSeparator = cultures[currentCulture].currency.symbol;\n\n      if (cultures[currentCulture].currency.spaceSeparated) {\n        decimalSeparator = ' ' + decimalSeparator + ' ';\n      }\n    } else if (cultures[currentCulture].currency.spaceSeparated) {\n      space = ' ';\n    }\n  } else {\n    // check for space before or after currency\n    if (format.indexOf(' $') > -1) {\n      space = ' ';\n      format = format.replace(' $', '');\n    } else if (format.indexOf('$ ') > -1) {\n      space = ' ';\n      format = format.replace('$ ', '');\n    } else {\n      format = format.replace('$', '');\n    }\n  } // Format The Number\n\n\n  output = formatNumber(value, format, roundingFunction, decimalSeparator);\n\n  if (originalFormat.indexOf('$') === -1) {\n    // Use defaults instead of the format provided\n    switch (cultures[currentCulture].currency.position) {\n      case 'postfix':\n        if (output.indexOf(')') > -1) {\n          output = output.split('');\n          output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n          output = output.join('');\n        } else {\n          output = output + space + cultures[currentCulture].currency.symbol;\n        }\n\n        break;\n\n      case 'infix':\n        break;\n\n      case 'prefix':\n        if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n          output = output.split('');\n          spliceIndex = Math.max(openParenIndex, minusSignIndex) + 1;\n          output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n          output = output.join('');\n        } else {\n          output = cultures[currentCulture].currency.symbol + space + output;\n        }\n\n        break;\n\n      default:\n        throw Error('Currency position should be among [\"prefix\", \"infix\", \"postfix\"]');\n    }\n  } else {\n    // position the symbol\n    if (symbolIndex <= 1) {\n      if (output.indexOf('(') > -1 || output.indexOf('+') > -1 || output.indexOf('-') > -1) {\n        output = output.split('');\n        spliceIndex = 1;\n\n        if (symbolIndex < openParenIndex || symbolIndex < plusSignIndex || symbolIndex < minusSignIndex) {\n          // the symbol appears before the \"(\", \"+\" or \"-\"\n          spliceIndex = 0;\n        }\n\n        output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n        output = output.join('');\n      } else {\n        output = cultures[currentCulture].currency.symbol + space + output;\n      }\n    } else {\n      if (output.indexOf(')') > -1) {\n        output = output.split('');\n        output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n        output = output.join('');\n      } else {\n        output = output + space + cultures[currentCulture].currency.symbol;\n      }\n    }\n  }\n\n  return output;\n}\n\nfunction formatPercentage(value, format, roundingFunction) {\n  var space = '',\n      output;\n  value = value * 100; // check for space before %\n\n  if (format.indexOf(' %') > -1) {\n    space = ' ';\n    format = format.replace(' %', '');\n  } else {\n    format = format.replace('%', '');\n  }\n\n  output = formatNumber(value, format, roundingFunction);\n\n  if (output.indexOf(')') > -1) {\n    output = output.split('');\n    output.splice(-1, 0, space + '%');\n    output = output.join('');\n  } else {\n    output = output + space + '%';\n  }\n\n  return output;\n}\n\nfunction formatTime(value) {\n  var hours = Math.floor(value / 60 / 60),\n      minutes = Math.floor((value - hours * 60 * 60) / 60),\n      seconds = Math.round(value - hours * 60 * 60 - minutes * 60);\n  return hours + ':' + (minutes < 10 ? '0' + minutes : minutes) + ':' + (seconds < 10 ? '0' + seconds : seconds);\n}\n\nfunction formatNumber(value, format, roundingFunction, sep) {\n  var negP = false,\n      signed = false,\n      optDec = false,\n      abbr = '',\n      i,\n      abbrK = false,\n      // force abbreviation to thousands\n  abbrM = false,\n      // force abbreviation to millions\n  abbrB = false,\n      // force abbreviation to billions\n  abbrT = false,\n      // force abbreviation to trillions\n  abbrForce = false,\n      // force abbreviation\n  bytes = '',\n      ord = '',\n      abs = Math.abs(value),\n      binarySuffixes = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n      decimalSuffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n      min,\n      max,\n      power,\n      totalLength,\n      length,\n      minimumPrecision,\n      pow,\n      w,\n      intPrecision,\n      precision,\n      prefix,\n      postfix,\n      thousands,\n      d = '',\n      forcedNeg = false,\n      neg = false,\n      indexOpenP,\n      size,\n      indexMinus,\n      paren = '',\n      minlen; // check if number is zero and a custom zero format has been set\n\n  if (value === 0 && zeroFormat !== null) {\n    return zeroFormat;\n  }\n\n  if (!isFinite(value)) {\n    return '' + value;\n  }\n\n  if (format.indexOf('{') === 0) {\n    var end = format.indexOf('}');\n\n    if (end === -1) {\n      throw Error('Format should also contain a \"}\"');\n    }\n\n    prefix = format.slice(1, end);\n    format = format.slice(end + 1);\n  } else {\n    prefix = '';\n  }\n\n  if (format.indexOf('}') === format.length - 1) {\n    var start = format.indexOf('{');\n\n    if (start === -1) {\n      throw Error('Format should also contain a \"{\"');\n    }\n\n    postfix = format.slice(start + 1, -1);\n    format = format.slice(0, start + 1);\n  } else {\n    postfix = '';\n  } // check for min length\n\n\n  var info;\n\n  if (format.indexOf('.') === -1) {\n    info = format.match(/([0-9]+).*/);\n  } else {\n    info = format.match(/([0-9]+)\\..*/);\n  }\n\n  minlen = info === null ? -1 : info[1].length; // see if we should use parentheses for negative number or if we should prefix with a sign\n  // if both are present we default to parentheses\n\n  if (format.indexOf('-') !== -1) {\n    forcedNeg = true;\n  }\n\n  if (format.indexOf('(') > -1) {\n    negP = true;\n    format = format.slice(1, -1);\n  } else if (format.indexOf('+') > -1) {\n    signed = true;\n    format = format.replace(/\\+/g, '');\n  } // see if abbreviation is wanted\n\n\n  if (format.indexOf('a') > -1) {\n    intPrecision = format.split('.')[0].match(/[0-9]+/g) || ['0'];\n    intPrecision = parseInt(intPrecision[0], 10); // check if abbreviation is specified\n\n    abbrK = format.indexOf('aK') >= 0;\n    abbrM = format.indexOf('aM') >= 0;\n    abbrB = format.indexOf('aB') >= 0;\n    abbrT = format.indexOf('aT') >= 0;\n    abbrForce = abbrK || abbrM || abbrB || abbrT; // check for space before abbreviation\n\n    if (format.indexOf(' a') > -1) {\n      abbr = ' ';\n      format = format.replace(' a', '');\n    } else {\n      format = format.replace('a', '');\n    }\n\n    totalLength = Math.floor(Math.log(abs) / Math.LN10) + 1;\n    minimumPrecision = totalLength % 3;\n    minimumPrecision = minimumPrecision === 0 ? 3 : minimumPrecision;\n\n    if (intPrecision && abs !== 0) {\n      length = Math.floor(Math.log(abs) / Math.LN10) + 1 - intPrecision;\n      pow = 3 * ~~((Math.min(intPrecision, totalLength) - minimumPrecision) / 3);\n      abs = abs / Math.pow(10, pow);\n\n      if (format.indexOf('.') === -1 && intPrecision > 3) {\n        format += '[.]';\n        size = length === 0 ? 0 : 3 * ~~(length / 3) - length;\n        size = size < 0 ? size + 3 : size;\n\n        for (i = 0; i < size; i++) {\n          format += '0';\n        }\n      }\n    }\n\n    if (Math.floor(Math.log(Math.abs(value)) / Math.LN10) + 1 !== intPrecision) {\n      if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n        // trillion\n        abbr = abbr + cultures[currentCulture].abbreviations.trillion;\n        value = value / Math.pow(10, 12);\n      } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n        // billion\n        abbr = abbr + cultures[currentCulture].abbreviations.billion;\n        value = value / Math.pow(10, 9);\n      } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n        // million\n        abbr = abbr + cultures[currentCulture].abbreviations.million;\n        value = value / Math.pow(10, 6);\n      } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n        // thousand\n        abbr = abbr + cultures[currentCulture].abbreviations.thousand;\n        value = value / Math.pow(10, 3);\n      }\n    }\n  } // see if we are formatting binary bytes\n\n\n  if (format.indexOf('b') > -1) {\n    // check for space before\n    if (format.indexOf(' b') > -1) {\n      bytes = ' ';\n      format = format.replace(' b', '');\n    } else {\n      format = format.replace('b', '');\n    }\n\n    for (power = 0; power <= binarySuffixes.length; power++) {\n      min = Math.pow(1024, power);\n      max = Math.pow(1024, power + 1);\n\n      if (value >= min && value < max) {\n        bytes = bytes + binarySuffixes[power];\n\n        if (min > 0) {\n          value = value / min;\n        }\n\n        break;\n      }\n    }\n  } // see if we are formatting decimal bytes\n\n\n  if (format.indexOf('d') > -1) {\n    // check for space before\n    if (format.indexOf(' d') > -1) {\n      bytes = ' ';\n      format = format.replace(' d', '');\n    } else {\n      format = format.replace('d', '');\n    }\n\n    for (power = 0; power <= decimalSuffixes.length; power++) {\n      min = Math.pow(1000, power);\n      max = Math.pow(1000, power + 1);\n\n      if (value >= min && value < max) {\n        bytes = bytes + decimalSuffixes[power];\n\n        if (min > 0) {\n          value = value / min;\n        }\n\n        break;\n      }\n    }\n  } // see if ordinal is wanted\n\n\n  if (format.indexOf('o') > -1) {\n    // check for space before\n    if (format.indexOf(' o') > -1) {\n      ord = ' ';\n      format = format.replace(' o', '');\n    } else {\n      format = format.replace('o', '');\n    }\n\n    if (cultures[currentCulture].ordinal) {\n      ord = ord + cultures[currentCulture].ordinal(value);\n    }\n  }\n\n  if (format.indexOf('[.]') > -1) {\n    optDec = true;\n    format = format.replace('[.]', '.');\n  }\n\n  w = value.toString().split('.')[0];\n  precision = format.split('.')[1];\n  thousands = format.indexOf(',');\n\n  if (precision) {\n    if (precision.indexOf('*') !== -1) {\n      d = toFixed(value, value.toString().split('.')[1].length, roundingFunction);\n    } else {\n      if (precision.indexOf('[') > -1) {\n        precision = precision.replace(']', '');\n        precision = precision.split('[');\n        d = toFixed(value, precision[0].length + precision[1].length, roundingFunction, precision[1].length);\n      } else {\n        d = toFixed(value, precision.length, roundingFunction);\n      }\n    }\n\n    w = d.split('.')[0];\n\n    if (d.split('.')[1].length) {\n      var p = sep ? abbr + sep : cultures[currentCulture].delimiters.decimal;\n      d = p + d.split('.')[1];\n    } else {\n      d = '';\n    }\n\n    if (optDec && Number(d.slice(1)) === 0) {\n      d = '';\n    }\n  } else {\n    w = toFixed(value, null, roundingFunction);\n  } // format number\n\n\n  if (w.indexOf('-') > -1) {\n    w = w.slice(1);\n    neg = true;\n  }\n\n  if (w.length < minlen) {\n    w = new Array(minlen - w.length + 1).join('0') + w;\n  }\n\n  if (thousands > -1) {\n    w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' + cultures[currentCulture].delimiters.thousands);\n  }\n\n  if (format.indexOf('.') === 0) {\n    w = '';\n  }\n\n  indexOpenP = format.indexOf('(');\n  indexMinus = format.indexOf('-');\n\n  if (indexOpenP < indexMinus) {\n    paren = (negP && neg ? '(' : '') + (forcedNeg && neg || !negP && neg ? '-' : '');\n  } else {\n    paren = (forcedNeg && neg || !negP && neg ? '-' : '') + (negP && neg ? '(' : '');\n  }\n\n  return prefix + paren + (!neg && signed && value !== 0 ? '+' : '') + w + d + (ord ? ord : '') + (abbr && !sep ? abbr : '') + (bytes ? bytes : '') + (negP && neg ? ')' : '') + postfix;\n}\n/************************************\n    Top Level Functions\n************************************/\n\n\nnumbro = function (input) {\n  if (numbro.isNumbro(input)) {\n    input = input.value();\n  } else if (input === 0 || typeof input === 'undefined') {\n    input = 0;\n  } else if (!Number(input)) {\n    input = numbro.fn.unformat(input);\n  }\n\n  return new Numbro(Number(input));\n}; // version number\n\n\nnumbro.version = VERSION; // compare numbro object\n\nnumbro.isNumbro = function (obj) {\n  return obj instanceof Numbro;\n};\n/**\n * This function allow the user to set a new language with a fallback if\n * the language does not exist. If no fallback language is provided,\n * it fallbacks to english.\n *\n * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n * `setCulture` should be used instead.\n */\n\n\nnumbro.setLanguage = function (newLanguage, fallbackLanguage) {\n  console.warn('`setLanguage` is deprecated since version 1.6.0. Use `setCulture` instead');\n  var key = newLanguage,\n      prefix = newLanguage.split('-')[0],\n      matchingLanguage = null;\n\n  if (!languages[key]) {\n    Object.keys(languages).forEach(function (language) {\n      if (!matchingLanguage && language.split('-')[0] === prefix) {\n        matchingLanguage = language;\n      }\n    });\n    key = matchingLanguage || fallbackLanguage || 'en-US';\n  }\n\n  chooseCulture(key);\n};\n/**\n * This function allow the user to set a new culture with a fallback if\n * the culture does not exist. If no fallback culture is provided,\n * it fallbacks to \"en-US\".\n */\n\n\nnumbro.setCulture = function (newCulture, fallbackCulture) {\n  var key = newCulture,\n      suffix = newCulture.split('-')[1],\n      matchingCulture = null;\n\n  if (!cultures[key]) {\n    if (suffix) {\n      Object.keys(cultures).forEach(function (language) {\n        if (!matchingCulture && language.split('-')[1] === suffix) {\n          matchingCulture = language;\n        }\n      });\n    }\n\n    key = matchingCulture || fallbackCulture || 'en-US';\n  }\n\n  chooseCulture(key);\n};\n/**\n * This function will load languages and then set the global language.  If\n * no arguments are passed in, it will simply return the current global\n * language key.\n *\n * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n * `culture` should be used instead.\n */\n\n\nnumbro.language = function (key, values) {\n  console.warn('`language` is deprecated since version 1.6.0. Use `culture` instead');\n\n  if (!key) {\n    return currentCulture;\n  }\n\n  if (key && !values) {\n    if (!languages[key]) {\n      throw new Error('Unknown language : ' + key);\n    }\n\n    chooseCulture(key);\n  }\n\n  if (values || !languages[key]) {\n    setCulture(key, values);\n  }\n\n  return numbro;\n};\n/**\n * This function will load cultures and then set the global culture.  If\n * no arguments are passed in, it will simply return the current global\n * culture code.\n */\n\n\nnumbro.culture = function (code, values) {\n  if (!code) {\n    return currentCulture;\n  }\n\n  if (code && !values) {\n    if (!cultures[code]) {\n      throw new Error('Unknown culture : ' + code);\n    }\n\n    chooseCulture(code);\n  }\n\n  if (values || !cultures[code]) {\n    setCulture(code, values);\n  }\n\n  return numbro;\n};\n/**\n * This function provides access to the loaded language data.  If\n * no arguments are passed in, it will simply return the current\n * global language object.\n *\n * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n * `culture` should be used instead.\n */\n\n\nnumbro.languageData = function (key) {\n  console.warn('`languageData` is deprecated since version 1.6.0. Use `cultureData` instead');\n\n  if (!key) {\n    return languages[currentCulture];\n  }\n\n  if (!languages[key]) {\n    throw new Error('Unknown language : ' + key);\n  }\n\n  return languages[key];\n};\n/**\n * This function provides access to the loaded culture data.  If\n * no arguments are passed in, it will simply return the current\n * global culture object.\n */\n\n\nnumbro.cultureData = function (code) {\n  if (!code) {\n    return cultures[currentCulture];\n  }\n\n  if (!cultures[code]) {\n    throw new Error('Unknown culture : ' + code);\n  }\n\n  return cultures[code];\n};\n\nnumbro.culture('en-US', enUS);\n/**\n * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n * `cultures` should be used instead.\n */\n\nnumbro.languages = function () {\n  console.warn('`languages` is deprecated since version 1.6.0. Use `cultures` instead');\n  return languages;\n};\n\nnumbro.cultures = function () {\n  return cultures;\n};\n\nnumbro.zeroFormat = function (format) {\n  zeroFormat = typeof format === 'string' ? format : null;\n};\n\nnumbro.defaultFormat = function (format) {\n  defaultFormat = typeof format === 'string' ? format : '0.0';\n};\n\nnumbro.defaultCurrencyFormat = function (format) {\n  defaultCurrencyFormat = typeof format === 'string' ? format : '0$';\n};\n\nnumbro.validate = function (val, culture) {\n  var _decimalSep, _thousandSep, _currSymbol, _valArray, _abbrObj, _thousandRegEx, cultureData, temp; //coerce val to string\n\n\n  if (typeof val !== 'string') {\n    val += '';\n\n    if (console.warn) {\n      console.warn('Numbro.js: Value is not string. It has been co-erced to: ', val);\n    }\n  } //trim whitespaces from either sides\n\n\n  val = val.trim(); //if val is just digits return true\n\n  if (!!val.match(/^\\d+$/)) {\n    return true;\n  } //if val is empty return false\n\n\n  if (val === '') {\n    return false;\n  } //get the decimal and thousands separator from numbro.cultureData\n\n\n  try {\n    //check if the culture is understood by numbro. if not, default it to current culture\n    cultureData = numbro.cultureData(culture);\n  } catch (e) {\n    cultureData = numbro.cultureData(numbro.culture());\n  } //setup the delimiters and currency symbol based on culture\n\n\n  _currSymbol = cultureData.currency.symbol;\n  _abbrObj = cultureData.abbreviations;\n  _decimalSep = cultureData.delimiters.decimal;\n\n  if (cultureData.delimiters.thousands === '.') {\n    _thousandSep = '\\\\.';\n  } else {\n    _thousandSep = cultureData.delimiters.thousands;\n  } // validating currency symbol\n\n\n  temp = val.match(/^[^\\d]+/);\n\n  if (temp !== null) {\n    val = val.substr(1);\n\n    if (temp[0] !== _currSymbol) {\n      return false;\n    }\n  } //validating abbreviation symbol\n\n\n  temp = val.match(/[^\\d]+$/);\n\n  if (temp !== null) {\n    val = val.slice(0, -1);\n\n    if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million && temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n      return false;\n    }\n  }\n\n  _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n  if (!val.match(/[^\\d.,]/g)) {\n    _valArray = val.split(_decimalSep);\n\n    if (_valArray.length > 2) {\n      return false;\n    } else {\n      if (_valArray.length < 2) {\n        return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx);\n      } else {\n        if (_valArray[0].length === 1) {\n          return !!_valArray[0].match(/^\\d+$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n        } else {\n          return !!_valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx) && !!_valArray[1].match(/^\\d+$/);\n        }\n      }\n    }\n  }\n\n  return false;\n};\n/************************************\n    Helpers\n************************************/\n\n\nfunction setCulture(code, values) {\n  cultures[code] = values;\n}\n\nfunction chooseCulture(code) {\n  currentCulture = code;\n  var defaults = cultures[code].defaults;\n\n  if (defaults && defaults.format) {\n    numbro.defaultFormat(defaults.format);\n  }\n\n  if (defaults && defaults.currencyFormat) {\n    numbro.defaultCurrencyFormat(defaults.currencyFormat);\n  }\n}\n\nfunction format(input, formatString, language, roundingFunction) {\n  if (language != null && language !== numbro.culture()) {\n    numbro.setCulture(language);\n  }\n\n  return formatNumbro(Number(input), formatString != null ? formatString : defaultFormat, roundingFunction == null ? Math.round : roundingFunction);\n}\n\nmodule.exports = {\n  \"format\": format\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/numbro/numbro.js"],"names":["numbro","VERSION","cultures","languages","currentCulture","zeroFormat","defaultFormat","defaultCurrencyFormat","hasModule","module","exports","enUS","delimiters","thousands","decimal","abbreviations","thousand","million","billion","trillion","ordinal","number","b","currency","symbol","position","defaults","currencyFormat","formats","fourDigits","fullWithTwoDecimals","fullWithTwoDecimalsNoCurrency","Numbro","_value","zeroes","count","i","ret","toFixedLarge","value","precision","mantissa","beforeDec","afterDec","exponent","str","toString","split","length","toFixed","roundingFunction","optionals","power","Math","pow","optionalsRegExp","output","search","RegExp","replace","formatNumbro","format","indexOf","formatCurrency","formatPercentage","formatTime","formatNumber","originalFormat","symbolIndex","openParenIndex","plusSignIndex","minusSignIndex","space","decimalSeparator","spliceIndex","spaceSeparated","splice","join","max","Error","hours","floor","minutes","seconds","round","sep","negP","signed","optDec","abbr","abbrK","abbrM","abbrB","abbrT","abbrForce","bytes","ord","abs","binarySuffixes","decimalSuffixes","min","totalLength","minimumPrecision","w","intPrecision","prefix","postfix","d","forcedNeg","neg","indexOpenP","size","indexMinus","paren","minlen","isFinite","end","slice","start","info","match","parseInt","log","LN10","p","Number","Array","input","isNumbro","fn","unformat","version","obj","setLanguage","newLanguage","fallbackLanguage","console","warn","key","matchingLanguage","Object","keys","forEach","language","chooseCulture","setCulture","newCulture","fallbackCulture","suffix","matchingCulture","values","culture","code","languageData","cultureData","validate","val","_decimalSep","_thousandSep","_currSymbol","_valArray","_abbrObj","_thousandRegEx","temp","trim","e","substr","formatString"],"mappings":"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","sourcesContent":["/*!\n * numbro.js\n * version : 1.6.2\n * author : FÃ¶retagsplatsen AB\n * license : MIT\n * http://www.foretagsplatsen.se\n */\n\n    /************************************\n        Constants\n    ************************************/\n\n    var numbro,\n        VERSION = '1.6.2',\n    // internal storage for culture config files\n        cultures = {},\n    // Todo: Remove in 2.0.0\n        languages = cultures,\n        currentCulture = 'en-US',\n        zeroFormat = null,\n        defaultFormat = '0,0',\n        defaultCurrencyFormat = '0$',\n        // check for nodeJS\n        hasModule = (typeof module !== 'undefined' && module.exports),\n    // default culture\n        enUS = {\n            delimiters: {\n                thousands: ',',\n                decimal: '.'\n            },\n            abbreviations: {\n                thousand: 'k',\n                million: 'm',\n                billion: 'b',\n                trillion: 't'\n            },\n            ordinal: function(number) {\n                var b = number % 10;\n                return (~~(number % 100 / 10) === 1) ? 'th' :\n                    (b === 1) ? 'st' :\n                        (b === 2) ? 'nd' :\n                            (b === 3) ? 'rd' : 'th';\n            },\n            currency: {\n                symbol: '$',\n                position: 'prefix'\n            },\n            defaults: {\n                currencyFormat: ',0000 a'\n            },\n            formats: {\n                fourDigits: '0000 a',\n                fullWithTwoDecimals: '$ ,0.00',\n                fullWithTwoDecimalsNoCurrency: ',0.00'\n            }\n        };\n\n    /************************************\n        Constructors\n    ************************************/\n\n\n    // Numbro prototype object\n    function Numbro(number) {\n        this._value = number;\n    }\n\n    function zeroes(count) {\n        var i, ret = '';\n\n        for (i = 0; i < count; i++) {\n            ret += '0';\n        }\n\n        return ret;\n    }\n    /**\n     * Implementation of toFixed() for numbers with exponent > 21\n     *\n     *\n     */\n    function toFixedLarge(value, precision) {\n        var mantissa,\n            beforeDec,\n            afterDec,\n            exponent,\n            str;\n\n        str = value.toString();\n\n        mantissa = str.split('e')[0];\n        exponent  = str.split('e')[1];\n\n        beforeDec = mantissa.split('.')[0];\n        afterDec = mantissa.split('.')[1] || '';\n\n        str = beforeDec + afterDec + zeroes(exponent - afterDec.length);\n        if (precision > 0) {\n            str += '.' + zeroes(precision);\n        }\n\n        return str;\n    }\n\n    /**\n     * Implementation of toFixed() that treats floats more like decimals\n     *\n     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present\n     * problems for accounting- and finance-related software.\n     */\n    function toFixed(value, precision, roundingFunction, optionals) {\n        var power = Math.pow(10, precision),\n            optionalsRegExp,\n            output;\n\n        if (value.toFixed(0).search('e') > -1) {\n            // Above 1e21, toFixed returns scientific notation, which\n            // is useless and unexpected\n            output = toFixedLarge(value, precision);\n        }\n        else {\n            //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);\n            // Multiply up by precision, round accurately, then divide and use native toFixed():\n            output = (roundingFunction(value * power) / power).toFixed(precision);\n        }\n\n        if (optionals) {\n            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');\n            output = output.replace(optionalsRegExp, '');\n        }\n\n        return output;\n    }\n\n    /************************************\n        Formatting\n    ************************************/\n\n    // determine what type of formatting we need to do\n    function formatNumbro(value, format, roundingFunction) {\n        var output;\n        // TODO: do something with `language`\n\n        // figure out what kind of format we are dealing with\n        if (format.indexOf('$') > -1) { // currency!!!!!\n            output = formatCurrency(value, format, roundingFunction);\n        } else if (format.indexOf('%') > -1) { // percentage\n            output = formatPercentage(value, format, roundingFunction);\n        } else if (format.indexOf(':') > -1) { // time\n            output = formatTime(value);\n        } else { // plain ol' numbers or bytes\n            output = formatNumber(value, format, roundingFunction);\n        }\n\n        // return string\n        return output;\n    }\n\n    function formatCurrency(value, originalFormat, roundingFunction) {\n        var format = originalFormat,\n            symbolIndex = format.indexOf('$'),\n            openParenIndex = format.indexOf('('),\n            plusSignIndex = format.indexOf('+'),\n            minusSignIndex = format.indexOf('-'),\n            space = '',\n            decimalSeparator = '',\n            spliceIndex,\n            output;\n\n        if(format.indexOf('$') === -1){\n            // Use defaults instead of the format provided\n            if (cultures[currentCulture].currency.position === 'infix') {\n                decimalSeparator = cultures[currentCulture].currency.symbol;\n                if (cultures[currentCulture].currency.spaceSeparated) {\n                    decimalSeparator = ' ' + decimalSeparator + ' ';\n                }\n            } else if (cultures[currentCulture].currency.spaceSeparated) {\n                space = ' ';\n            }\n        } else {\n            // check for space before or after currency\n            if (format.indexOf(' $') > -1) {\n                space = ' ';\n                format = format.replace(' $', '');\n            } else if (format.indexOf('$ ') > -1) {\n                space = ' ';\n                format = format.replace('$ ', '');\n            } else {\n                format = format.replace('$', '');\n            }\n        }\n\n        // Format The Number\n        output = formatNumber(value, format, roundingFunction, decimalSeparator);\n\n        if (originalFormat.indexOf('$') === -1) {\n            // Use defaults instead of the format provided\n            switch (cultures[currentCulture].currency.position) {\n                case 'postfix':\n                    if (output.indexOf(')') > -1) {\n                        output = output.split('');\n                        output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n                        output = output.join('');\n                    } else {\n                        output = output + space + cultures[currentCulture].currency.symbol;\n                    }\n                    break;\n                case 'infix':\n                    break;\n                case 'prefix':\n                    if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {\n                        output = output.split('');\n                        spliceIndex = Math.max(openParenIndex, minusSignIndex) + 1;\n\n                        output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n                        output = output.join('');\n                    } else {\n                        output = cultures[currentCulture].currency.symbol + space + output;\n                    }\n                    break;\n                default:\n                    throw Error('Currency position should be among [\"prefix\", \"infix\", \"postfix\"]');\n            }\n        } else {\n            // position the symbol\n            if (symbolIndex <= 1) {\n                if (output.indexOf('(') > -1 || output.indexOf('+') > -1 || output.indexOf('-') > -1) {\n                    output = output.split('');\n                    spliceIndex = 1;\n                    if (symbolIndex < openParenIndex || symbolIndex < plusSignIndex || symbolIndex < minusSignIndex) {\n                        // the symbol appears before the \"(\", \"+\" or \"-\"\n                        spliceIndex = 0;\n                    }\n                    output.splice(spliceIndex, 0, cultures[currentCulture].currency.symbol + space);\n                    output = output.join('');\n                } else {\n                    output = cultures[currentCulture].currency.symbol + space + output;\n                }\n            } else {\n                if (output.indexOf(')') > -1) {\n                    output = output.split('');\n                    output.splice(-1, 0, space + cultures[currentCulture].currency.symbol);\n                    output = output.join('');\n                } else {\n                    output = output + space + cultures[currentCulture].currency.symbol;\n                }\n            }\n        }\n\n        return output;\n    }\n\n    function formatPercentage(value, format, roundingFunction) {\n        var space = '',\n            output;\n        value = value * 100;\n\n        // check for space before %\n        if (format.indexOf(' %') > -1) {\n            space = ' ';\n            format = format.replace(' %', '');\n        } else {\n            format = format.replace('%', '');\n        }\n\n        output = formatNumber(value, format, roundingFunction);\n\n        if (output.indexOf(')') > -1) {\n            output = output.split('');\n            output.splice(-1, 0, space + '%');\n            output = output.join('');\n        } else {\n            output = output + space + '%';\n        }\n\n        return output;\n    }\n\n    function formatTime(value) {\n        var hours = Math.floor(value / 60 / 60),\n            minutes = Math.floor((value - (hours * 60 * 60)) / 60),\n            seconds = Math.round(value - (hours * 60 * 60) - (minutes * 60));\n        return hours + ':' +\n            ((minutes < 10) ? '0' + minutes : minutes) + ':' +\n            ((seconds < 10) ? '0' + seconds : seconds);\n    }\n\n    function formatNumber (value, format, roundingFunction, sep) {\n        var negP = false,\n            signed = false,\n            optDec = false,\n            abbr = '',\n            i,\n            abbrK = false, // force abbreviation to thousands\n            abbrM = false, // force abbreviation to millions\n            abbrB = false, // force abbreviation to billions\n            abbrT = false, // force abbreviation to trillions\n            abbrForce = false, // force abbreviation\n            bytes = '',\n            ord = '',\n            abs = Math.abs(value),\n            binarySuffixes = ['B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB'],\n            decimalSuffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],\n            min,\n            max,\n            power,\n            totalLength,\n            length,\n            minimumPrecision,\n            pow,\n            w,\n            intPrecision,\n            precision,\n            prefix,\n            postfix,\n            thousands,\n            d = '',\n            forcedNeg = false,\n            neg = false,\n            indexOpenP,\n            size,\n            indexMinus,\n            paren = '',\n            minlen;\n\n        // check if number is zero and a custom zero format has been set\n        if (value === 0 && zeroFormat !== null) {\n            return zeroFormat;\n        }\n\n        if (!isFinite(value)) {\n            return '' + value;\n        }\n\n        if (format.indexOf('{') === 0) {\n            var end = format.indexOf('}');\n            if (end === -1) {\n                throw Error('Format should also contain a \"}\"');\n            }\n            prefix = format.slice(1, end);\n            format = format.slice(end + 1);\n        } else {\n            prefix = '';\n        }\n\n        if (format.indexOf('}') === format.length - 1) {\n            var start = format.indexOf('{');\n            if (start === -1) {\n                throw Error('Format should also contain a \"{\"');\n            }\n            postfix = format.slice(start + 1, -1);\n            format = format.slice(0, start + 1);\n        } else {\n            postfix = '';\n        }\n\n        // check for min length\n        var info;\n        if (format.indexOf('.') === -1) {\n            info = format.match(/([0-9]+).*/);\n        } else {\n            info = format.match(/([0-9]+)\\..*/);\n        }\n        minlen = info === null ? -1 : info[1].length;\n\n        // see if we should use parentheses for negative number or if we should prefix with a sign\n        // if both are present we default to parentheses\n        if (format.indexOf('-') !== -1) {\n            forcedNeg = true;\n        }\n        if (format.indexOf('(') > -1) {\n            negP = true;\n            format = format.slice(1, -1);\n        } else if (format.indexOf('+') > -1) {\n            signed = true;\n            format = format.replace(/\\+/g, '');\n        }\n\n        // see if abbreviation is wanted\n        if (format.indexOf('a') > -1) {\n            intPrecision = format.split('.')[0].match(/[0-9]+/g) || ['0'];\n            intPrecision = parseInt(intPrecision[0], 10);\n\n            // check if abbreviation is specified\n            abbrK = format.indexOf('aK') >= 0;\n            abbrM = format.indexOf('aM') >= 0;\n            abbrB = format.indexOf('aB') >= 0;\n            abbrT = format.indexOf('aT') >= 0;\n            abbrForce = abbrK || abbrM || abbrB || abbrT;\n\n            // check for space before abbreviation\n            if (format.indexOf(' a') > -1) {\n                abbr = ' ';\n                format = format.replace(' a', '');\n            } else {\n                format = format.replace('a', '');\n            }\n\n            totalLength = Math.floor(Math.log(abs) / Math.LN10) + 1;\n\n            minimumPrecision = totalLength % 3;\n            minimumPrecision = minimumPrecision === 0 ? 3 : minimumPrecision;\n\n            if (intPrecision && abs !== 0) {\n\n                length = Math.floor(Math.log(abs) / Math.LN10) + 1 - intPrecision;\n\n                pow = 3 * ~~((Math.min(intPrecision, totalLength) - minimumPrecision) / 3);\n\n                abs = abs / Math.pow(10, pow);\n\n                if (format.indexOf('.') === -1 && intPrecision > 3) {\n                    format += '[.]';\n\n                    size = length === 0 ? 0 : 3 * ~~(length / 3) - length;\n                    size = size < 0 ? size + 3 : size;\n\n                    for (i = 0; i < size; i++) {\n                        format += '0';\n                    }\n                }\n            }\n\n            if (Math.floor(Math.log(Math.abs(value)) / Math.LN10) + 1 !== intPrecision) {\n                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {\n                    // trillion\n                    abbr = abbr + cultures[currentCulture].abbreviations.trillion;\n                    value = value / Math.pow(10, 12);\n                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {\n                    // billion\n                    abbr = abbr + cultures[currentCulture].abbreviations.billion;\n                    value = value / Math.pow(10, 9);\n                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {\n                    // million\n                    abbr = abbr + cultures[currentCulture].abbreviations.million;\n                    value = value / Math.pow(10, 6);\n                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {\n                    // thousand\n                    abbr = abbr + cultures[currentCulture].abbreviations.thousand;\n                    value = value / Math.pow(10, 3);\n                }\n            }\n        }\n\n        // see if we are formatting binary bytes\n        if (format.indexOf('b') > -1) {\n            // check for space before\n            if (format.indexOf(' b') > -1) {\n                bytes = ' ';\n                format = format.replace(' b', '');\n            } else {\n                format = format.replace('b', '');\n            }\n\n            for (power = 0; power <= binarySuffixes.length; power++) {\n                min = Math.pow(1024, power);\n                max = Math.pow(1024, power + 1);\n\n                if (value >= min && value < max) {\n                    bytes = bytes + binarySuffixes[power];\n                    if (min > 0) {\n                        value = value / min;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // see if we are formatting decimal bytes\n        if (format.indexOf('d') > -1) {\n            // check for space before\n            if (format.indexOf(' d') > -1) {\n                bytes = ' ';\n                format = format.replace(' d', '');\n            } else {\n                format = format.replace('d', '');\n            }\n\n            for (power = 0; power <= decimalSuffixes.length; power++) {\n                min = Math.pow(1000, power);\n                max = Math.pow(1000, power + 1);\n\n                if (value >= min && value < max) {\n                    bytes = bytes + decimalSuffixes[power];\n                    if (min > 0) {\n                        value = value / min;\n                    }\n                    break;\n                }\n            }\n        }\n\n        // see if ordinal is wanted\n        if (format.indexOf('o') > -1) {\n            // check for space before\n            if (format.indexOf(' o') > -1) {\n                ord = ' ';\n                format = format.replace(' o', '');\n            } else {\n                format = format.replace('o', '');\n            }\n\n            if (cultures[currentCulture].ordinal) {\n                ord = ord + cultures[currentCulture].ordinal(value);\n            }\n        }\n\n        if (format.indexOf('[.]') > -1) {\n            optDec = true;\n            format = format.replace('[.]', '.');\n        }\n\n        w = value.toString().split('.')[0];\n        precision = format.split('.')[1];\n        thousands = format.indexOf(',');\n\n        if (precision) {\n            if (precision.indexOf('*') !== -1) {\n                d = toFixed(value, value.toString().split('.')[1].length, roundingFunction);\n            } else {\n                if (precision.indexOf('[') > -1) {\n                    precision = precision.replace(']', '');\n                    precision = precision.split('[');\n                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction,\n                        precision[1].length);\n                } else {\n                    d = toFixed(value, precision.length, roundingFunction);\n                }\n            }\n\n            w = d.split('.')[0];\n\n            if (d.split('.')[1].length) {\n                var p = sep ? abbr + sep : cultures[currentCulture].delimiters.decimal;\n                d = p + d.split('.')[1];\n            } else {\n                d = '';\n            }\n\n            if (optDec && Number(d.slice(1)) === 0) {\n                d = '';\n            }\n        } else {\n            w = toFixed(value, null, roundingFunction);\n        }\n\n        // format number\n        if (w.indexOf('-') > -1) {\n            w = w.slice(1);\n            neg = true;\n        }\n\n        if (w.length < minlen) {\n            w = new Array(minlen - w.length + 1).join('0') + w;\n        }\n\n        if (thousands > -1) {\n            w = w.toString().replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, '$1' +\n                cultures[currentCulture].delimiters.thousands);\n        }\n\n        if (format.indexOf('.') === 0) {\n            w = '';\n        }\n\n        indexOpenP = format.indexOf('(');\n        indexMinus = format.indexOf('-');\n\n        if (indexOpenP < indexMinus) {\n            paren = ((negP && neg) ? '(' : '') + (((forcedNeg && neg) || (!negP && neg)) ? '-' : '');\n        } else {\n            paren = (((forcedNeg && neg) || (!negP && neg)) ? '-' : '') + ((negP && neg) ? '(' : '');\n        }\n\n        return prefix +\n            paren + ((!neg && signed && value !== 0) ? '+' : '') +\n            w + d +\n            ((ord) ? ord : '') +\n            ((abbr && !sep) ? abbr : '') +\n            ((bytes) ? bytes : '') +\n            ((negP && neg) ? ')' : '') +\n            postfix;\n    }\n\n    /************************************\n        Top Level Functions\n    ************************************/\n\n    numbro = function(input) {\n        if (numbro.isNumbro(input)) {\n            input = input.value();\n        } else if (input === 0 || typeof input === 'undefined') {\n            input = 0;\n        } else if (!Number(input)) {\n            input = numbro.fn.unformat(input);\n        }\n\n        return new Numbro(Number(input));\n    };\n\n    // version number\n    numbro.version = VERSION;\n\n    // compare numbro object\n    numbro.isNumbro = function(obj) {\n        return obj instanceof Numbro;\n    };\n\n    /**\n     * This function allow the user to set a new language with a fallback if\n     * the language does not exist. If no fallback language is provided,\n     * it fallbacks to english.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `setCulture` should be used instead.\n     */\n    numbro.setLanguage = function(newLanguage, fallbackLanguage) {\n        console.warn('`setLanguage` is deprecated since version 1.6.0. Use `setCulture` instead');\n        var key = newLanguage,\n            prefix = newLanguage.split('-')[0],\n            matchingLanguage = null;\n        if (!languages[key]) {\n            Object.keys(languages).forEach(function(language) {\n                if (!matchingLanguage && language.split('-')[0] === prefix) {\n                    matchingLanguage = language;\n                }\n            });\n            key = matchingLanguage || fallbackLanguage || 'en-US';\n        }\n        chooseCulture(key);\n    };\n\n    /**\n     * This function allow the user to set a new culture with a fallback if\n     * the culture does not exist. If no fallback culture is provided,\n     * it fallbacks to \"en-US\".\n     */\n    numbro.setCulture = function(newCulture, fallbackCulture) {\n        var key = newCulture,\n            suffix = newCulture.split('-')[1],\n            matchingCulture = null;\n        if (!cultures[key]) {\n            if (suffix) {\n                Object.keys(cultures).forEach(function(language) {\n                    if (!matchingCulture && language.split('-')[1] === suffix) {\n                        matchingCulture = language;\n                    }\n                });\n            }\n\n            key = matchingCulture || fallbackCulture || 'en-US';\n        }\n        chooseCulture(key);\n    };\n\n    /**\n     * This function will load languages and then set the global language.  If\n     * no arguments are passed in, it will simply return the current global\n     * language key.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `culture` should be used instead.\n     */\n    numbro.language = function(key, values) {\n        console.warn('`language` is deprecated since version 1.6.0. Use `culture` instead');\n\n        if (!key) {\n            return currentCulture;\n        }\n\n        if (key && !values) {\n            if (!languages[key]) {\n                throw new Error('Unknown language : ' + key);\n            }\n            chooseCulture(key);\n        }\n\n        if (values || !languages[key]) {\n            setCulture(key, values);\n        }\n\n        return numbro;\n    };\n\n    /**\n     * This function will load cultures and then set the global culture.  If\n     * no arguments are passed in, it will simply return the current global\n     * culture code.\n     */\n    numbro.culture = function(code, values) {\n        if (!code) {\n            return currentCulture;\n        }\n\n        if (code && !values) {\n            if (!cultures[code]) {\n                throw new Error('Unknown culture : ' + code);\n            }\n            chooseCulture(code);\n        }\n\n        if (values || !cultures[code]) {\n            setCulture(code, values);\n        }\n\n        return numbro;\n    };\n\n    /**\n     * This function provides access to the loaded language data.  If\n     * no arguments are passed in, it will simply return the current\n     * global language object.\n     *\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `culture` should be used instead.\n     */\n    numbro.languageData = function(key) {\n        console.warn('`languageData` is deprecated since version 1.6.0. Use `cultureData` instead');\n\n        if (!key) {\n            return languages[currentCulture];\n        }\n\n        if (!languages[key]) {\n            throw new Error('Unknown language : ' + key);\n        }\n\n        return languages[key];\n    };\n\n    /**\n     * This function provides access to the loaded culture data.  If\n     * no arguments are passed in, it will simply return the current\n     * global culture object.\n     */\n    numbro.cultureData = function(code) {\n        if (!code) {\n            return cultures[currentCulture];\n        }\n\n        if (!cultures[code]) {\n            throw new Error('Unknown culture : ' + code);\n        }\n\n        return cultures[code];\n    };\n\n    numbro.culture('en-US', enUS);\n\n    /**\n     * @deprecated Since in version 1.6.0. It will be deleted in version 2.0\n     * `cultures` should be used instead.\n     */\n    numbro.languages = function() {\n        console.warn('`languages` is deprecated since version 1.6.0. Use `cultures` instead');\n\n        return languages;\n    };\n\n    numbro.cultures = function() {\n        return cultures;\n    };\n\n    numbro.zeroFormat = function(format) {\n        zeroFormat = typeof(format) === 'string' ? format : null;\n    };\n\n    numbro.defaultFormat = function(format) {\n        defaultFormat = typeof(format) === 'string' ? format : '0.0';\n    };\n\n    numbro.defaultCurrencyFormat = function (format) {\n        defaultCurrencyFormat = typeof(format) === 'string' ? format : '0$';\n    };\n\n    numbro.validate = function(val, culture) {\n\n        var _decimalSep,\n            _thousandSep,\n            _currSymbol,\n            _valArray,\n            _abbrObj,\n            _thousandRegEx,\n            cultureData,\n            temp;\n\n        //coerce val to string\n        if (typeof val !== 'string') {\n            val += '';\n            if (console.warn) {\n                console.warn('Numbro.js: Value is not string. It has been co-erced to: ', val);\n            }\n        }\n\n        //trim whitespaces from either sides\n        val = val.trim();\n\n        //if val is just digits return true\n        if ( !! val.match(/^\\d+$/)) {\n            return true;\n        }\n\n        //if val is empty return false\n        if (val === '') {\n            return false;\n        }\n\n        //get the decimal and thousands separator from numbro.cultureData\n        try {\n            //check if the culture is understood by numbro. if not, default it to current culture\n            cultureData = numbro.cultureData(culture);\n        } catch (e) {\n            cultureData = numbro.cultureData(numbro.culture());\n        }\n\n        //setup the delimiters and currency symbol based on culture\n        _currSymbol = cultureData.currency.symbol;\n        _abbrObj = cultureData.abbreviations;\n        _decimalSep = cultureData.delimiters.decimal;\n        if (cultureData.delimiters.thousands === '.') {\n            _thousandSep = '\\\\.';\n        } else {\n            _thousandSep = cultureData.delimiters.thousands;\n        }\n\n        // validating currency symbol\n        temp = val.match(/^[^\\d]+/);\n        if (temp !== null) {\n            val = val.substr(1);\n            if (temp[0] !== _currSymbol) {\n                return false;\n            }\n        }\n\n        //validating abbreviation symbol\n        temp = val.match(/[^\\d]+$/);\n        if (temp !== null) {\n            val = val.slice(0, -1);\n            if (temp[0] !== _abbrObj.thousand && temp[0] !== _abbrObj.million &&\n                    temp[0] !== _abbrObj.billion && temp[0] !== _abbrObj.trillion) {\n                return false;\n            }\n        }\n\n        _thousandRegEx = new RegExp(_thousandSep + '{2}');\n\n        if (!val.match(/[^\\d.,]/g)) {\n            _valArray = val.split(_decimalSep);\n            if (_valArray.length > 2) {\n                return false;\n            } else {\n                if (_valArray.length < 2) {\n                    return ( !! _valArray[0].match(/^\\d+.*\\d$/) && !_valArray[0].match(_thousandRegEx));\n                } else {\n                    if (_valArray[0].length === 1) {\n                        return ( !! _valArray[0].match(/^\\d+$/) &&\n                            !_valArray[0].match(_thousandRegEx) &&\n                            !! _valArray[1].match(/^\\d+$/));\n                    } else {\n                        return ( !! _valArray[0].match(/^\\d+.*\\d$/) &&\n                            !_valArray[0].match(_thousandRegEx) &&\n                            !! _valArray[1].match(/^\\d+$/));\n                    }\n                }\n            }\n        }\n\n        return false;\n    };\n\n    /************************************\n        Helpers\n    ************************************/\n\n    function setCulture(code, values) {\n        cultures[code] = values;\n    }\n\n    function chooseCulture(code) {\n        currentCulture = code;\n        var defaults = cultures[code].defaults;\n        if (defaults && defaults.format) {\n            numbro.defaultFormat(defaults.format);\n        }\n        if (defaults && defaults.currencyFormat) {\n            numbro.defaultCurrencyFormat(defaults.currencyFormat);\n        }\n    }\n\n    function format(input, formatString, language, roundingFunction) {\n        if (language != null && language !== numbro.culture()) {\n            numbro.setCulture(language);\n        }\n        return formatNumbro(\n            Number(input),\n            formatString != null     ? formatString : defaultFormat,\n            roundingFunction == null ? Math.round   : roundingFunction);\n    }\n\n    module.exports = {\"format\": format};\n"]},"metadata":{},"sourceType":"script"}