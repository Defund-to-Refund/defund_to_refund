{"ast":null,"code":"import { select, option } from \"../../core/dom\";\nimport { isString } from \"../../core/util/types\";\nimport { Set } from \"../../core/util/data_structures\";\nimport * as p from \"../../core/properties\";\nimport { InputWidget, InputWidgetView } from \"./input_widget\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nexport class MultiSelectView extends InputWidgetView {\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.value.change, () => this.render_selection());\n    this.connect(this.model.properties.options.change, () => this.render());\n    this.connect(this.model.properties.name.change, () => this.render());\n    this.connect(this.model.properties.title.change, () => this.render());\n    this.connect(this.model.properties.size.change, () => this.render());\n    this.connect(this.model.properties.disabled.change, () => this.render());\n  }\n\n  render() {\n    super.render();\n    const options = this.model.options.map(opt => {\n      let value, _label;\n\n      if (isString(opt)) value = _label = opt;else [value, _label] = opt;\n      return option({\n        value\n      }, _label);\n    });\n    this.select_el = select({\n      multiple: true,\n      class: bk_input,\n      name: this.model.name,\n      disabled: this.model.disabled\n    }, options);\n    this.select_el.addEventListener(\"change\", () => this.change_input());\n    this.group_el.appendChild(this.select_el);\n    this.render_selection();\n  }\n\n  render_selection() {\n    const selected = new Set(this.model.value);\n\n    for (const el of Array.from(this.el.querySelectorAll('option'))) el.selected = selected.has(el.value); // Note that some browser implementations might not reduce\n    // the number of visible options for size <= 3.\n\n\n    this.select_el.size = this.model.size;\n  }\n\n  change_input() {\n    const is_focused = this.el.querySelector('select:focus') != null;\n    const values = [];\n\n    for (const el of Array.from(this.el.querySelectorAll('option'))) {\n      if (el.selected) values.push(el.value);\n    }\n\n    this.model.value = values;\n    super.change_input(); // Restore focus back to the <select> afterwards,\n    // so that even if python on_change callback is invoked,\n    // focus remains on <select> and one can seamlessly scroll\n    // up/down.\n\n    if (is_focused) this.select_el.focus();\n  }\n\n}\nMultiSelectView.__name__ = \"MultiSelectView\";\nexport class MultiSelect extends InputWidget {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_MultiSelect() {\n    this.prototype.default_view = MultiSelectView;\n    this.define({\n      value: [p.Array, []],\n      options: [p.Array, []],\n      size: [p.Number, 4]\n    });\n  }\n\n}\nMultiSelect.__name__ = \"MultiSelect\";\nMultiSelect.init_MultiSelect();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/multiselect.js"],"names":["select","option","isString","Set","p","InputWidget","InputWidgetView","bk_input","MultiSelectView","connect_signals","connect","model","properties","value","change","render_selection","options","render","name","title","size","disabled","map","opt","_label","select_el","multiple","class","addEventListener","change_input","group_el","appendChild","selected","el","Array","from","querySelectorAll","has","is_focused","querySelector","values","push","focus","__name__","MultiSelect","constructor","attrs","init_MultiSelect","prototype","default_view","define","Number"],"mappings":"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","sourcesContent":["import { select, option } from \"../../core/dom\";\nimport { isString } from \"../../core/util/types\";\nimport { Set } from \"../../core/util/data_structures\";\nimport * as p from \"../../core/properties\";\nimport { InputWidget, InputWidgetView } from \"./input_widget\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nexport class MultiSelectView extends InputWidgetView {\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.value.change, () => this.render_selection());\n        this.connect(this.model.properties.options.change, () => this.render());\n        this.connect(this.model.properties.name.change, () => this.render());\n        this.connect(this.model.properties.title.change, () => this.render());\n        this.connect(this.model.properties.size.change, () => this.render());\n        this.connect(this.model.properties.disabled.change, () => this.render());\n    }\n    render() {\n        super.render();\n        const options = this.model.options.map((opt) => {\n            let value, _label;\n            if (isString(opt))\n                value = _label = opt;\n            else\n                [value, _label] = opt;\n            return option({ value }, _label);\n        });\n        this.select_el = select({\n            multiple: true,\n            class: bk_input,\n            name: this.model.name,\n            disabled: this.model.disabled,\n        }, options);\n        this.select_el.addEventListener(\"change\", () => this.change_input());\n        this.group_el.appendChild(this.select_el);\n        this.render_selection();\n    }\n    render_selection() {\n        const selected = new Set(this.model.value);\n        for (const el of Array.from(this.el.querySelectorAll('option')))\n            el.selected = selected.has(el.value);\n        // Note that some browser implementations might not reduce\n        // the number of visible options for size <= 3.\n        this.select_el.size = this.model.size;\n    }\n    change_input() {\n        const is_focused = this.el.querySelector('select:focus') != null;\n        const values = [];\n        for (const el of Array.from(this.el.querySelectorAll('option'))) {\n            if (el.selected)\n                values.push(el.value);\n        }\n        this.model.value = values;\n        super.change_input();\n        // Restore focus back to the <select> afterwards,\n        // so that even if python on_change callback is invoked,\n        // focus remains on <select> and one can seamlessly scroll\n        // up/down.\n        if (is_focused)\n            this.select_el.focus();\n    }\n}\nMultiSelectView.__name__ = \"MultiSelectView\";\nexport class MultiSelect extends InputWidget {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_MultiSelect() {\n        this.prototype.default_view = MultiSelectView;\n        this.define({\n            value: [p.Array, []],\n            options: [p.Array, []],\n            size: [p.Number, 4],\n        });\n    }\n}\nMultiSelect.__name__ = \"MultiSelect\";\nMultiSelect.init_MultiSelect();\n//# sourceMappingURL=multiselect.js.map"]},"metadata":{},"sourceType":"module"}