{"ast":null,"code":"import { TextInput, TextInputView } from \"./text_input\";\nimport { empty, display, undisplay, div, Keys } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { clamp } from \"../../core/util/math\";\nimport { bk_below, bk_active } from \"../../styles/mixins\";\nimport { bk_menu } from \"../../styles/menus\";\nexport class AutocompleteInputView extends TextInputView {\n  constructor() {\n    super(...arguments);\n    this._open = false;\n    this._last_value = \"\";\n    this._hover_index = 0;\n  }\n\n  render() {\n    super.render();\n    this.input_el.addEventListener(\"keydown\", event => this._keydown(event));\n    this.input_el.addEventListener(\"keyup\", event => this._keyup(event));\n    this.menu = div({\n      class: [bk_menu, bk_below]\n    });\n    this.menu.addEventListener(\"click\", event => this._menu_click(event));\n    this.menu.addEventListener(\"mouseover\", event => this._menu_hover(event));\n    this.el.appendChild(this.menu);\n    undisplay(this.menu);\n  }\n\n  change_input() {\n    if (this._open && this.menu.children.length > 0) {\n      this.model.value = this.menu.children[this._hover_index].textContent;\n      this.input_el.focus();\n\n      this._hide_menu();\n    }\n  }\n\n  _update_completions(completions) {\n    empty(this.menu);\n\n    for (const text of completions) {\n      const item = div({}, text);\n      this.menu.appendChild(item);\n    }\n\n    if (completions.length > 0) this.menu.children[0].classList.add(bk_active);\n  }\n\n  _show_menu() {\n    if (!this._open) {\n      this._open = true;\n      this._hover_index = 0;\n      this._last_value = this.model.value;\n      display(this.menu);\n\n      const listener = event => {\n        const {\n          target\n        } = event;\n\n        if (target instanceof HTMLElement && !this.el.contains(target)) {\n          document.removeEventListener(\"click\", listener);\n\n          this._hide_menu();\n        }\n      };\n\n      document.addEventListener(\"click\", listener);\n    }\n  }\n\n  _hide_menu() {\n    if (this._open) {\n      this._open = false;\n      undisplay(this.menu);\n    }\n  }\n\n  _menu_click(event) {\n    if (event.target != event.currentTarget && event.target instanceof Element) {\n      this.model.value = event.target.textContent;\n      this.input_el.focus();\n\n      this._hide_menu();\n    }\n  }\n\n  _menu_hover(event) {\n    if (event.target != event.currentTarget && event.target instanceof Element) {\n      let i = 0;\n\n      for (i = 0; i < this.menu.children.length; i++) {\n        if (this.menu.children[i].textContent == event.target.textContent) break;\n      }\n\n      this._bump_hover(i);\n    }\n  }\n\n  _bump_hover(new_index) {\n    const n_children = this.menu.children.length;\n\n    if (this._open && n_children > 0) {\n      this.menu.children[this._hover_index].classList.remove(bk_active);\n\n      this._hover_index = clamp(new_index, 0, n_children - 1);\n\n      this.menu.children[this._hover_index].classList.add(bk_active);\n    }\n  }\n\n  _keydown(_event) {}\n\n  _keyup(event) {\n    switch (event.keyCode) {\n      case Keys.Enter:\n        {\n          this.change_input();\n          break;\n        }\n\n      case Keys.Esc:\n        {\n          this._hide_menu();\n\n          break;\n        }\n\n      case Keys.Up:\n        {\n          this._bump_hover(this._hover_index - 1);\n\n          break;\n        }\n\n      case Keys.Down:\n        {\n          this._bump_hover(this._hover_index + 1);\n\n          break;\n        }\n\n      default:\n        {\n          const value = this.input_el.value;\n\n          if (value.length < this.model.min_characters) {\n            this._hide_menu();\n\n            return;\n          }\n\n          const completions = [];\n\n          for (const text of this.model.completions) {\n            if (text.startsWith(value)) completions.push(text);\n          }\n\n          this._update_completions(completions);\n\n          if (completions.length == 0) this._hide_menu();else this._show_menu();\n        }\n    }\n  }\n\n}\nAutocompleteInputView.__name__ = \"AutocompleteInputView\";\nexport class AutocompleteInput extends TextInput {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_AutocompleteInput() {\n    this.prototype.default_view = AutocompleteInputView;\n    this.define({\n      completions: [p.Array, []],\n      min_characters: [p.Int, 2]\n    });\n  }\n\n}\nAutocompleteInput.__name__ = \"AutocompleteInput\";\nAutocompleteInput.init_AutocompleteInput();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/autocomplete_input.js"],"names":["TextInput","TextInputView","empty","display","undisplay","div","Keys","p","clamp","bk_below","bk_active","bk_menu","AutocompleteInputView","constructor","arguments","_open","_last_value","_hover_index","render","input_el","addEventListener","event","_keydown","_keyup","menu","class","_menu_click","_menu_hover","el","appendChild","change_input","children","length","model","value","textContent","focus","_hide_menu","_update_completions","completions","text","item","classList","add","_show_menu","listener","target","HTMLElement","contains","document","removeEventListener","currentTarget","Element","i","_bump_hover","new_index","n_children","remove","_event","keyCode","Enter","Esc","Up","Down","min_characters","startsWith","push","__name__","AutocompleteInput","attrs","init_AutocompleteInput","prototype","default_view","define","Array","Int"],"mappings":"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","sourcesContent":["import { TextInput, TextInputView } from \"./text_input\";\nimport { empty, display, undisplay, div, Keys } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { clamp } from \"../../core/util/math\";\nimport { bk_below, bk_active } from \"../../styles/mixins\";\nimport { bk_menu } from \"../../styles/menus\";\nexport class AutocompleteInputView extends TextInputView {\n    constructor() {\n        super(...arguments);\n        this._open = false;\n        this._last_value = \"\";\n        this._hover_index = 0;\n    }\n    render() {\n        super.render();\n        this.input_el.addEventListener(\"keydown\", (event) => this._keydown(event));\n        this.input_el.addEventListener(\"keyup\", (event) => this._keyup(event));\n        this.menu = div({ class: [bk_menu, bk_below] });\n        this.menu.addEventListener(\"click\", (event) => this._menu_click(event));\n        this.menu.addEventListener(\"mouseover\", (event) => this._menu_hover(event));\n        this.el.appendChild(this.menu);\n        undisplay(this.menu);\n    }\n    change_input() {\n        if (this._open && this.menu.children.length > 0) {\n            this.model.value = this.menu.children[this._hover_index].textContent;\n            this.input_el.focus();\n            this._hide_menu();\n        }\n    }\n    _update_completions(completions) {\n        empty(this.menu);\n        for (const text of completions) {\n            const item = div({}, text);\n            this.menu.appendChild(item);\n        }\n        if (completions.length > 0)\n            this.menu.children[0].classList.add(bk_active);\n    }\n    _show_menu() {\n        if (!this._open) {\n            this._open = true;\n            this._hover_index = 0;\n            this._last_value = this.model.value;\n            display(this.menu);\n            const listener = (event) => {\n                const { target } = event;\n                if (target instanceof HTMLElement && !this.el.contains(target)) {\n                    document.removeEventListener(\"click\", listener);\n                    this._hide_menu();\n                }\n            };\n            document.addEventListener(\"click\", listener);\n        }\n    }\n    _hide_menu() {\n        if (this._open) {\n            this._open = false;\n            undisplay(this.menu);\n        }\n    }\n    _menu_click(event) {\n        if (event.target != event.currentTarget && event.target instanceof Element) {\n            this.model.value = event.target.textContent;\n            this.input_el.focus();\n            this._hide_menu();\n        }\n    }\n    _menu_hover(event) {\n        if (event.target != event.currentTarget && event.target instanceof Element) {\n            let i = 0;\n            for (i = 0; i < this.menu.children.length; i++) {\n                if (this.menu.children[i].textContent == event.target.textContent)\n                    break;\n            }\n            this._bump_hover(i);\n        }\n    }\n    _bump_hover(new_index) {\n        const n_children = this.menu.children.length;\n        if (this._open && n_children > 0) {\n            this.menu.children[this._hover_index].classList.remove(bk_active);\n            this._hover_index = clamp(new_index, 0, n_children - 1);\n            this.menu.children[this._hover_index].classList.add(bk_active);\n        }\n    }\n    _keydown(_event) { }\n    _keyup(event) {\n        switch (event.keyCode) {\n            case Keys.Enter: {\n                this.change_input();\n                break;\n            }\n            case Keys.Esc: {\n                this._hide_menu();\n                break;\n            }\n            case Keys.Up: {\n                this._bump_hover(this._hover_index - 1);\n                break;\n            }\n            case Keys.Down: {\n                this._bump_hover(this._hover_index + 1);\n                break;\n            }\n            default: {\n                const value = this.input_el.value;\n                if (value.length < this.model.min_characters) {\n                    this._hide_menu();\n                    return;\n                }\n                const completions = [];\n                for (const text of this.model.completions) {\n                    if (text.startsWith(value))\n                        completions.push(text);\n                }\n                this._update_completions(completions);\n                if (completions.length == 0)\n                    this._hide_menu();\n                else\n                    this._show_menu();\n            }\n        }\n    }\n}\nAutocompleteInputView.__name__ = \"AutocompleteInputView\";\nexport class AutocompleteInput extends TextInput {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_AutocompleteInput() {\n        this.prototype.default_view = AutocompleteInputView;\n        this.define({\n            completions: [p.Array, []],\n            min_characters: [p.Int, 2],\n        });\n    }\n}\nAutocompleteInput.__name__ = \"AutocompleteInput\";\nAutocompleteInput.init_AutocompleteInput();\n//# sourceMappingURL=autocomplete_input.js.map"]},"metadata":{},"sourceType":"module"}