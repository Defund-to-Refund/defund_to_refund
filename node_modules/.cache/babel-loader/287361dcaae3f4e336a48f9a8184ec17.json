{"ast":null,"code":"import { Model } from \"../../model\";\nimport { empty, position, classes, extents, undisplayed } from \"../../core/dom\";\nimport { logger } from \"../../core/logging\";\nimport { isNumber, isArray } from \"../../core/util/types\";\nimport * as p from \"../../core/properties\";\nimport { build_views } from \"../../core/build_views\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { bk_root } from \"../../styles/root\";\nexport class LayoutDOMView extends DOMView {\n  constructor() {\n    super(...arguments);\n    this._idle_notified = false;\n    this._offset_parent = null;\n    this._viewport = {};\n  }\n\n  initialize() {\n    super.initialize();\n    this.el.style.position = this.is_root ? \"relative\" : \"absolute\";\n    this._child_views = {};\n  }\n\n  async lazy_initialize() {\n    await this.build_child_views();\n  }\n\n  remove() {\n    for (const child_view of this.child_views) child_view.remove();\n\n    this._child_views = {};\n    super.remove();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n\n    if (this.is_root) {\n      this._on_resize = () => this.resize_layout();\n\n      window.addEventListener(\"resize\", this._on_resize);\n      this._parent_observer = setInterval(() => {\n        const offset_parent = this.el.offsetParent;\n\n        if (this._offset_parent != offset_parent) {\n          this._offset_parent = offset_parent;\n\n          if (offset_parent != null) {\n            this.compute_viewport();\n            this.invalidate_layout();\n          }\n        }\n      }, 250);\n    }\n\n    const p = this.model.properties;\n    this.on_change([p.width, p.height, p.min_width, p.min_height, p.max_width, p.max_height, p.margin, p.width_policy, p.height_policy, p.sizing_mode, p.aspect_ratio, p.visible], () => this.invalidate_layout());\n    this.on_change([p.background, p.css_classes], () => this.invalidate_render());\n  }\n\n  disconnect_signals() {\n    if (this._parent_observer != null) clearTimeout(this._parent_observer);\n    if (this._on_resize != null) window.removeEventListener(\"resize\", this._on_resize);\n    super.disconnect_signals();\n  }\n\n  css_classes() {\n    return super.css_classes().concat(this.model.css_classes);\n  }\n\n  get child_views() {\n    return this.child_models.map(child => this._child_views[child.id]);\n  }\n\n  async build_child_views() {\n    await build_views(this._child_views, this.child_models, {\n      parent: this\n    });\n  }\n\n  render() {\n    super.render();\n    empty(this.el); // XXX: this should be in super\n\n    const {\n      background\n    } = this.model;\n    this.el.style.backgroundColor = background != null ? background : \"\";\n    classes(this.el).clear().add(...this.css_classes());\n\n    for (const child_view of this.child_views) {\n      this.el.appendChild(child_view.el);\n      child_view.render();\n    }\n  }\n\n  update_layout() {\n    for (const child_view of this.child_views) child_view.update_layout();\n\n    this._update_layout();\n  }\n\n  update_position() {\n    this.el.style.display = this.model.visible ? \"block\" : \"none\";\n    const margin = this.is_root ? this.layout.sizing.margin : undefined;\n    position(this.el, this.layout.bbox, margin);\n\n    for (const child_view of this.child_views) child_view.update_position();\n  }\n\n  after_layout() {\n    for (const child_view of this.child_views) child_view.after_layout();\n\n    this._has_finished = true;\n  }\n\n  compute_viewport() {\n    this._viewport = this._viewport_size();\n  }\n\n  renderTo(element) {\n    element.appendChild(this.el);\n    this._offset_parent = this.el.offsetParent;\n    this.compute_viewport();\n    this.build();\n  }\n\n  build() {\n    this.assert_root();\n    this.render();\n    this.update_layout();\n    this.compute_layout();\n    return this;\n  }\n\n  async rebuild() {\n    await this.build_child_views();\n    this.invalidate_render();\n  }\n\n  compute_layout() {\n    const start = Date.now();\n    this.layout.compute(this._viewport);\n    this.update_position();\n    this.after_layout();\n    logger.debug(`layout computed in ${Date.now() - start} ms`);\n    this.notify_finished();\n  }\n\n  resize_layout() {\n    this.root.compute_viewport();\n    this.root.compute_layout();\n  }\n\n  invalidate_layout() {\n    this.root.update_layout();\n    this.root.compute_layout();\n  }\n\n  invalidate_render() {\n    this.render();\n    this.invalidate_layout();\n  }\n\n  has_finished() {\n    if (!super.has_finished()) return false;\n\n    for (const child_view of this.child_views) {\n      if (!child_view.has_finished()) return false;\n    }\n\n    return true;\n  }\n\n  notify_finished() {\n    if (!this.is_root) this.root.notify_finished();else {\n      if (!this._idle_notified && this.has_finished()) {\n        if (this.model.document != null) {\n          this._idle_notified = true;\n          this.model.document.notify_idle(this.model);\n        }\n      }\n    }\n  }\n\n  _width_policy() {\n    return this.model.width != null ? \"fixed\" : \"fit\";\n  }\n\n  _height_policy() {\n    return this.model.height != null ? \"fixed\" : \"fit\";\n  }\n\n  box_sizing() {\n    let {\n      width_policy,\n      height_policy,\n      aspect_ratio\n    } = this.model;\n    if (width_policy == \"auto\") width_policy = this._width_policy();\n    if (height_policy == \"auto\") height_policy = this._height_policy();\n    const {\n      sizing_mode\n    } = this.model;\n\n    if (sizing_mode != null) {\n      if (sizing_mode == \"fixed\") width_policy = height_policy = \"fixed\";else if (sizing_mode == \"stretch_both\") width_policy = height_policy = \"max\";else if (sizing_mode == \"stretch_width\") width_policy = \"max\";else if (sizing_mode == \"stretch_height\") height_policy = \"max\";else {\n        if (aspect_ratio == null) aspect_ratio = \"auto\";\n\n        switch (sizing_mode) {\n          case \"scale_width\":\n            width_policy = \"max\";\n            height_policy = \"min\";\n            break;\n\n          case \"scale_height\":\n            width_policy = \"min\";\n            height_policy = \"max\";\n            break;\n\n          case \"scale_both\":\n            width_policy = \"max\";\n            height_policy = \"max\";\n            break;\n        }\n      }\n    }\n\n    const sizing = {\n      width_policy,\n      height_policy\n    };\n    const {\n      min_width,\n      min_height\n    } = this.model;\n    if (min_width != null) sizing.min_width = min_width;\n    if (min_height != null) sizing.min_height = min_height;\n    const {\n      width,\n      height\n    } = this.model;\n    if (width != null) sizing.width = width;\n    if (height != null) sizing.height = height;\n    const {\n      max_width,\n      max_height\n    } = this.model;\n    if (max_width != null) sizing.max_width = max_width;\n    if (max_height != null) sizing.max_height = max_height;\n    if (aspect_ratio == \"auto\" && width != null && height != null) sizing.aspect = width / height;else if (isNumber(aspect_ratio)) sizing.aspect = aspect_ratio;\n    const {\n      margin\n    } = this.model;\n\n    if (margin != null) {\n      if (isNumber(margin)) sizing.margin = {\n        top: margin,\n        right: margin,\n        bottom: margin,\n        left: margin\n      };else if (margin.length == 2) {\n        const [vertical, horizontal] = margin;\n        sizing.margin = {\n          top: vertical,\n          right: horizontal,\n          bottom: vertical,\n          left: horizontal\n        };\n      } else {\n        const [top, right, bottom, left] = margin;\n        sizing.margin = {\n          top,\n          right,\n          bottom,\n          left\n        };\n      }\n    }\n\n    sizing.visible = this.model.visible;\n    const {\n      align\n    } = this.model;\n    if (isArray(align)) [sizing.halign, sizing.valign] = align;else sizing.halign = sizing.valign = align;\n    return sizing;\n  }\n\n  _viewport_size() {\n    return undisplayed(this.el, () => {\n      let measuring = this.el;\n\n      while (measuring = measuring.parentElement) {\n        // .bk-root element doesn't bring any value\n        if (measuring.classList.contains(bk_root)) continue; // we reached <body> element, so use viewport size\n\n        if (measuring == document.body) {\n          const {\n            margin: {\n              left,\n              right,\n              top,\n              bottom\n            }\n          } = extents(document.body);\n          const width = Math.ceil(document.documentElement.clientWidth - left - right);\n          const height = Math.ceil(document.documentElement.clientHeight - top - bottom);\n          return {\n            width,\n            height\n          };\n        } // stop on first element with sensible dimensions\n\n\n        const {\n          padding: {\n            left,\n            right,\n            top,\n            bottom\n          }\n        } = extents(measuring);\n        const {\n          width,\n          height\n        } = measuring.getBoundingClientRect();\n        const inner_width = Math.ceil(width - left - right);\n        const inner_height = Math.ceil(height - top - bottom);\n        if (inner_width > 0 || inner_height > 0) return {\n          width: inner_width > 0 ? inner_width : undefined,\n          height: inner_height > 0 ? inner_height : undefined\n        };\n      } // this element is detached from DOM\n\n\n      return {};\n    });\n  }\n\n  serializable_state() {\n    return Object.assign(Object.assign({}, super.serializable_state()), {\n      bbox: this.layout.bbox.box,\n      children: this.child_views.map(child => child.serializable_state())\n    });\n  }\n\n}\nLayoutDOMView.__name__ = \"LayoutDOMView\";\nexport class LayoutDOM extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_LayoutDOM() {\n    this.define({\n      width: [p.Number, null],\n      height: [p.Number, null],\n      min_width: [p.Number, null],\n      min_height: [p.Number, null],\n      max_width: [p.Number, null],\n      max_height: [p.Number, null],\n      margin: [p.Any, [0, 0, 0, 0]],\n      width_policy: [p.Any, \"auto\"],\n      height_policy: [p.Any, \"auto\"],\n      aspect_ratio: [p.Any, null],\n      sizing_mode: [p.SizingMode, null],\n      visible: [p.Boolean, true],\n      disabled: [p.Boolean, false],\n      align: [p.Any, \"start\"],\n      background: [p.Color, null],\n      css_classes: [p.Array, []]\n    });\n  }\n\n}\nLayoutDOM.__name__ = \"LayoutDOM\";\nLayoutDOM.init_LayoutDOM();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/layouts/layout_dom.js"],"names":["Model","empty","position","classes","extents","undisplayed","logger","isNumber","isArray","p","build_views","DOMView","bk_root","LayoutDOMView","constructor","arguments","_idle_notified","_offset_parent","_viewport","initialize","el","style","is_root","_child_views","lazy_initialize","build_child_views","remove","child_view","child_views","connect_signals","_on_resize","resize_layout","window","addEventListener","_parent_observer","setInterval","offset_parent","offsetParent","compute_viewport","invalidate_layout","model","properties","on_change","width","height","min_width","min_height","max_width","max_height","margin","width_policy","height_policy","sizing_mode","aspect_ratio","visible","background","css_classes","invalidate_render","disconnect_signals","clearTimeout","removeEventListener","concat","child_models","map","child","id","parent","render","backgroundColor","clear","add","appendChild","update_layout","_update_layout","update_position","display","layout","sizing","undefined","bbox","after_layout","_has_finished","_viewport_size","renderTo","element","build","assert_root","compute_layout","rebuild","start","Date","now","compute","debug","notify_finished","root","has_finished","document","notify_idle","_width_policy","_height_policy","box_sizing","aspect","top","right","bottom","left","length","vertical","horizontal","align","halign","valign","measuring","parentElement","classList","contains","body","Math","ceil","documentElement","clientWidth","clientHeight","padding","getBoundingClientRect","inner_width","inner_height","serializable_state","Object","assign","box","children","__name__","LayoutDOM","attrs","init_LayoutDOM","define","Number","Any","SizingMode","Boolean","disabled","Color","Array"],"mappings":"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","sourcesContent":["import { Model } from \"../../model\";\nimport { empty, position, classes, extents, undisplayed } from \"../../core/dom\";\nimport { logger } from \"../../core/logging\";\nimport { isNumber, isArray } from \"../../core/util/types\";\nimport * as p from \"../../core/properties\";\nimport { build_views } from \"../../core/build_views\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { bk_root } from \"../../styles/root\";\nexport class LayoutDOMView extends DOMView {\n    constructor() {\n        super(...arguments);\n        this._idle_notified = false;\n        this._offset_parent = null;\n        this._viewport = {};\n    }\n    initialize() {\n        super.initialize();\n        this.el.style.position = this.is_root ? \"relative\" : \"absolute\";\n        this._child_views = {};\n    }\n    async lazy_initialize() {\n        await this.build_child_views();\n    }\n    remove() {\n        for (const child_view of this.child_views)\n            child_view.remove();\n        this._child_views = {};\n        super.remove();\n    }\n    connect_signals() {\n        super.connect_signals();\n        if (this.is_root) {\n            this._on_resize = () => this.resize_layout();\n            window.addEventListener(\"resize\", this._on_resize);\n            this._parent_observer = setInterval(() => {\n                const offset_parent = this.el.offsetParent;\n                if (this._offset_parent != offset_parent) {\n                    this._offset_parent = offset_parent;\n                    if (offset_parent != null) {\n                        this.compute_viewport();\n                        this.invalidate_layout();\n                    }\n                }\n            }, 250);\n        }\n        const p = this.model.properties;\n        this.on_change([\n            p.width, p.height,\n            p.min_width, p.min_height,\n            p.max_width, p.max_height,\n            p.margin,\n            p.width_policy, p.height_policy, p.sizing_mode,\n            p.aspect_ratio,\n            p.visible,\n        ], () => this.invalidate_layout());\n        this.on_change([\n            p.background,\n            p.css_classes,\n        ], () => this.invalidate_render());\n    }\n    disconnect_signals() {\n        if (this._parent_observer != null)\n            clearTimeout(this._parent_observer);\n        if (this._on_resize != null)\n            window.removeEventListener(\"resize\", this._on_resize);\n        super.disconnect_signals();\n    }\n    css_classes() {\n        return super.css_classes().concat(this.model.css_classes);\n    }\n    get child_views() {\n        return this.child_models.map((child) => this._child_views[child.id]);\n    }\n    async build_child_views() {\n        await build_views(this._child_views, this.child_models, { parent: this });\n    }\n    render() {\n        super.render();\n        empty(this.el); // XXX: this should be in super\n        const { background } = this.model;\n        this.el.style.backgroundColor = background != null ? background : \"\";\n        classes(this.el).clear().add(...this.css_classes());\n        for (const child_view of this.child_views) {\n            this.el.appendChild(child_view.el);\n            child_view.render();\n        }\n    }\n    update_layout() {\n        for (const child_view of this.child_views)\n            child_view.update_layout();\n        this._update_layout();\n    }\n    update_position() {\n        this.el.style.display = this.model.visible ? \"block\" : \"none\";\n        const margin = this.is_root ? this.layout.sizing.margin : undefined;\n        position(this.el, this.layout.bbox, margin);\n        for (const child_view of this.child_views)\n            child_view.update_position();\n    }\n    after_layout() {\n        for (const child_view of this.child_views)\n            child_view.after_layout();\n        this._has_finished = true;\n    }\n    compute_viewport() {\n        this._viewport = this._viewport_size();\n    }\n    renderTo(element) {\n        element.appendChild(this.el);\n        this._offset_parent = this.el.offsetParent;\n        this.compute_viewport();\n        this.build();\n    }\n    build() {\n        this.assert_root();\n        this.render();\n        this.update_layout();\n        this.compute_layout();\n        return this;\n    }\n    async rebuild() {\n        await this.build_child_views();\n        this.invalidate_render();\n    }\n    compute_layout() {\n        const start = Date.now();\n        this.layout.compute(this._viewport);\n        this.update_position();\n        this.after_layout();\n        logger.debug(`layout computed in ${Date.now() - start} ms`);\n        this.notify_finished();\n    }\n    resize_layout() {\n        this.root.compute_viewport();\n        this.root.compute_layout();\n    }\n    invalidate_layout() {\n        this.root.update_layout();\n        this.root.compute_layout();\n    }\n    invalidate_render() {\n        this.render();\n        this.invalidate_layout();\n    }\n    has_finished() {\n        if (!super.has_finished())\n            return false;\n        for (const child_view of this.child_views) {\n            if (!child_view.has_finished())\n                return false;\n        }\n        return true;\n    }\n    notify_finished() {\n        if (!this.is_root)\n            this.root.notify_finished();\n        else {\n            if (!this._idle_notified && this.has_finished()) {\n                if (this.model.document != null) {\n                    this._idle_notified = true;\n                    this.model.document.notify_idle(this.model);\n                }\n            }\n        }\n    }\n    _width_policy() {\n        return this.model.width != null ? \"fixed\" : \"fit\";\n    }\n    _height_policy() {\n        return this.model.height != null ? \"fixed\" : \"fit\";\n    }\n    box_sizing() {\n        let { width_policy, height_policy, aspect_ratio } = this.model;\n        if (width_policy == \"auto\")\n            width_policy = this._width_policy();\n        if (height_policy == \"auto\")\n            height_policy = this._height_policy();\n        const { sizing_mode } = this.model;\n        if (sizing_mode != null) {\n            if (sizing_mode == \"fixed\")\n                width_policy = height_policy = \"fixed\";\n            else if (sizing_mode == \"stretch_both\")\n                width_policy = height_policy = \"max\";\n            else if (sizing_mode == \"stretch_width\")\n                width_policy = \"max\";\n            else if (sizing_mode == \"stretch_height\")\n                height_policy = \"max\";\n            else {\n                if (aspect_ratio == null)\n                    aspect_ratio = \"auto\";\n                switch (sizing_mode) {\n                    case \"scale_width\":\n                        width_policy = \"max\";\n                        height_policy = \"min\";\n                        break;\n                    case \"scale_height\":\n                        width_policy = \"min\";\n                        height_policy = \"max\";\n                        break;\n                    case \"scale_both\":\n                        width_policy = \"max\";\n                        height_policy = \"max\";\n                        break;\n                }\n            }\n        }\n        const sizing = { width_policy, height_policy };\n        const { min_width, min_height } = this.model;\n        if (min_width != null)\n            sizing.min_width = min_width;\n        if (min_height != null)\n            sizing.min_height = min_height;\n        const { width, height } = this.model;\n        if (width != null)\n            sizing.width = width;\n        if (height != null)\n            sizing.height = height;\n        const { max_width, max_height } = this.model;\n        if (max_width != null)\n            sizing.max_width = max_width;\n        if (max_height != null)\n            sizing.max_height = max_height;\n        if (aspect_ratio == \"auto\" && width != null && height != null)\n            sizing.aspect = width / height;\n        else if (isNumber(aspect_ratio))\n            sizing.aspect = aspect_ratio;\n        const { margin } = this.model;\n        if (margin != null) {\n            if (isNumber(margin))\n                sizing.margin = { top: margin, right: margin, bottom: margin, left: margin };\n            else if (margin.length == 2) {\n                const [vertical, horizontal] = margin;\n                sizing.margin = { top: vertical, right: horizontal, bottom: vertical, left: horizontal };\n            }\n            else {\n                const [top, right, bottom, left] = margin;\n                sizing.margin = { top, right, bottom, left };\n            }\n        }\n        sizing.visible = this.model.visible;\n        const { align } = this.model;\n        if (isArray(align))\n            [sizing.halign, sizing.valign] = align;\n        else\n            sizing.halign = sizing.valign = align;\n        return sizing;\n    }\n    _viewport_size() {\n        return undisplayed(this.el, () => {\n            let measuring = this.el;\n            while (measuring = measuring.parentElement) {\n                // .bk-root element doesn't bring any value\n                if (measuring.classList.contains(bk_root))\n                    continue;\n                // we reached <body> element, so use viewport size\n                if (measuring == document.body) {\n                    const { margin: { left, right, top, bottom } } = extents(document.body);\n                    const width = Math.ceil(document.documentElement.clientWidth - left - right);\n                    const height = Math.ceil(document.documentElement.clientHeight - top - bottom);\n                    return { width, height };\n                }\n                // stop on first element with sensible dimensions\n                const { padding: { left, right, top, bottom } } = extents(measuring);\n                const { width, height } = measuring.getBoundingClientRect();\n                const inner_width = Math.ceil(width - left - right);\n                const inner_height = Math.ceil(height - top - bottom);\n                if (inner_width > 0 || inner_height > 0)\n                    return {\n                        width: inner_width > 0 ? inner_width : undefined,\n                        height: inner_height > 0 ? inner_height : undefined,\n                    };\n            }\n            // this element is detached from DOM\n            return {};\n        });\n    }\n    serializable_state() {\n        return Object.assign(Object.assign({}, super.serializable_state()), { bbox: this.layout.bbox.box, children: this.child_views.map((child) => child.serializable_state()) });\n    }\n}\nLayoutDOMView.__name__ = \"LayoutDOMView\";\nexport class LayoutDOM extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_LayoutDOM() {\n        this.define({\n            width: [p.Number, null],\n            height: [p.Number, null],\n            min_width: [p.Number, null],\n            min_height: [p.Number, null],\n            max_width: [p.Number, null],\n            max_height: [p.Number, null],\n            margin: [p.Any, [0, 0, 0, 0]],\n            width_policy: [p.Any, \"auto\"],\n            height_policy: [p.Any, \"auto\"],\n            aspect_ratio: [p.Any, null],\n            sizing_mode: [p.SizingMode, null],\n            visible: [p.Boolean, true],\n            disabled: [p.Boolean, false],\n            align: [p.Any, \"start\"],\n            background: [p.Color, null],\n            css_classes: [p.Array, []],\n        });\n    }\n}\nLayoutDOM.__name__ = \"LayoutDOM\";\nLayoutDOM.init_LayoutDOM();\n//# sourceMappingURL=layout_dom.js.map"]},"metadata":{},"sourceType":"module"}