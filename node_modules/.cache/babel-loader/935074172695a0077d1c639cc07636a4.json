{"ast":null,"code":"// Based on https://github.com/phosphorjs/phosphor/blob/master/packages/signaling/src/index.ts\nimport { Set } from \"./util/data_structures\";\nimport { defer } from \"./util/callback\";\nimport { find, remove_by } from \"./util/array\";\nexport class Signal {\n  constructor(sender, name) {\n    this.sender = sender;\n    this.name = name;\n  }\n\n  connect(slot, context = null) {\n    if (!receiversForSender.has(this.sender)) {\n      receiversForSender.set(this.sender, []);\n    }\n\n    const receivers = receiversForSender.get(this.sender);\n\n    if (findConnection(receivers, this, slot, context) != null) {\n      return false;\n    }\n\n    const receiver = context || slot;\n\n    if (!sendersForReceiver.has(receiver)) {\n      sendersForReceiver.set(receiver, []);\n    }\n\n    const senders = sendersForReceiver.get(receiver);\n    const connection = {\n      signal: this,\n      slot,\n      context\n    };\n    receivers.push(connection);\n    senders.push(connection);\n    return true;\n  }\n\n  disconnect(slot, context = null) {\n    const receivers = receiversForSender.get(this.sender);\n\n    if (receivers == null || receivers.length === 0) {\n      return false;\n    }\n\n    const connection = findConnection(receivers, this, slot, context);\n\n    if (connection == null) {\n      return false;\n    }\n\n    const receiver = context || slot;\n    const senders = sendersForReceiver.get(receiver);\n    connection.signal = null;\n    scheduleCleanup(receivers);\n    scheduleCleanup(senders);\n    return true;\n  }\n\n  emit(args) {\n    const receivers = receiversForSender.get(this.sender) || [];\n\n    for (const {\n      signal,\n      slot,\n      context\n    } of receivers) {\n      if (signal === this) {\n        slot.call(context, args, this.sender);\n      }\n    }\n  }\n\n}\nSignal.__name__ = \"Signal\";\nexport class Signal0 extends Signal {\n  emit() {\n    super.emit(undefined);\n  }\n\n}\nSignal0.__name__ = \"Signal0\";\n\n(function (Signal) {\n  function disconnectBetween(sender, receiver) {\n    const receivers = receiversForSender.get(sender);\n    if (receivers == null || receivers.length === 0) return;\n    const senders = sendersForReceiver.get(receiver);\n    if (senders == null || senders.length === 0) return;\n\n    for (const connection of senders) {\n      if (connection.signal == null) return;\n      if (connection.signal.sender === sender) connection.signal = null;\n    }\n\n    scheduleCleanup(receivers);\n    scheduleCleanup(senders);\n  }\n\n  Signal.disconnectBetween = disconnectBetween;\n\n  function disconnectSender(sender) {\n    const receivers = receiversForSender.get(sender);\n    if (receivers == null || receivers.length === 0) return;\n\n    for (const connection of receivers) {\n      if (connection.signal == null) return;\n      const receiver = connection.context || connection.slot;\n      connection.signal = null;\n      scheduleCleanup(sendersForReceiver.get(receiver));\n    }\n\n    scheduleCleanup(receivers);\n  }\n\n  Signal.disconnectSender = disconnectSender;\n\n  function disconnectReceiver(receiver) {\n    const senders = sendersForReceiver.get(receiver);\n    if (senders == null || senders.length === 0) return;\n\n    for (const connection of senders) {\n      if (connection.signal == null) return;\n      const sender = connection.signal.sender;\n      connection.signal = null;\n      scheduleCleanup(receiversForSender.get(sender));\n    }\n\n    scheduleCleanup(senders);\n  }\n\n  Signal.disconnectReceiver = disconnectReceiver;\n\n  function disconnectAll(obj) {\n    const receivers = receiversForSender.get(obj);\n\n    if (receivers != null && receivers.length !== 0) {\n      for (const connection of receivers) {\n        connection.signal = null;\n      }\n\n      scheduleCleanup(receivers);\n    }\n\n    const senders = sendersForReceiver.get(obj);\n\n    if (senders != null && senders.length !== 0) {\n      for (const connection of senders) {\n        connection.signal = null;\n      }\n\n      scheduleCleanup(senders);\n    }\n  }\n\n  Signal.disconnectAll = disconnectAll;\n})(Signal || (Signal = {}));\n\nexport function Signalable() {\n  return class {\n    connect(signal, slot) {\n      return signal.connect(slot, this);\n    }\n\n    disconnect(signal, slot) {\n      return signal.disconnect(slot, this);\n    }\n\n  };\n}\nconst receiversForSender = new WeakMap();\nconst sendersForReceiver = new WeakMap();\n\nfunction findConnection(conns, signal, slot, context) {\n  return find(conns, conn => conn.signal === signal && conn.slot === slot && conn.context === context);\n}\n\nconst dirtySet = new Set();\n\nfunction scheduleCleanup(connections) {\n  if (dirtySet.size === 0) {\n    defer(cleanupDirtySet);\n  }\n\n  dirtySet.add(connections);\n}\n\nfunction cleanupDirtySet() {\n  dirtySet.forEach(connections => {\n    remove_by(connections, connection => connection.signal == null);\n  });\n  dirtySet.clear();\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/signaling.js"],"names":["Set","defer","find","remove_by","Signal","constructor","sender","name","connect","slot","context","receiversForSender","has","set","receivers","get","findConnection","receiver","sendersForReceiver","senders","connection","signal","push","disconnect","length","scheduleCleanup","emit","args","call","__name__","Signal0","undefined","disconnectBetween","disconnectSender","disconnectReceiver","disconnectAll","obj","Signalable","WeakMap","conns","conn","dirtySet","connections","size","cleanupDirtySet","add","forEach","clear"],"mappings":"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","sourcesContent":["// Based on https://github.com/phosphorjs/phosphor/blob/master/packages/signaling/src/index.ts\nimport { Set } from \"./util/data_structures\";\nimport { defer } from \"./util/callback\";\nimport { find, remove_by } from \"./util/array\";\nexport class Signal {\n    constructor(sender, name) {\n        this.sender = sender;\n        this.name = name;\n    }\n    connect(slot, context = null) {\n        if (!receiversForSender.has(this.sender)) {\n            receiversForSender.set(this.sender, []);\n        }\n        const receivers = receiversForSender.get(this.sender);\n        if (findConnection(receivers, this, slot, context) != null) {\n            return false;\n        }\n        const receiver = context || slot;\n        if (!sendersForReceiver.has(receiver)) {\n            sendersForReceiver.set(receiver, []);\n        }\n        const senders = sendersForReceiver.get(receiver);\n        const connection = { signal: this, slot, context };\n        receivers.push(connection);\n        senders.push(connection);\n        return true;\n    }\n    disconnect(slot, context = null) {\n        const receivers = receiversForSender.get(this.sender);\n        if (receivers == null || receivers.length === 0) {\n            return false;\n        }\n        const connection = findConnection(receivers, this, slot, context);\n        if (connection == null) {\n            return false;\n        }\n        const receiver = context || slot;\n        const senders = sendersForReceiver.get(receiver);\n        connection.signal = null;\n        scheduleCleanup(receivers);\n        scheduleCleanup(senders);\n        return true;\n    }\n    emit(args) {\n        const receivers = receiversForSender.get(this.sender) || [];\n        for (const { signal, slot, context } of receivers) {\n            if (signal === this) {\n                slot.call(context, args, this.sender);\n            }\n        }\n    }\n}\nSignal.__name__ = \"Signal\";\nexport class Signal0 extends Signal {\n    emit() {\n        super.emit(undefined);\n    }\n}\nSignal0.__name__ = \"Signal0\";\n(function (Signal) {\n    function disconnectBetween(sender, receiver) {\n        const receivers = receiversForSender.get(sender);\n        if (receivers == null || receivers.length === 0)\n            return;\n        const senders = sendersForReceiver.get(receiver);\n        if (senders == null || senders.length === 0)\n            return;\n        for (const connection of senders) {\n            if (connection.signal == null)\n                return;\n            if (connection.signal.sender === sender)\n                connection.signal = null;\n        }\n        scheduleCleanup(receivers);\n        scheduleCleanup(senders);\n    }\n    Signal.disconnectBetween = disconnectBetween;\n    function disconnectSender(sender) {\n        const receivers = receiversForSender.get(sender);\n        if (receivers == null || receivers.length === 0)\n            return;\n        for (const connection of receivers) {\n            if (connection.signal == null)\n                return;\n            const receiver = connection.context || connection.slot;\n            connection.signal = null;\n            scheduleCleanup(sendersForReceiver.get(receiver));\n        }\n        scheduleCleanup(receivers);\n    }\n    Signal.disconnectSender = disconnectSender;\n    function disconnectReceiver(receiver) {\n        const senders = sendersForReceiver.get(receiver);\n        if (senders == null || senders.length === 0)\n            return;\n        for (const connection of senders) {\n            if (connection.signal == null)\n                return;\n            const sender = connection.signal.sender;\n            connection.signal = null;\n            scheduleCleanup(receiversForSender.get(sender));\n        }\n        scheduleCleanup(senders);\n    }\n    Signal.disconnectReceiver = disconnectReceiver;\n    function disconnectAll(obj) {\n        const receivers = receiversForSender.get(obj);\n        if (receivers != null && receivers.length !== 0) {\n            for (const connection of receivers) {\n                connection.signal = null;\n            }\n            scheduleCleanup(receivers);\n        }\n        const senders = sendersForReceiver.get(obj);\n        if (senders != null && senders.length !== 0) {\n            for (const connection of senders) {\n                connection.signal = null;\n            }\n            scheduleCleanup(senders);\n        }\n    }\n    Signal.disconnectAll = disconnectAll;\n})(Signal || (Signal = {}));\nexport function Signalable() {\n    return class {\n        connect(signal, slot) {\n            return signal.connect(slot, this);\n        }\n        disconnect(signal, slot) {\n            return signal.disconnect(slot, this);\n        }\n    };\n}\nconst receiversForSender = new WeakMap();\nconst sendersForReceiver = new WeakMap();\nfunction findConnection(conns, signal, slot, context) {\n    return find(conns, conn => conn.signal === signal && conn.slot === slot && conn.context === context);\n}\nconst dirtySet = new Set();\nfunction scheduleCleanup(connections) {\n    if (dirtySet.size === 0) {\n        defer(cleanupDirtySet);\n    }\n    dirtySet.add(connections);\n}\nfunction cleanupDirtySet() {\n    dirtySet.forEach((connections) => {\n        remove_by(connections, (connection) => connection.signal == null);\n    });\n    dirtySet.clear();\n}\n//# sourceMappingURL=signaling.js.map"]},"metadata":{},"sourceType":"module"}