{"ast":null,"code":"import { difference } from \"./util/array\";\n\nasync function _build_view(view_cls, model, options) {\n  const view = new view_cls(Object.assign(Object.assign({}, options), {\n    model\n  }));\n  view.initialize();\n  await view.lazy_initialize();\n  return view;\n}\n\nexport async function build_view(model, options = {\n  parent: null\n}, cls = model => model.default_view) {\n  const view = await _build_view(cls(model), model, options);\n  view.connect_signals();\n  return view;\n}\nexport async function build_views(view_storage, models, options = {\n  parent: null\n}, cls = model => model.default_view) {\n  const to_remove = difference(Object.keys(view_storage), models.map(model => model.id));\n\n  for (const model_id of to_remove) {\n    view_storage[model_id].remove();\n    delete view_storage[model_id];\n  }\n\n  const created_views = [];\n  const new_models = models.filter(model => view_storage[model.id] == null);\n\n  for (const model of new_models) {\n    const view = await _build_view(cls(model), model, options);\n    view_storage[model.id] = view;\n    created_views.push(view);\n  }\n\n  for (const view of created_views) view.connect_signals();\n\n  return created_views;\n}\nexport function remove_views(view_storage) {\n  for (const id in view_storage) {\n    view_storage[id].remove();\n    delete view_storage[id];\n  }\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/build_views.js"],"names":["difference","_build_view","view_cls","model","options","view","Object","assign","initialize","lazy_initialize","build_view","parent","cls","default_view","connect_signals","build_views","view_storage","models","to_remove","keys","map","id","model_id","remove","created_views","new_models","filter","push","remove_views"],"mappings":"AAAA,SAASA,UAAT,QAA2B,cAA3B;;AACA,eAAeC,WAAf,CAA2BC,QAA3B,EAAqCC,KAArC,EAA4CC,OAA5C,EAAqD;AACjD,QAAMC,IAAI,GAAG,IAAIH,QAAJ,CAAaI,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,OAAlB,CAAd,EAA0C;AAAED,IAAAA;AAAF,GAA1C,CAAb,CAAb;AACAE,EAAAA,IAAI,CAACG,UAAL;AACA,QAAMH,IAAI,CAACI,eAAL,EAAN;AACA,SAAOJ,IAAP;AACH;;AACD,OAAO,eAAeK,UAAf,CAA0BP,KAA1B,EAAiCC,OAAO,GAAG;AAAEO,EAAAA,MAAM,EAAE;AAAV,CAA3C,EAA6DC,GAAG,GAAIT,KAAD,IAAWA,KAAK,CAACU,YAApF,EAAkG;AACrG,QAAMR,IAAI,GAAG,MAAMJ,WAAW,CAACW,GAAG,CAACT,KAAD,CAAJ,EAAaA,KAAb,EAAoBC,OAApB,CAA9B;AACAC,EAAAA,IAAI,CAACS,eAAL;AACA,SAAOT,IAAP;AACH;AACD,OAAO,eAAeU,WAAf,CAA2BC,YAA3B,EAAyCC,MAAzC,EAAiDb,OAAO,GAAG;AAAEO,EAAAA,MAAM,EAAE;AAAV,CAA3D,EAA6EC,GAAG,GAAIT,KAAD,IAAWA,KAAK,CAACU,YAApG,EAAkH;AACrH,QAAMK,SAAS,GAAGlB,UAAU,CAACM,MAAM,CAACa,IAAP,CAAYH,YAAZ,CAAD,EAA4BC,MAAM,CAACG,GAAP,CAAYjB,KAAD,IAAWA,KAAK,CAACkB,EAA5B,CAA5B,CAA5B;;AACA,OAAK,MAAMC,QAAX,IAAuBJ,SAAvB,EAAkC;AAC9BF,IAAAA,YAAY,CAACM,QAAD,CAAZ,CAAuBC,MAAvB;AACA,WAAOP,YAAY,CAACM,QAAD,CAAnB;AACH;;AACD,QAAME,aAAa,GAAG,EAAtB;AACA,QAAMC,UAAU,GAAGR,MAAM,CAACS,MAAP,CAAevB,KAAD,IAAWa,YAAY,CAACb,KAAK,CAACkB,EAAP,CAAZ,IAA0B,IAAnD,CAAnB;;AACA,OAAK,MAAMlB,KAAX,IAAoBsB,UAApB,EAAgC;AAC5B,UAAMpB,IAAI,GAAG,MAAMJ,WAAW,CAACW,GAAG,CAACT,KAAD,CAAJ,EAAaA,KAAb,EAAoBC,OAApB,CAA9B;AACAY,IAAAA,YAAY,CAACb,KAAK,CAACkB,EAAP,CAAZ,GAAyBhB,IAAzB;AACAmB,IAAAA,aAAa,CAACG,IAAd,CAAmBtB,IAAnB;AACH;;AACD,OAAK,MAAMA,IAAX,IAAmBmB,aAAnB,EACInB,IAAI,CAACS,eAAL;;AACJ,SAAOU,aAAP;AACH;AACD,OAAO,SAASI,YAAT,CAAsBZ,YAAtB,EAAoC;AACvC,OAAK,MAAMK,EAAX,IAAiBL,YAAjB,EAA+B;AAC3BA,IAAAA,YAAY,CAACK,EAAD,CAAZ,CAAiBE,MAAjB;AACA,WAAOP,YAAY,CAACK,EAAD,CAAnB;AACH;AACJ","sourcesContent":["import { difference } from \"./util/array\";\nasync function _build_view(view_cls, model, options) {\n    const view = new view_cls(Object.assign(Object.assign({}, options), { model }));\n    view.initialize();\n    await view.lazy_initialize();\n    return view;\n}\nexport async function build_view(model, options = { parent: null }, cls = (model) => model.default_view) {\n    const view = await _build_view(cls(model), model, options);\n    view.connect_signals();\n    return view;\n}\nexport async function build_views(view_storage, models, options = { parent: null }, cls = (model) => model.default_view) {\n    const to_remove = difference(Object.keys(view_storage), models.map((model) => model.id));\n    for (const model_id of to_remove) {\n        view_storage[model_id].remove();\n        delete view_storage[model_id];\n    }\n    const created_views = [];\n    const new_models = models.filter((model) => view_storage[model.id] == null);\n    for (const model of new_models) {\n        const view = await _build_view(cls(model), model, options);\n        view_storage[model.id] = view;\n        created_views.push(view);\n    }\n    for (const view of created_views)\n        view.connect_signals();\n    return created_views;\n}\nexport function remove_views(view_storage) {\n    for (const id in view_storage) {\n        view_storage[id].remove();\n        delete view_storage[id];\n    }\n}\n//# sourceMappingURL=build_views.js.map"]},"metadata":{},"sourceType":"module"}