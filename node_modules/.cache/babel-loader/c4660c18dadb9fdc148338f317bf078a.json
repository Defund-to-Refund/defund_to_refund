{"ast":null,"code":"\"use strict\";\n\nvar $ = require(\"../slick.jquery\");\n\nvar Slick = require(\"../slick.core\");\n\nfunction CheckboxSelectColumn(options) {\n  var _grid;\n\n  var _selectAll_UID = createUID();\n\n  var _handler = new Slick.EventHandler();\n\n  var _selectedRowsLookup = {};\n  var _defaults = {\n    columnId: \"_checkbox_selector\",\n    cssClass: null,\n    hideSelectAllCheckbox: false,\n    toolTip: \"Select/Deselect All\",\n    width: 30,\n    hideInColumnTitleRow: false,\n    hideInFilterHeaderRow: true\n  };\n  var _isSelectAllChecked = false;\n\n  var _options = $.extend(true, {}, _defaults, options);\n\n  function init(grid) {\n    _grid = grid;\n\n    _handler.subscribe(_grid.onSelectedRowsChanged, handleSelectedRowsChanged).subscribe(_grid.onClick, handleClick).subscribe(_grid.onKeyDown, handleKeyDown);\n\n    if (!_options.hideInFilterHeaderRow) {\n      addCheckboxToFilterHeaderRow(grid);\n    }\n\n    if (!_options.hideInColumnTitleRow) {\n      _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n    }\n  }\n\n  function destroy() {\n    _handler.unsubscribeAll();\n  }\n\n  function getOptions() {\n    return _options;\n  }\n\n  function setOptions(options) {\n    _options = $.extend(true, {}, _options, options);\n\n    if (_options.hideSelectAllCheckbox) {\n      hideSelectAllFromColumnHeaderTitleRow();\n      hideSelectAllFromColumnHeaderFilterRow();\n    } else {\n      if (!_options.hideInColumnTitleRow) {\n        if (_isSelectAllChecked) {\n          _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n        } else {\n          _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n        }\n\n        _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n      } else {\n        hideSelectAllFromColumnHeaderTitleRow();\n      }\n\n      if (!_options.hideInFilterHeaderRow) {\n        var selectAllContainer = $(\"#filter-checkbox-selectall-container\");\n        selectAllContainer.show();\n        selectAllContainer.find('input[type=\"checkbox\"]').prop(\"checked\", _isSelectAllChecked);\n      } else {\n        hideSelectAllFromColumnHeaderFilterRow();\n      }\n    }\n  }\n\n  function hideSelectAllFromColumnHeaderTitleRow() {\n    _grid.updateColumnHeader(_options.columnId, \"\", \"\");\n  }\n\n  function hideSelectAllFromColumnHeaderFilterRow() {\n    $(\"#filter-checkbox-selectall-container\").hide();\n  }\n\n  function handleSelectedRowsChanged(e, args) {\n    var selectedRows = _grid.getSelectedRows();\n\n    var lookup = {},\n        row,\n        i;\n\n    for (i = 0; i < selectedRows.length; i++) {\n      row = selectedRows[i];\n      lookup[row] = true;\n\n      if (lookup[row] !== _selectedRowsLookup[row]) {\n        _grid.invalidateRow(row);\n\n        delete _selectedRowsLookup[row];\n      }\n    }\n\n    for (i in _selectedRowsLookup) {\n      _grid.invalidateRow(i);\n    }\n\n    _selectedRowsLookup = lookup;\n\n    _grid.render();\n\n    _isSelectAllChecked = selectedRows.length && selectedRows.length == _grid.getDataLength();\n\n    if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n      if (_isSelectAllChecked) {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      } else {\n        _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n      }\n    }\n\n    if (!_options.hideInFilterHeaderRow) {\n      var selectAllElm = $(\"#header-filter-selector\" + _selectAll_UID);\n      selectAllElm.prop(\"checked\", _isSelectAllChecked);\n    }\n  }\n\n  function handleKeyDown(e, args) {\n    if (e.which == 32) {\n      if (_grid.getColumns()[args.cell].id === _options.columnId) {\n        // if editing, try to commit\n        if (!_grid.getEditorLock().isActive() || _grid.getEditorLock().commitCurrentEdit()) {\n          toggleRowSelection(args.row);\n        }\n\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n  }\n\n  function handleClick(e, args) {\n    // clicking on a row select checkbox\n    if (_grid.getColumns()[args.cell].id === _options.columnId && $(e.target).is(\":checkbox\")) {\n      // if editing, try to commit\n      if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return;\n      }\n\n      toggleRowSelection(args.row);\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  function toggleRowSelection(row) {\n    if (_selectedRowsLookup[row]) {\n      _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {\n        return n != row;\n      }));\n    } else {\n      _grid.setSelectedRows(_grid.getSelectedRows().concat(row));\n    }\n\n    _grid.setActiveCell(row, getCheckboxColumnCellIndex());\n\n    _grid.focus();\n  }\n\n  function selectRows(rowArray) {\n    var i,\n        l = rowArray.length,\n        addRows = [];\n\n    for (i = 0; i < l; i++) {\n      if (!_selectedRowsLookup[rowArray[i]]) {\n        addRows[addRows.length] = rowArray[i];\n      }\n    }\n\n    _grid.setSelectedRows(_grid.getSelectedRows().concat(addRows));\n  }\n\n  function deSelectRows(rowArray) {\n    var i,\n        l = rowArray.length,\n        removeRows = [];\n\n    for (i = 0; i < l; i++) {\n      if (_selectedRowsLookup[rowArray[i]]) {\n        removeRows[removeRows.length] = rowArray[i];\n      }\n    }\n\n    _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {\n      return removeRows.indexOf(n) < 0;\n    }));\n  }\n\n  function handleHeaderClick(e, args) {\n    if (args.column.id == _options.columnId && $(e.target).is(\":checkbox\")) {\n      // if editing, try to commit\n      if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n        return;\n      }\n\n      if ($(e.target).is(\":checked\")) {\n        var rows = [];\n\n        for (var i = 0; i < _grid.getDataLength(); i++) {\n          rows.push(i);\n        }\n\n        _grid.setSelectedRows(rows);\n      } else {\n        _grid.setSelectedRows([]);\n      }\n\n      e.stopPropagation();\n      e.stopImmediatePropagation();\n    }\n  }\n\n  var _checkboxColumnCellIndex = null;\n\n  function getCheckboxColumnCellIndex() {\n    if (_checkboxColumnCellIndex === null) {\n      _checkboxColumnCellIndex = 0;\n\n      var colArr = _grid.getColumns();\n\n      for (var i = 0; i < colArr.length; i++) {\n        if (colArr[i].id == _options.columnId) {\n          _checkboxColumnCellIndex = i;\n        }\n      }\n    }\n\n    return _checkboxColumnCellIndex;\n  }\n\n  function getColumnDefinition() {\n    return {\n      id: _options.columnId,\n      name: _options.hideSelectAllCheckbox || _options.hideInColumnTitleRow ? \"\" : \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\",\n      toolTip: _options.toolTip,\n      field: \"sel\",\n      width: _options.width,\n      resizable: false,\n      sortable: false,\n      cssClass: _options.cssClass,\n      hideSelectAllCheckbox: _options.hideSelectAllCheckbox,\n      formatter: checkboxSelectionFormatter\n    };\n  }\n\n  function addCheckboxToFilterHeaderRow(grid) {\n    grid.onHeaderRowCellRendered.subscribe(function (e, args) {\n      if (args.column.field === \"sel\") {\n        $(args.node).empty();\n        $(\"<span id='filter-checkbox-selectall-container'><input id='header-filter-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-filter-selector\" + _selectAll_UID + \"'></label></span>\").appendTo(args.node).on('click', function (evnt) {\n          handleHeaderClick(evnt, args);\n        });\n      }\n    });\n  }\n\n  function createUID() {\n    return Math.round(10000000 * Math.random());\n  }\n\n  function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext) {\n    var UID = createUID() + row;\n\n    if (dataContext) {\n      return _selectedRowsLookup[row] ? \"<input id='selector\" + UID + \"' type='checkbox' checked='checked'><label for='selector\" + UID + \"'></label>\" : \"<input id='selector\" + UID + \"' type='checkbox'><label for='selector\" + UID + \"'></label>\";\n    }\n\n    return null;\n  }\n\n  $.extend(this, {\n    \"init\": init,\n    \"destroy\": destroy,\n    \"deSelectRows\": deSelectRows,\n    \"selectRows\": selectRows,\n    \"getColumnDefinition\": getColumnDefinition,\n    \"getOptions\": getOptions,\n    \"setOptions\": setOptions\n  });\n}\n\nmodule.exports = {\n  \"CheckboxSelectColumn\": CheckboxSelectColumn\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/slickgrid/plugins/slick.checkboxselectcolumn.js"],"names":["$","require","Slick","CheckboxSelectColumn","options","_grid","_selectAll_UID","createUID","_handler","EventHandler","_selectedRowsLookup","_defaults","columnId","cssClass","hideSelectAllCheckbox","toolTip","width","hideInColumnTitleRow","hideInFilterHeaderRow","_isSelectAllChecked","_options","extend","init","grid","subscribe","onSelectedRowsChanged","handleSelectedRowsChanged","onClick","handleClick","onKeyDown","handleKeyDown","addCheckboxToFilterHeaderRow","onHeaderClick","handleHeaderClick","destroy","unsubscribeAll","getOptions","setOptions","hideSelectAllFromColumnHeaderTitleRow","hideSelectAllFromColumnHeaderFilterRow","updateColumnHeader","selectAllContainer","show","find","prop","hide","e","args","selectedRows","getSelectedRows","lookup","row","i","length","invalidateRow","render","getDataLength","selectAllElm","which","getColumns","cell","id","getEditorLock","isActive","commitCurrentEdit","toggleRowSelection","preventDefault","stopImmediatePropagation","target","is","stopPropagation","setSelectedRows","grep","n","concat","setActiveCell","getCheckboxColumnCellIndex","focus","selectRows","rowArray","l","addRows","deSelectRows","removeRows","indexOf","column","rows","push","_checkboxColumnCellIndex","colArr","getColumnDefinition","name","field","resizable","sortable","formatter","checkboxSelectionFormatter","onHeaderRowCellRendered","node","empty","appendTo","on","evnt","Math","round","random","value","columnDef","dataContext","UID","module","exports"],"mappings":"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","sourcesContent":["  \"use strict\";\n  var $ = require(\"../slick.jquery\");\n  var Slick = require(\"../slick.core\");\n\n  function CheckboxSelectColumn(options) {\n    var _grid;\n    var _selectAll_UID = createUID();\n    var _handler = new Slick.EventHandler();\n    var _selectedRowsLookup = {};\n    var _defaults = {\n      columnId: \"_checkbox_selector\",\n      cssClass: null,\n      hideSelectAllCheckbox: false,\n      toolTip: \"Select/Deselect All\",\n      width: 30,\n      hideInColumnTitleRow: false,\n      hideInFilterHeaderRow: true\n    };\n    var _isSelectAllChecked = false;\n\n    var _options = $.extend(true, {}, _defaults, options);\n\n    function init(grid) {\n      _grid = grid;\n      _handler\n      .subscribe(_grid.onSelectedRowsChanged, handleSelectedRowsChanged)\n      .subscribe(_grid.onClick, handleClick)\n      .subscribe(_grid.onKeyDown, handleKeyDown);\n      \n      if (!_options.hideInFilterHeaderRow) {\n        addCheckboxToFilterHeaderRow(grid);\n      }\n      if (!_options.hideInColumnTitleRow) {\n        _handler.subscribe(_grid.onHeaderClick, handleHeaderClick)\n      }\n    }\n\n    function destroy() {\n      _handler.unsubscribeAll();\n    }\n\n    function getOptions() {\n      return _options;\n    }\n\n    function setOptions(options) {\n      _options = $.extend(true, {}, _options, options);\n      \n      if (_options.hideSelectAllCheckbox) {\n        hideSelectAllFromColumnHeaderTitleRow();\n        hideSelectAllFromColumnHeaderFilterRow();\n      } else {\n        if (!_options.hideInColumnTitleRow) {\n          if (_isSelectAllChecked) {\n            _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n          } else {\n            _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n          }\n          _handler.subscribe(_grid.onHeaderClick, handleHeaderClick);\n        } else {\n          hideSelectAllFromColumnHeaderTitleRow();\n        }\n\n        if (!_options.hideInFilterHeaderRow) {\n          var selectAllContainer = $(\"#filter-checkbox-selectall-container\");\n          selectAllContainer.show();\n          selectAllContainer.find('input[type=\"checkbox\"]').prop(\"checked\", _isSelectAllChecked);\n        } else {\n          hideSelectAllFromColumnHeaderFilterRow();\n        }\n      } \n    }\n\n    function hideSelectAllFromColumnHeaderTitleRow() {\n      _grid.updateColumnHeader(_options.columnId, \"\", \"\");\n    }\n\n    function hideSelectAllFromColumnHeaderFilterRow() {\n      $(\"#filter-checkbox-selectall-container\").hide();\n    }\n\n    function handleSelectedRowsChanged(e, args) {\n      var selectedRows = _grid.getSelectedRows();\n      var lookup = {}, row, i;\n      for (i = 0; i < selectedRows.length; i++) {\n        row = selectedRows[i];\n        lookup[row] = true;\n        if (lookup[row] !== _selectedRowsLookup[row]) {\n          _grid.invalidateRow(row);\n          delete _selectedRowsLookup[row];\n        }\n      }\n      for (i in _selectedRowsLookup) {\n        _grid.invalidateRow(i);\n      }\n      _selectedRowsLookup = lookup;\n      _grid.render();\n      _isSelectAllChecked = selectedRows.length && selectedRows.length == _grid.getDataLength();\n\n      if (!_options.hideInColumnTitleRow && !_options.hideSelectAllCheckbox) {\n        if (_isSelectAllChecked) {\n          _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox' checked='checked'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n        } else {\n          _grid.updateColumnHeader(_options.columnId, \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\", _options.toolTip);\n        }\n      } \n      if (!_options.hideInFilterHeaderRow) {\n        var selectAllElm = $(\"#header-filter-selector\" + _selectAll_UID);\n        selectAllElm.prop(\"checked\", _isSelectAllChecked);\n      }\n    }\n\n    function handleKeyDown(e, args) {\n      if (e.which == 32) {\n        if (_grid.getColumns()[args.cell].id === _options.columnId) {\n          // if editing, try to commit\n          if (!_grid.getEditorLock().isActive() || _grid.getEditorLock().commitCurrentEdit()) {\n            toggleRowSelection(args.row);\n          }\n          e.preventDefault();\n          e.stopImmediatePropagation();\n        }\n      }\n    }\n\n    function handleClick(e, args) {\n      // clicking on a row select checkbox\n      if (_grid.getColumns()[args.cell].id === _options.columnId && $(e.target).is(\":checkbox\")) {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        toggleRowSelection(args.row);\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    function toggleRowSelection(row) {\n      if (_selectedRowsLookup[row]) {\n        _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {\n          return n != row\n        }));\n      } else {\n        _grid.setSelectedRows(_grid.getSelectedRows().concat(row));\n      }\n      _grid.setActiveCell(row, getCheckboxColumnCellIndex());\n      _grid.focus();\n    }\n\n    function selectRows(rowArray) {\n      var i, l=rowArray.length, addRows = [];\n      for(i=0; i<l; i++) {\n        if (!_selectedRowsLookup[rowArray[i]]) {\n          addRows[addRows.length] = rowArray[i];\n        }\n      }\n      _grid.setSelectedRows(_grid.getSelectedRows().concat(addRows));\n    }\n\n    function deSelectRows(rowArray) {\n      var i, l=rowArray.length, removeRows = [];\n      for(i=0; i<l; i++) {\n        if (_selectedRowsLookup[rowArray[i]]) {\n          removeRows[removeRows.length] = rowArray[i];\n        }\n      }\n      _grid.setSelectedRows($.grep(_grid.getSelectedRows(), function (n) {\n        return removeRows.indexOf(n)<0\n      }));\n    }\n\n    function handleHeaderClick(e, args) {\n      if (args.column.id == _options.columnId && $(e.target).is(\":checkbox\")) {\n        // if editing, try to commit\n        if (_grid.getEditorLock().isActive() && !_grid.getEditorLock().commitCurrentEdit()) {\n          e.preventDefault();\n          e.stopImmediatePropagation();\n          return;\n        }\n\n        if ($(e.target).is(\":checked\")) {\n          var rows = [];\n          for (var i = 0; i < _grid.getDataLength(); i++) {\n            rows.push(i);\n          }\n          _grid.setSelectedRows(rows);\n        } else {\n          _grid.setSelectedRows([]);\n        }\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    var _checkboxColumnCellIndex = null;\n\n    function getCheckboxColumnCellIndex() {\n      if (_checkboxColumnCellIndex === null) {\n        _checkboxColumnCellIndex = 0;\n        var colArr = _grid.getColumns();\n        for (var i=0; i < colArr.length; i++) {\n          if (colArr[i].id == _options.columnId) {\n            _checkboxColumnCellIndex = i;\n          }\n        }\n      }\n      return _checkboxColumnCellIndex;\n    }\n\n    function getColumnDefinition() {\n      return {\n        id: _options.columnId,\n        name: (_options.hideSelectAllCheckbox || _options.hideInColumnTitleRow) ? \"\" : \"<input id='header-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-selector\" + _selectAll_UID + \"'></label>\",\n        toolTip: _options.toolTip,\n        field: \"sel\",\n        width: _options.width,\n        resizable: false,\n        sortable: false,\n        cssClass: _options.cssClass,\n        hideSelectAllCheckbox: _options.hideSelectAllCheckbox,\n        formatter: checkboxSelectionFormatter\n      };\n    }\n\n    function addCheckboxToFilterHeaderRow(grid) {\n      grid.onHeaderRowCellRendered.subscribe(function(e, args) {\n        if (args.column.field === \"sel\") {\n          $(args.node).empty();\n          $(\"<span id='filter-checkbox-selectall-container'><input id='header-filter-selector\" + _selectAll_UID + \"' type='checkbox'><label for='header-filter-selector\" + _selectAll_UID + \"'></label></span>\")\n            .appendTo(args.node)\n            .on('click', function(evnt) { \n              handleHeaderClick(evnt, args) \n            });\n        }\n      });\n    }\n\n    function createUID() {\n      return Math.round(10000000 * Math.random());\n    }\n\n    function checkboxSelectionFormatter(row, cell, value, columnDef, dataContext) {\n      var UID = createUID() + row;\n\n      if (dataContext) {\n        return _selectedRowsLookup[row]\n            ? \"<input id='selector\" + UID + \"' type='checkbox' checked='checked'><label for='selector\" + UID + \"'></label>\"\n            : \"<input id='selector\" + UID + \"' type='checkbox'><label for='selector\" + UID + \"'></label>\";\n      }\n      return null;\n    }\n\n    $.extend(this, {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"deSelectRows\": deSelectRows,\n      \"selectRows\": selectRows,\n      \"getColumnDefinition\": getColumnDefinition,\n      \"getOptions\": getOptions,\n      \"setOptions\": setOptions,\n    });\n  }\n\n  module.exports = {\n      \"CheckboxSelectColumn\": CheckboxSelectColumn\n  };\n"]},"metadata":{},"sourceType":"script"}