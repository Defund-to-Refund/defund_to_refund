{"ast":null,"code":"import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_wheel_pan } from \"../../../styles/icons\";\nexport class WheelPanToolView extends GestureToolView {\n  _scroll(ev) {\n    let factor = this.model.speed * ev.delta; // clamp the magnitude of factor, if it is > 1 bad things happen\n\n    if (factor > 0.9) factor = 0.9;else if (factor < -0.9) factor = -0.9;\n\n    this._update_ranges(factor);\n  }\n\n  _update_ranges(factor) {\n    const {\n      frame\n    } = this.plot_view;\n    const hr = frame.bbox.h_range;\n    const vr = frame.bbox.v_range;\n    const [sx_low, sx_high] = [hr.start, hr.end];\n    const [sy_low, sy_high] = [vr.start, vr.end];\n    let sx0;\n    let sx1;\n    let sy0;\n    let sy1;\n\n    switch (this.model.dimension) {\n      case \"height\":\n        {\n          const sy_range = Math.abs(sy_high - sy_low);\n          sx0 = sx_low;\n          sx1 = sx_high;\n          sy0 = sy_low - sy_range * factor;\n          sy1 = sy_high - sy_range * factor;\n          break;\n        }\n\n      case \"width\":\n        {\n          const sx_range = Math.abs(sx_high - sx_low);\n          sx0 = sx_low - sx_range * factor;\n          sx1 = sx_high - sx_range * factor;\n          sy0 = sy_low;\n          sy1 = sy_high;\n          break;\n        }\n\n      default:\n        throw new Error(\"this shouldn't have happened\");\n    }\n\n    const {\n      xscales,\n      yscales\n    } = frame;\n    const xrs = {};\n\n    for (const name in xscales) {\n      const scale = xscales[name];\n      const [start, end] = scale.r_invert(sx0, sx1);\n      xrs[name] = {\n        start,\n        end\n      };\n    }\n\n    const yrs = {};\n\n    for (const name in yscales) {\n      const scale = yscales[name];\n      const [start, end] = scale.r_invert(sy0, sy1);\n      yrs[name] = {\n        start,\n        end\n      };\n    } // OK this sucks we can't set factor independently in each direction. It is used\n    // for GMap plots, and GMap plots always preserve aspect, so effective the value\n    // of 'dimensions' is ignored.\n\n\n    const pan_info = {\n      xrs,\n      yrs,\n      factor\n    };\n    this.plot_view.push_state('wheel_pan', {\n      range: pan_info\n    });\n    this.plot_view.update_range(pan_info, false, true);\n    if (this.model.document != null) this.model.document.interactive_start(this.plot_model);\n  }\n\n}\nWheelPanToolView.__name__ = \"WheelPanToolView\";\nexport class WheelPanTool extends GestureTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Wheel Pan\";\n    this.icon = bk_tool_icon_wheel_pan;\n    this.event_type = \"scroll\";\n    this.default_order = 12;\n  }\n\n  static init_WheelPanTool() {\n    this.prototype.default_view = WheelPanToolView;\n    this.define({\n      dimension: [p.Dimension, \"width\"]\n    });\n    this.internal({\n      speed: [p.Number, 1 / 1000]\n    });\n    this.register_alias(\"xwheel_pan\", () => new WheelPanTool({\n      dimension: \"width\"\n    }));\n    this.register_alias(\"ywheel_pan\", () => new WheelPanTool({\n      dimension: \"height\"\n    }));\n  }\n\n  get tooltip() {\n    return this._get_dim_tooltip(this.tool_name, this.dimension);\n  }\n\n}\nWheelPanTool.__name__ = \"WheelPanTool\";\nWheelPanTool.init_WheelPanTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/wheel_pan_tool.js"],"names":["GestureTool","GestureToolView","p","bk_tool_icon_wheel_pan","WheelPanToolView","_scroll","ev","factor","model","speed","delta","_update_ranges","frame","plot_view","hr","bbox","h_range","vr","v_range","sx_low","sx_high","start","end","sy_low","sy_high","sx0","sx1","sy0","sy1","dimension","sy_range","Math","abs","sx_range","Error","xscales","yscales","xrs","name","scale","r_invert","yrs","pan_info","push_state","range","update_range","document","interactive_start","plot_model","__name__","WheelPanTool","constructor","attrs","tool_name","icon","event_type","default_order","init_WheelPanTool","prototype","default_view","define","Dimension","internal","Number","register_alias","tooltip","_get_dim_tooltip"],"mappings":"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","sourcesContent":["import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_wheel_pan } from \"../../../styles/icons\";\nexport class WheelPanToolView extends GestureToolView {\n    _scroll(ev) {\n        let factor = this.model.speed * ev.delta;\n        // clamp the magnitude of factor, if it is > 1 bad things happen\n        if (factor > 0.9)\n            factor = 0.9;\n        else if (factor < -0.9)\n            factor = -0.9;\n        this._update_ranges(factor);\n    }\n    _update_ranges(factor) {\n        const { frame } = this.plot_view;\n        const hr = frame.bbox.h_range;\n        const vr = frame.bbox.v_range;\n        const [sx_low, sx_high] = [hr.start, hr.end];\n        const [sy_low, sy_high] = [vr.start, vr.end];\n        let sx0;\n        let sx1;\n        let sy0;\n        let sy1;\n        switch (this.model.dimension) {\n            case \"height\": {\n                const sy_range = Math.abs(sy_high - sy_low);\n                sx0 = sx_low;\n                sx1 = sx_high;\n                sy0 = sy_low - sy_range * factor;\n                sy1 = sy_high - sy_range * factor;\n                break;\n            }\n            case \"width\": {\n                const sx_range = Math.abs(sx_high - sx_low);\n                sx0 = sx_low - sx_range * factor;\n                sx1 = sx_high - sx_range * factor;\n                sy0 = sy_low;\n                sy1 = sy_high;\n                break;\n            }\n            default:\n                throw new Error(\"this shouldn't have happened\");\n        }\n        const { xscales, yscales } = frame;\n        const xrs = {};\n        for (const name in xscales) {\n            const scale = xscales[name];\n            const [start, end] = scale.r_invert(sx0, sx1);\n            xrs[name] = { start, end };\n        }\n        const yrs = {};\n        for (const name in yscales) {\n            const scale = yscales[name];\n            const [start, end] = scale.r_invert(sy0, sy1);\n            yrs[name] = { start, end };\n        }\n        // OK this sucks we can't set factor independently in each direction. It is used\n        // for GMap plots, and GMap plots always preserve aspect, so effective the value\n        // of 'dimensions' is ignored.\n        const pan_info = { xrs, yrs, factor };\n        this.plot_view.push_state('wheel_pan', { range: pan_info });\n        this.plot_view.update_range(pan_info, false, true);\n        if (this.model.document != null)\n            this.model.document.interactive_start(this.plot_model);\n    }\n}\nWheelPanToolView.__name__ = \"WheelPanToolView\";\nexport class WheelPanTool extends GestureTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Wheel Pan\";\n        this.icon = bk_tool_icon_wheel_pan;\n        this.event_type = \"scroll\";\n        this.default_order = 12;\n    }\n    static init_WheelPanTool() {\n        this.prototype.default_view = WheelPanToolView;\n        this.define({\n            dimension: [p.Dimension, \"width\"],\n        });\n        this.internal({\n            speed: [p.Number, 1 / 1000],\n        });\n        this.register_alias(\"xwheel_pan\", () => new WheelPanTool({ dimension: \"width\" }));\n        this.register_alias(\"ywheel_pan\", () => new WheelPanTool({ dimension: \"height\" }));\n    }\n    get tooltip() {\n        return this._get_dim_tooltip(this.tool_name, this.dimension);\n    }\n}\nWheelPanTool.__name__ = \"WheelPanTool\";\nWheelPanTool.init_WheelPanTool();\n//# sourceMappingURL=wheel_pan_tool.js.map"]},"metadata":{},"sourceType":"module"}