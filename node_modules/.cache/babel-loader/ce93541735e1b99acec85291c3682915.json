{"ast":null,"code":"import { Document } from \"../document\";\nimport { Receiver } from \"../protocol/receiver\";\nimport { logger } from \"../core/logging\";\nimport { size, values } from \"../core/util/object\";\nimport { add_document_standalone } from \"./standalone\";\nimport { _resolve_element, _resolve_root_elements } from \"./dom\";\nimport \"../styles/logo\";\nimport \"../styles/notebook\"; // This exists to allow the @bokeh/jupyter_bokeh extension to store the\n// notebook kernel so that _init_comms can register the comms target.\n// This has to be available at Bokeh.embed.kernels in JupyterLab.\n\nexport const kernels = {};\n\nfunction _handle_notebook_comms(receiver, comm_msg) {\n  if (comm_msg.buffers.length > 0) receiver.consume(comm_msg.buffers[0].buffer);else receiver.consume(comm_msg.content.data);\n  const msg = receiver.message;\n  if (msg != null) this.apply_json_patch(msg.content, msg.buffers);\n}\n\nfunction _init_comms(target, doc) {\n  if (typeof Jupyter !== 'undefined' && Jupyter.notebook.kernel != null) {\n    logger.info(`Registering Jupyter comms for target ${target}`);\n    const comm_manager = Jupyter.notebook.kernel.comm_manager;\n\n    try {\n      comm_manager.register_target(target, comm => {\n        logger.info(`Registering Jupyter comms for target ${target}`);\n        const r = new Receiver();\n        comm.on_msg(_handle_notebook_comms.bind(doc, r));\n      });\n    } catch (e) {\n      logger.warn(`Jupyter comms failed to register. push_notebook() will not function. (exception reported: ${e})`);\n    }\n  } else if (doc.roots()[0].id in kernels) {\n    logger.info(`Registering JupyterLab comms for target ${target}`);\n    const kernel = kernels[doc.roots()[0].id];\n\n    try {\n      kernel.registerCommTarget(target, comm => {\n        logger.info(`Registering JupyterLab comms for target ${target}`);\n        const r = new Receiver();\n        comm.onMsg = _handle_notebook_comms.bind(doc, r);\n      });\n    } catch (e) {\n      logger.warn(`Jupyter comms failed to register. push_notebook() will not function. (exception reported: ${e})`);\n    }\n  } else {\n    console.warn(`Jupyter notebooks comms not available. push_notebook() will not function. If running JupyterLab ensure the latest @bokeh/jupyter_bokeh extension is installed. In an exported notebook this warning is expected.`);\n  }\n}\n\nexport function embed_items_notebook(docs_json, render_items) {\n  if (size(docs_json) != 1) throw new Error(\"embed_items_notebook expects exactly one document in docs_json\");\n  const document = Document.from_json(values(docs_json)[0]);\n\n  for (const item of render_items) {\n    if (item.notebook_comms_target != null) _init_comms(item.notebook_comms_target, document);\n\n    const element = _resolve_element(item);\n\n    const roots = _resolve_root_elements(item);\n\n    add_document_standalone(document, element, roots);\n  }\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/embed/notebook.js"],"names":["Document","Receiver","logger","size","values","add_document_standalone","_resolve_element","_resolve_root_elements","kernels","_handle_notebook_comms","receiver","comm_msg","buffers","length","consume","buffer","content","data","msg","message","apply_json_patch","_init_comms","target","doc","Jupyter","notebook","kernel","info","comm_manager","register_target","comm","r","on_msg","bind","e","warn","roots","id","registerCommTarget","onMsg","console","embed_items_notebook","docs_json","render_items","Error","document","from_json","item","notebook_comms_target","element"],"mappings":"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","sourcesContent":["import { Document } from \"../document\";\nimport { Receiver } from \"../protocol/receiver\";\nimport { logger } from \"../core/logging\";\nimport { size, values } from \"../core/util/object\";\nimport { add_document_standalone } from \"./standalone\";\nimport { _resolve_element, _resolve_root_elements } from \"./dom\";\nimport \"../styles/logo\";\nimport \"../styles/notebook\";\n// This exists to allow the @bokeh/jupyter_bokeh extension to store the\n// notebook kernel so that _init_comms can register the comms target.\n// This has to be available at Bokeh.embed.kernels in JupyterLab.\nexport const kernels = {};\nfunction _handle_notebook_comms(receiver, comm_msg) {\n    if (comm_msg.buffers.length > 0)\n        receiver.consume(comm_msg.buffers[0].buffer);\n    else\n        receiver.consume(comm_msg.content.data);\n    const msg = receiver.message;\n    if (msg != null)\n        this.apply_json_patch(msg.content, msg.buffers);\n}\nfunction _init_comms(target, doc) {\n    if (typeof Jupyter !== 'undefined' && Jupyter.notebook.kernel != null) {\n        logger.info(`Registering Jupyter comms for target ${target}`);\n        const comm_manager = Jupyter.notebook.kernel.comm_manager;\n        try {\n            comm_manager.register_target(target, (comm) => {\n                logger.info(`Registering Jupyter comms for target ${target}`);\n                const r = new Receiver();\n                comm.on_msg(_handle_notebook_comms.bind(doc, r));\n            });\n        }\n        catch (e) {\n            logger.warn(`Jupyter comms failed to register. push_notebook() will not function. (exception reported: ${e})`);\n        }\n    }\n    else if (doc.roots()[0].id in kernels) {\n        logger.info(`Registering JupyterLab comms for target ${target}`);\n        const kernel = kernels[doc.roots()[0].id];\n        try {\n            kernel.registerCommTarget(target, (comm) => {\n                logger.info(`Registering JupyterLab comms for target ${target}`);\n                const r = new Receiver();\n                comm.onMsg = _handle_notebook_comms.bind(doc, r);\n            });\n        }\n        catch (e) {\n            logger.warn(`Jupyter comms failed to register. push_notebook() will not function. (exception reported: ${e})`);\n        }\n    }\n    else {\n        console.warn(`Jupyter notebooks comms not available. push_notebook() will not function. If running JupyterLab ensure the latest @bokeh/jupyter_bokeh extension is installed. In an exported notebook this warning is expected.`);\n    }\n}\nexport function embed_items_notebook(docs_json, render_items) {\n    if (size(docs_json) != 1)\n        throw new Error(\"embed_items_notebook expects exactly one document in docs_json\");\n    const document = Document.from_json(values(docs_json)[0]);\n    for (const item of render_items) {\n        if (item.notebook_comms_target != null)\n            _init_comms(item.notebook_comms_target, document);\n        const element = _resolve_element(item);\n        const roots = _resolve_root_elements(item);\n        add_document_standalone(document, element, roots);\n    }\n}\n//# sourceMappingURL=notebook.js.map"]},"metadata":{},"sourceType":"module"}