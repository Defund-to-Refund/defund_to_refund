{"ast":null,"code":"import * as p from \"../../../core/properties\";\nimport { span } from \"../../../core/dom\";\nimport { Grid as SlickGrid, Group } from '@bokeh/slickgrid';\nimport { TableDataProvider, DTINDEX_NAME, DataTableView, DataTable } from './data_table';\nimport { Model } from \"../../../model\";\n\nfunction groupCellFormatter(_row, _cell, _value, _columnDef, dataContext) {\n  const {\n    collapsed,\n    level,\n    title\n  } = dataContext;\n  const toggle = span({\n    class: `slick-group-toggle ${collapsed ? 'collapsed' : 'expanded'}`,\n    style: {\n      'margin-left': `${level * 15}px`\n    }\n  });\n  const titleElement = span({\n    class: 'slick-group-title',\n    level\n  }, title);\n  return `${toggle.outerHTML}${titleElement.outerHTML}`;\n}\n\nfunction indentFormatter(formatter, indent) {\n  return (row, cell, value, columnDef, dataContext) => {\n    const spacer = span({\n      class: 'slick-group-toggle',\n      style: {\n        'margin-left': `${(indent || 0) * 15}px`\n      }\n    });\n    const formatted = formatter ? formatter(row, cell, value, columnDef, dataContext) : `${value}`;\n    return `${spacer.outerHTML}${formatted && formatted.replace(/^<div/, '<span').replace(/div>$/, 'span>')}`;\n  };\n}\n\nfunction handleGridClick(event, args) {\n  const item = this.getDataItem(args.row);\n\n  if (item instanceof Group && event.target.classList.contains('slick-group-toggle')) {\n    if (item.collapsed) {\n      this.getData().expandGroup(item.groupingKey);\n    } else {\n      this.getData().collapseGroup(item.groupingKey);\n    }\n\n    event.stopImmediatePropagation();\n    event.preventDefault();\n    this.invalidate();\n    this.render();\n  }\n}\n\nexport class GroupingInfo extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_GroupingInfo() {\n    this.define({\n      getter: [p.String, ''],\n      aggregators: [p.Array, []],\n      collapsed: [p.Boolean, false]\n    });\n  }\n\n  get comparer() {\n    return (a, b) => {\n      return a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\n    };\n  }\n\n}\nGroupingInfo.__name__ = \"GroupingInfo\";\nGroupingInfo.init_GroupingInfo();\nexport class DataCubeProvider extends TableDataProvider {\n  constructor(source, view, columns, target) {\n    super(source, view);\n    this.columns = columns;\n    this.groupingInfos = [];\n    this.groupingDelimiter = ':|:';\n    this.target = target;\n  }\n\n  setGrouping(groupingInfos) {\n    this.groupingInfos = groupingInfos;\n    this.toggledGroupsByLevel = groupingInfos.map(() => ({}));\n    this.refresh();\n  }\n\n  extractGroups(rows, parentGroup) {\n    const groups = [];\n    const groupsByValue = new Map();\n    const level = parentGroup ? parentGroup.level + 1 : 0;\n    const {\n      comparer,\n      getter\n    } = this.groupingInfos[level];\n    rows.forEach(row => {\n      const value = this.source.data[getter][row];\n      let group = groupsByValue.get(value);\n\n      if (!group) {\n        const groupingKey = parentGroup ? `${parentGroup.groupingKey}${this.groupingDelimiter}${value}` : `${value}`;\n        group = Object.assign(new Group(), {\n          value,\n          level,\n          groupingKey\n        });\n        groups.push(group);\n        groupsByValue.set(value, group);\n      }\n\n      group.rows.push(row);\n    });\n\n    if (level < this.groupingInfos.length - 1) {\n      groups.forEach(group => {\n        group.groups = this.extractGroups(group.rows, group);\n      });\n    }\n\n    groups.sort(comparer);\n    return groups;\n  }\n\n  calculateTotals(group, aggregators) {\n    const totals = {\n      avg: {},\n      max: {},\n      min: {},\n      sum: {}\n    };\n    const {\n      source: {\n        data\n      }\n    } = this;\n    const keys = Object.keys(data);\n    const items = group.rows.map(i => keys.reduce((o, c) => Object.assign(Object.assign({}, o), {\n      [c]: data[c][i]\n    }), {}));\n    aggregators.forEach(aggregator => {\n      aggregator.init();\n      items.forEach(item => aggregator.accumulate(item));\n      aggregator.storeResult(totals);\n    });\n    return totals;\n  }\n\n  addTotals(groups, level = 0) {\n    const {\n      aggregators,\n      collapsed: groupCollapsed\n    } = this.groupingInfos[level];\n    const toggledGroups = this.toggledGroupsByLevel[level];\n    groups.forEach(group => {\n      if (group.groups) {\n        this.addTotals(group.groups, level + 1);\n      }\n\n      if (aggregators.length && group.rows.length) {\n        group.totals = this.calculateTotals(group, aggregators);\n      }\n\n      group.collapsed = groupCollapsed !== toggledGroups[group.groupingKey];\n      group.title = group.value ? `${group.value}` : \"\";\n    });\n  }\n\n  flattenedGroupedRows(groups, level = 0) {\n    const rows = [];\n    groups.forEach(group => {\n      rows.push(group);\n\n      if (!group.collapsed) {\n        const subRows = group.groups ? this.flattenedGroupedRows(group.groups, level + 1) : group.rows;\n        rows.push(...subRows);\n      }\n    });\n    return rows;\n  }\n\n  refresh() {\n    const groups = this.extractGroups(this.view.indices);\n    const labels = this.source.data[this.columns[0].field];\n\n    if (groups.length) {\n      this.addTotals(groups);\n      this.rows = this.flattenedGroupedRows(groups);\n      this.target.data = {\n        row_indices: this.rows.map(value => value instanceof Group ? value.rows : value),\n        labels: this.rows.map(value => value instanceof Group ? value.title : labels[value])\n      };\n    }\n  }\n\n  getLength() {\n    return this.rows.length;\n  }\n\n  getItem(i) {\n    const item = this.rows[i];\n    const {\n      source: {\n        data\n      }\n    } = this;\n    return item instanceof Group ? item : Object.keys(data).reduce((o, c) => Object.assign(Object.assign({}, o), {\n      [c]: data[c][item]\n    }), {\n      [DTINDEX_NAME]: item\n    });\n  }\n\n  getItemMetadata(i) {\n    const myItem = this.rows[i];\n    const columns = this.columns.slice(1);\n    const aggregators = myItem instanceof Group ? this.groupingInfos[myItem.level].aggregators : [];\n\n    function adapter(column) {\n      const {\n        field: myField,\n        formatter\n      } = column;\n      const aggregator = aggregators.find(({\n        field_\n      }) => field_ === myField);\n\n      if (aggregator) {\n        const {\n          key\n        } = aggregator;\n        return {\n          formatter(row, cell, _value, columnDef, dataContext) {\n            return formatter ? formatter(row, cell, dataContext.totals[key][myField], columnDef, dataContext) : '';\n          }\n\n        };\n      }\n\n      return {};\n    }\n\n    return myItem instanceof Group ? {\n      selectable: false,\n      focusable: false,\n      cssClasses: 'slick-group',\n      columns: [{\n        formatter: groupCellFormatter\n      }, ...columns.map(adapter)]\n    } : {};\n  }\n\n  collapseGroup(groupingKey) {\n    const level = groupingKey.split(this.groupingDelimiter).length - 1;\n    this.toggledGroupsByLevel[level][groupingKey] = !this.groupingInfos[level].collapsed;\n    this.refresh();\n  }\n\n  expandGroup(groupingKey) {\n    const level = groupingKey.split(this.groupingDelimiter).length - 1;\n    this.toggledGroupsByLevel[level][groupingKey] = this.groupingInfos[level].collapsed;\n    this.refresh();\n  }\n\n}\nDataCubeProvider.__name__ = \"DataCubeProvider\";\nexport class DataCubeView extends DataTableView {\n  render() {\n    const options = {\n      enableCellNavigation: this.model.selectable !== false,\n      enableColumnReorder: false,\n      forceFitColumns: this.model.fit_columns,\n      multiColumnSort: false,\n      editable: this.model.editable,\n      autoEdit: false,\n      rowHeight: this.model.row_height\n    };\n    const columns = this.model.columns.map(column => column.toColumn());\n    columns[0].formatter = indentFormatter(columns[0].formatter, this.model.grouping.length);\n    delete columns[0].editor;\n    this.data = new DataCubeProvider(this.model.source, this.model.view, columns, this.model.target);\n    this.data.setGrouping(this.model.grouping);\n    this.el.style.width = `${this.model.width}px`;\n    this.grid = new SlickGrid(this.el, this.data, columns, options);\n    this.grid.onClick.subscribe(handleGridClick);\n  }\n\n}\nDataCubeView.__name__ = \"DataCubeView\";\nexport class DataCube extends DataTable {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_DataCube() {\n    this.prototype.default_view = DataCubeView;\n    this.define({\n      grouping: [p.Array, []],\n      target: [p.Instance]\n    });\n  }\n\n}\nDataCube.__name__ = \"DataCube\";\nDataCube.init_DataCube();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/tables/data_cube.js"],"names":["p","span","Grid","SlickGrid","Group","TableDataProvider","DTINDEX_NAME","DataTableView","DataTable","Model","groupCellFormatter","_row","_cell","_value","_columnDef","dataContext","collapsed","level","title","toggle","class","style","titleElement","outerHTML","indentFormatter","formatter","indent","row","cell","value","columnDef","spacer","formatted","replace","handleGridClick","event","args","item","getDataItem","target","classList","contains","getData","expandGroup","groupingKey","collapseGroup","stopImmediatePropagation","preventDefault","invalidate","render","GroupingInfo","constructor","attrs","init_GroupingInfo","define","getter","String","aggregators","Array","Boolean","comparer","a","b","__name__","DataCubeProvider","source","view","columns","groupingInfos","groupingDelimiter","setGrouping","toggledGroupsByLevel","map","refresh","extractGroups","rows","parentGroup","groups","groupsByValue","Map","forEach","data","group","get","Object","assign","push","set","length","sort","calculateTotals","totals","avg","max","min","sum","keys","items","i","reduce","o","c","aggregator","init","accumulate","storeResult","addTotals","groupCollapsed","toggledGroups","flattenedGroupedRows","subRows","indices","labels","field","row_indices","getLength","getItem","getItemMetadata","myItem","slice","adapter","column","myField","find","field_","key","selectable","focusable","cssClasses","split","DataCubeView","options","enableCellNavigation","model","enableColumnReorder","forceFitColumns","fit_columns","multiColumnSort","editable","autoEdit","rowHeight","row_height","toColumn","grouping","editor","el","width","grid","onClick","subscribe","DataCube","init_DataCube","prototype","default_view","Instance"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,0BAAnB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,SAASC,IAAI,IAAIC,SAAjB,EAA4BC,KAA5B,QAAyC,kBAAzC;AACA,SAASC,iBAAT,EAA4BC,YAA5B,EAA0CC,aAA1C,EAAyDC,SAAzD,QAA0E,cAA1E;AACA,SAASC,KAAT,QAAsB,gBAAtB;;AACA,SAASC,kBAAT,CAA4BC,IAA5B,EAAkCC,KAAlC,EAAyCC,MAAzC,EAAiDC,UAAjD,EAA6DC,WAA7D,EAA0E;AACtE,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,KAAb;AAAoBC,IAAAA;AAApB,MAA8BH,WAApC;AACA,QAAMI,MAAM,GAAGlB,IAAI,CAAC;AAChBmB,IAAAA,KAAK,EAAG,sBAAqBJ,SAAS,GAAG,WAAH,GAAiB,UAAW,EADlD;AAEhBK,IAAAA,KAAK,EAAE;AAAE,qBAAgB,GAAEJ,KAAK,GAAG,EAAG;AAA/B;AAFS,GAAD,CAAnB;AAIA,QAAMK,YAAY,GAAGrB,IAAI,CAAC;AACtBmB,IAAAA,KAAK,EAAE,mBADe;AAEtBH,IAAAA;AAFsB,GAAD,EAGtBC,KAHsB,CAAzB;AAIA,SAAQ,GAAEC,MAAM,CAACI,SAAU,GAAED,YAAY,CAACC,SAAU,EAApD;AACH;;AACD,SAASC,eAAT,CAAyBC,SAAzB,EAAoCC,MAApC,EAA4C;AACxC,SAAO,CAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmBC,SAAnB,EAA8Bf,WAA9B,KAA8C;AACjD,UAAMgB,MAAM,GAAG9B,IAAI,CAAC;AAChBmB,MAAAA,KAAK,EAAE,oBADS;AAEhBC,MAAAA,KAAK,EAAE;AAAE,uBAAgB,GAAE,CAACK,MAAM,IAAI,CAAX,IAAgB,EAAG;AAAvC;AAFS,KAAD,CAAnB;AAIA,UAAMM,SAAS,GAAGP,SAAS,GAAGA,SAAS,CAACE,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmBC,SAAnB,EAA8Bf,WAA9B,CAAZ,GAA0D,GAAEc,KAAM,EAA7F;AACA,WAAQ,GAAEE,MAAM,CAACR,SAAU,GAAES,SAAS,IAAIA,SAAS,CAACC,OAAV,CAAkB,OAAlB,EAA2B,OAA3B,EAAoCA,OAApC,CAA4C,OAA5C,EAAqD,OAArD,CAA8D,EAAxG;AACH,GAPD;AAQH;;AACD,SAASC,eAAT,CAAyBC,KAAzB,EAAgCC,IAAhC,EAAsC;AAClC,QAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBF,IAAI,CAACT,GAAtB,CAAb;;AACA,MAAIU,IAAI,YAAYjC,KAAhB,IAAyB+B,KAAK,CAACI,MAAN,CAAaC,SAAb,CAAuBC,QAAvB,CAAgC,oBAAhC,CAA7B,EAAoF;AAChF,QAAIJ,IAAI,CAACrB,SAAT,EAAoB;AAChB,WAAK0B,OAAL,GAAeC,WAAf,CAA2BN,IAAI,CAACO,WAAhC;AACH,KAFD,MAGK;AACD,WAAKF,OAAL,GAAeG,aAAf,CAA6BR,IAAI,CAACO,WAAlC;AACH;;AACDT,IAAAA,KAAK,CAACW,wBAAN;AACAX,IAAAA,KAAK,CAACY,cAAN;AACA,SAAKC,UAAL;AACA,SAAKC,MAAL;AACH;AACJ;;AACD,OAAO,MAAMC,YAAN,SAA2BzC,KAA3B,CAAiC;AACpC0C,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,iBAAP,GAA2B;AACvB,SAAKC,MAAL,CAAY;AACRC,MAAAA,MAAM,EAAE,CAACvD,CAAC,CAACwD,MAAH,EAAW,EAAX,CADA;AAERC,MAAAA,WAAW,EAAE,CAACzD,CAAC,CAAC0D,KAAH,EAAU,EAAV,CAFL;AAGR1C,MAAAA,SAAS,EAAE,CAAChB,CAAC,CAAC2D,OAAH,EAAY,KAAZ;AAHH,KAAZ;AAKH;;AACD,MAAIC,QAAJ,GAAe;AACX,WAAO,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACb,aAAOD,CAAC,CAAChC,KAAF,KAAYiC,CAAC,CAACjC,KAAd,GAAsB,CAAtB,GAA0BgC,CAAC,CAAChC,KAAF,GAAUiC,CAAC,CAACjC,KAAZ,GAAoB,CAApB,GAAwB,CAAC,CAA1D;AACH,KAFD;AAGH;;AAfmC;AAiBxCqB,YAAY,CAACa,QAAb,GAAwB,cAAxB;AACAb,YAAY,CAACG,iBAAb;AACA,OAAO,MAAMW,gBAAN,SAA+B3D,iBAA/B,CAAiD;AACpD8C,EAAAA,WAAW,CAACc,MAAD,EAASC,IAAT,EAAeC,OAAf,EAAwB5B,MAAxB,EAAgC;AACvC,UAAM0B,MAAN,EAAcC,IAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,iBAAL,GAAyB,KAAzB;AACA,SAAK9B,MAAL,GAAcA,MAAd;AACH;;AACD+B,EAAAA,WAAW,CAACF,aAAD,EAAgB;AACvB,SAAKA,aAAL,GAAqBA,aAArB;AACA,SAAKG,oBAAL,GAA4BH,aAAa,CAACI,GAAd,CAAkB,OAAO,EAAP,CAAlB,CAA5B;AACA,SAAKC,OAAL;AACH;;AACDC,EAAAA,aAAa,CAACC,IAAD,EAAOC,WAAP,EAAoB;AAC7B,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,aAAa,GAAG,IAAIC,GAAJ,EAAtB;AACA,UAAM9D,KAAK,GAAG2D,WAAW,GAAGA,WAAW,CAAC3D,KAAZ,GAAoB,CAAvB,GAA2B,CAApD;AACA,UAAM;AAAE2C,MAAAA,QAAF;AAAYL,MAAAA;AAAZ,QAAuB,KAAKa,aAAL,CAAmBnD,KAAnB,CAA7B;AACA0D,IAAAA,IAAI,CAACK,OAAL,CAAcrD,GAAD,IAAS;AAClB,YAAME,KAAK,GAAG,KAAKoC,MAAL,CAAYgB,IAAZ,CAAiB1B,MAAjB,EAAyB5B,GAAzB,CAAd;AACA,UAAIuD,KAAK,GAAGJ,aAAa,CAACK,GAAd,CAAkBtD,KAAlB,CAAZ;;AACA,UAAI,CAACqD,KAAL,EAAY;AACR,cAAMtC,WAAW,GAAGgC,WAAW,GAAI,GAAEA,WAAW,CAAChC,WAAY,GAAE,KAAKyB,iBAAkB,GAAExC,KAAM,EAA/D,GAAoE,GAAEA,KAAM,EAA3G;AACAqD,QAAAA,KAAK,GAAGE,MAAM,CAACC,MAAP,CAAc,IAAIjF,KAAJ,EAAd,EAA2B;AAAEyB,UAAAA,KAAF;AAASZ,UAAAA,KAAT;AAAgB2B,UAAAA;AAAhB,SAA3B,CAAR;AACAiC,QAAAA,MAAM,CAACS,IAAP,CAAYJ,KAAZ;AACAJ,QAAAA,aAAa,CAACS,GAAd,CAAkB1D,KAAlB,EAAyBqD,KAAzB;AACH;;AACDA,MAAAA,KAAK,CAACP,IAAN,CAAWW,IAAX,CAAgB3D,GAAhB;AACH,KAVD;;AAWA,QAAIV,KAAK,GAAG,KAAKmD,aAAL,CAAmBoB,MAAnB,GAA4B,CAAxC,EAA2C;AACvCX,MAAAA,MAAM,CAACG,OAAP,CAAgBE,KAAD,IAAW;AACtBA,QAAAA,KAAK,CAACL,MAAN,GAAe,KAAKH,aAAL,CAAmBQ,KAAK,CAACP,IAAzB,EAA+BO,KAA/B,CAAf;AACH,OAFD;AAGH;;AACDL,IAAAA,MAAM,CAACY,IAAP,CAAY7B,QAAZ;AACA,WAAOiB,MAAP;AACH;;AACDa,EAAAA,eAAe,CAACR,KAAD,EAAQzB,WAAR,EAAqB;AAChC,UAAMkC,MAAM,GAAG;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,GAAG,EAAE,EAAhB;AAAoBC,MAAAA,GAAG,EAAE,EAAzB;AAA6BC,MAAAA,GAAG,EAAE;AAAlC,KAAf;AACA,UAAM;AAAE9B,MAAAA,MAAM,EAAE;AAAEgB,QAAAA;AAAF;AAAV,QAAuB,IAA7B;AACA,UAAMe,IAAI,GAAGZ,MAAM,CAACY,IAAP,CAAYf,IAAZ,CAAb;AACA,UAAMgB,KAAK,GAAGf,KAAK,CAACP,IAAN,CAAWH,GAAX,CAAe0B,CAAC,IAAIF,IAAI,CAACG,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAWjB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBe,CAAlB,CAAd,EAAoC;AAAE,OAACC,CAAD,GAAKpB,IAAI,CAACoB,CAAD,CAAJ,CAAQH,CAAR;AAAP,KAApC,CAAvB,EAAkF,EAAlF,CAApB,CAAd;AACAzC,IAAAA,WAAW,CAACuB,OAAZ,CAAqBsB,UAAD,IAAgB;AAChCA,MAAAA,UAAU,CAACC,IAAX;AACAN,MAAAA,KAAK,CAACjB,OAAN,CAAe3C,IAAD,IAAUiE,UAAU,CAACE,UAAX,CAAsBnE,IAAtB,CAAxB;AACAiE,MAAAA,UAAU,CAACG,WAAX,CAAuBd,MAAvB;AACH,KAJD;AAKA,WAAOA,MAAP;AACH;;AACDe,EAAAA,SAAS,CAAC7B,MAAD,EAAS5D,KAAK,GAAG,CAAjB,EAAoB;AACzB,UAAM;AAAEwC,MAAAA,WAAF;AAAezC,MAAAA,SAAS,EAAE2F;AAA1B,QAA6C,KAAKvC,aAAL,CAAmBnD,KAAnB,CAAnD;AACA,UAAM2F,aAAa,GAAG,KAAKrC,oBAAL,CAA0BtD,KAA1B,CAAtB;AACA4D,IAAAA,MAAM,CAACG,OAAP,CAAgBE,KAAD,IAAW;AACtB,UAAIA,KAAK,CAACL,MAAV,EAAkB;AACd,aAAK6B,SAAL,CAAexB,KAAK,CAACL,MAArB,EAA6B5D,KAAK,GAAG,CAArC;AACH;;AACD,UAAIwC,WAAW,CAAC+B,MAAZ,IAAsBN,KAAK,CAACP,IAAN,CAAWa,MAArC,EAA6C;AACzCN,QAAAA,KAAK,CAACS,MAAN,GAAe,KAAKD,eAAL,CAAqBR,KAArB,EAA4BzB,WAA5B,CAAf;AACH;;AACDyB,MAAAA,KAAK,CAAClE,SAAN,GAAkB2F,cAAc,KAAKC,aAAa,CAAC1B,KAAK,CAACtC,WAAP,CAAlD;AACAsC,MAAAA,KAAK,CAAChE,KAAN,GAAcgE,KAAK,CAACrD,KAAN,GAAe,GAAEqD,KAAK,CAACrD,KAAM,EAA7B,GAAiC,EAA/C;AACH,KATD;AAUH;;AACDgF,EAAAA,oBAAoB,CAAChC,MAAD,EAAS5D,KAAK,GAAG,CAAjB,EAAoB;AACpC,UAAM0D,IAAI,GAAG,EAAb;AACAE,IAAAA,MAAM,CAACG,OAAP,CAAgBE,KAAD,IAAW;AACtBP,MAAAA,IAAI,CAACW,IAAL,CAAUJ,KAAV;;AACA,UAAI,CAACA,KAAK,CAAClE,SAAX,EAAsB;AAClB,cAAM8F,OAAO,GAAG5B,KAAK,CAACL,MAAN,GACV,KAAKgC,oBAAL,CAA0B3B,KAAK,CAACL,MAAhC,EAAwC5D,KAAK,GAAG,CAAhD,CADU,GAEViE,KAAK,CAACP,IAFZ;AAGAA,QAAAA,IAAI,CAACW,IAAL,CAAU,GAAGwB,OAAb;AACH;AACJ,KARD;AASA,WAAOnC,IAAP;AACH;;AACDF,EAAAA,OAAO,GAAG;AACN,UAAMI,MAAM,GAAG,KAAKH,aAAL,CAAmB,KAAKR,IAAL,CAAU6C,OAA7B,CAAf;AACA,UAAMC,MAAM,GAAG,KAAK/C,MAAL,CAAYgB,IAAZ,CAAiB,KAAKd,OAAL,CAAa,CAAb,EAAgB8C,KAAjC,CAAf;;AACA,QAAIpC,MAAM,CAACW,MAAX,EAAmB;AACf,WAAKkB,SAAL,CAAe7B,MAAf;AACA,WAAKF,IAAL,GAAY,KAAKkC,oBAAL,CAA0BhC,MAA1B,CAAZ;AACA,WAAKtC,MAAL,CAAY0C,IAAZ,GAAmB;AACfiC,QAAAA,WAAW,EAAE,KAAKvC,IAAL,CAAUH,GAAV,CAAc3C,KAAK,IAAIA,KAAK,YAAYzB,KAAjB,GAAyByB,KAAK,CAAC8C,IAA/B,GAAsC9C,KAA7D,CADE;AAEfmF,QAAAA,MAAM,EAAE,KAAKrC,IAAL,CAAUH,GAAV,CAAc3C,KAAK,IAAIA,KAAK,YAAYzB,KAAjB,GAAyByB,KAAK,CAACX,KAA/B,GAAuC8F,MAAM,CAACnF,KAAD,CAApE;AAFO,OAAnB;AAIH;AACJ;;AACDsF,EAAAA,SAAS,GAAG;AACR,WAAO,KAAKxC,IAAL,CAAUa,MAAjB;AACH;;AACD4B,EAAAA,OAAO,CAAClB,CAAD,EAAI;AACP,UAAM7D,IAAI,GAAG,KAAKsC,IAAL,CAAUuB,CAAV,CAAb;AACA,UAAM;AAAEjC,MAAAA,MAAM,EAAE;AAAEgB,QAAAA;AAAF;AAAV,QAAuB,IAA7B;AACA,WAAO5C,IAAI,YAAYjC,KAAhB,GACDiC,IADC,GAED+C,MAAM,CAACY,IAAP,CAAYf,IAAZ,EACGkB,MADH,CACU,CAACC,CAAD,EAAIC,CAAJ,KAAWjB,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBe,CAAlB,CAAd,EAAoC;AAAE,OAACC,CAAD,GAAKpB,IAAI,CAACoB,CAAD,CAAJ,CAAQhE,IAAR;AAAP,KAApC,CADrB,EACmF;AAAE,OAAC/B,YAAD,GAAgB+B;AAAlB,KADnF,CAFN;AAIH;;AACDgF,EAAAA,eAAe,CAACnB,CAAD,EAAI;AACf,UAAMoB,MAAM,GAAG,KAAK3C,IAAL,CAAUuB,CAAV,CAAf;AACA,UAAM/B,OAAO,GAAG,KAAKA,OAAL,CAAaoD,KAAb,CAAmB,CAAnB,CAAhB;AACA,UAAM9D,WAAW,GAAG6D,MAAM,YAAYlH,KAAlB,GACd,KAAKgE,aAAL,CAAmBkD,MAAM,CAACrG,KAA1B,EAAiCwC,WADnB,GAEd,EAFN;;AAGA,aAAS+D,OAAT,CAAiBC,MAAjB,EAAyB;AACrB,YAAM;AAAER,QAAAA,KAAK,EAAES,OAAT;AAAkBjG,QAAAA;AAAlB,UAAgCgG,MAAtC;AACA,YAAMnB,UAAU,GAAG7C,WAAW,CAACkE,IAAZ,CAAiB,CAAC;AAAEC,QAAAA;AAAF,OAAD,KAAgBA,MAAM,KAAKF,OAA5C,CAAnB;;AACA,UAAIpB,UAAJ,EAAgB;AACZ,cAAM;AAAEuB,UAAAA;AAAF,YAAUvB,UAAhB;AACA,eAAO;AACH7E,UAAAA,SAAS,CAACE,GAAD,EAAMC,IAAN,EAAYf,MAAZ,EAAoBiB,SAApB,EAA+Bf,WAA/B,EAA4C;AACjD,mBAAOU,SAAS,GAAGA,SAAS,CAACE,GAAD,EAAMC,IAAN,EAAYb,WAAW,CAAC4E,MAAZ,CAAmBkC,GAAnB,EAAwBH,OAAxB,CAAZ,EAA8C5F,SAA9C,EAAyDf,WAAzD,CAAZ,GAAoF,EAApG;AACH;;AAHE,SAAP;AAKH;;AACD,aAAO,EAAP;AACH;;AACD,WAAOuG,MAAM,YAAYlH,KAAlB,GACD;AACE0H,MAAAA,UAAU,EAAE,KADd;AAEEC,MAAAA,SAAS,EAAE,KAFb;AAGEC,MAAAA,UAAU,EAAE,aAHd;AAIE7D,MAAAA,OAAO,EAAE,CAAC;AAAE1C,QAAAA,SAAS,EAAEf;AAAb,OAAD,EAAoC,GAAGyD,OAAO,CAACK,GAAR,CAAYgD,OAAZ,CAAvC;AAJX,KADC,GAOD,EAPN;AAQH;;AACD3E,EAAAA,aAAa,CAACD,WAAD,EAAc;AACvB,UAAM3B,KAAK,GAAG2B,WAAW,CAACqF,KAAZ,CAAkB,KAAK5D,iBAAvB,EAA0CmB,MAA1C,GAAmD,CAAjE;AACA,SAAKjB,oBAAL,CAA0BtD,KAA1B,EAAiC2B,WAAjC,IAAgD,CAAC,KAAKwB,aAAL,CAAmBnD,KAAnB,EAA0BD,SAA3E;AACA,SAAKyD,OAAL;AACH;;AACD9B,EAAAA,WAAW,CAACC,WAAD,EAAc;AACrB,UAAM3B,KAAK,GAAG2B,WAAW,CAACqF,KAAZ,CAAkB,KAAK5D,iBAAvB,EAA0CmB,MAA1C,GAAmD,CAAjE;AACA,SAAKjB,oBAAL,CAA0BtD,KAA1B,EAAiC2B,WAAjC,IAAgD,KAAKwB,aAAL,CAAmBnD,KAAnB,EAA0BD,SAA1E;AACA,SAAKyD,OAAL;AACH;;AAxImD;AA0IxDT,gBAAgB,CAACD,QAAjB,GAA4B,kBAA5B;AACA,OAAO,MAAMmE,YAAN,SAA2B3H,aAA3B,CAAyC;AAC5C0C,EAAAA,MAAM,GAAG;AACL,UAAMkF,OAAO,GAAG;AACZC,MAAAA,oBAAoB,EAAE,KAAKC,KAAL,CAAWP,UAAX,KAA0B,KADpC;AAEZQ,MAAAA,mBAAmB,EAAE,KAFT;AAGZC,MAAAA,eAAe,EAAE,KAAKF,KAAL,CAAWG,WAHhB;AAIZC,MAAAA,eAAe,EAAE,KAJL;AAKZC,MAAAA,QAAQ,EAAE,KAAKL,KAAL,CAAWK,QALT;AAMZC,MAAAA,QAAQ,EAAE,KANE;AAOZC,MAAAA,SAAS,EAAE,KAAKP,KAAL,CAAWQ;AAPV,KAAhB;AASA,UAAM1E,OAAO,GAAG,KAAKkE,KAAL,CAAWlE,OAAX,CAAmBK,GAAnB,CAAuBiD,MAAM,IAAIA,MAAM,CAACqB,QAAP,EAAjC,CAAhB;AACA3E,IAAAA,OAAO,CAAC,CAAD,CAAP,CAAW1C,SAAX,GAAuBD,eAAe,CAAC2C,OAAO,CAAC,CAAD,CAAP,CAAW1C,SAAZ,EAAuB,KAAK4G,KAAL,CAAWU,QAAX,CAAoBvD,MAA3C,CAAtC;AACA,WAAOrB,OAAO,CAAC,CAAD,CAAP,CAAW6E,MAAlB;AACA,SAAK/D,IAAL,GAAY,IAAIjB,gBAAJ,CAAqB,KAAKqE,KAAL,CAAWpE,MAAhC,EAAwC,KAAKoE,KAAL,CAAWnE,IAAnD,EAAyDC,OAAzD,EAAkE,KAAKkE,KAAL,CAAW9F,MAA7E,CAAZ;AACA,SAAK0C,IAAL,CAAUX,WAAV,CAAsB,KAAK+D,KAAL,CAAWU,QAAjC;AACA,SAAKE,EAAL,CAAQ5H,KAAR,CAAc6H,KAAd,GAAuB,GAAE,KAAKb,KAAL,CAAWa,KAAM,IAA1C;AACA,SAAKC,IAAL,GAAY,IAAIhJ,SAAJ,CAAc,KAAK8I,EAAnB,EAAuB,KAAKhE,IAA5B,EAAkCd,OAAlC,EAA2CgE,OAA3C,CAAZ;AACA,SAAKgB,IAAL,CAAUC,OAAV,CAAkBC,SAAlB,CAA4BnH,eAA5B;AACH;;AAnB2C;AAqBhDgG,YAAY,CAACnE,QAAb,GAAwB,cAAxB;AACA,OAAO,MAAMuF,QAAN,SAAuB9I,SAAvB,CAAiC;AACpC2C,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOmG,aAAP,GAAuB;AACnB,SAAKC,SAAL,CAAeC,YAAf,GAA8BvB,YAA9B;AACA,SAAK5E,MAAL,CAAY;AACRyF,MAAAA,QAAQ,EAAE,CAAC/I,CAAC,CAAC0D,KAAH,EAAU,EAAV,CADF;AAERnB,MAAAA,MAAM,EAAE,CAACvC,CAAC,CAAC0J,QAAH;AAFA,KAAZ;AAIH;;AAVmC;AAYxCJ,QAAQ,CAACvF,QAAT,GAAoB,UAApB;AACAuF,QAAQ,CAACC,aAAT","sourcesContent":["import * as p from \"../../../core/properties\";\nimport { span } from \"../../../core/dom\";\nimport { Grid as SlickGrid, Group } from '@bokeh/slickgrid';\nimport { TableDataProvider, DTINDEX_NAME, DataTableView, DataTable } from './data_table';\nimport { Model } from \"../../../model\";\nfunction groupCellFormatter(_row, _cell, _value, _columnDef, dataContext) {\n    const { collapsed, level, title } = dataContext;\n    const toggle = span({\n        class: `slick-group-toggle ${collapsed ? 'collapsed' : 'expanded'}`,\n        style: { 'margin-left': `${level * 15}px` },\n    });\n    const titleElement = span({\n        class: 'slick-group-title',\n        level,\n    }, title);\n    return `${toggle.outerHTML}${titleElement.outerHTML}`;\n}\nfunction indentFormatter(formatter, indent) {\n    return (row, cell, value, columnDef, dataContext) => {\n        const spacer = span({\n            class: 'slick-group-toggle',\n            style: { 'margin-left': `${(indent || 0) * 15}px` },\n        });\n        const formatted = formatter ? formatter(row, cell, value, columnDef, dataContext) : `${value}`;\n        return `${spacer.outerHTML}${formatted && formatted.replace(/^<div/, '<span').replace(/div>$/, 'span>')}`;\n    };\n}\nfunction handleGridClick(event, args) {\n    const item = this.getDataItem(args.row);\n    if (item instanceof Group && event.target.classList.contains('slick-group-toggle')) {\n        if (item.collapsed) {\n            this.getData().expandGroup(item.groupingKey);\n        }\n        else {\n            this.getData().collapseGroup(item.groupingKey);\n        }\n        event.stopImmediatePropagation();\n        event.preventDefault();\n        this.invalidate();\n        this.render();\n    }\n}\nexport class GroupingInfo extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_GroupingInfo() {\n        this.define({\n            getter: [p.String, ''],\n            aggregators: [p.Array, []],\n            collapsed: [p.Boolean, false],\n        });\n    }\n    get comparer() {\n        return (a, b) => {\n            return a.value === b.value ? 0 : a.value > b.value ? 1 : -1;\n        };\n    }\n}\nGroupingInfo.__name__ = \"GroupingInfo\";\nGroupingInfo.init_GroupingInfo();\nexport class DataCubeProvider extends TableDataProvider {\n    constructor(source, view, columns, target) {\n        super(source, view);\n        this.columns = columns;\n        this.groupingInfos = [];\n        this.groupingDelimiter = ':|:';\n        this.target = target;\n    }\n    setGrouping(groupingInfos) {\n        this.groupingInfos = groupingInfos;\n        this.toggledGroupsByLevel = groupingInfos.map(() => ({}));\n        this.refresh();\n    }\n    extractGroups(rows, parentGroup) {\n        const groups = [];\n        const groupsByValue = new Map();\n        const level = parentGroup ? parentGroup.level + 1 : 0;\n        const { comparer, getter } = this.groupingInfos[level];\n        rows.forEach((row) => {\n            const value = this.source.data[getter][row];\n            let group = groupsByValue.get(value);\n            if (!group) {\n                const groupingKey = parentGroup ? `${parentGroup.groupingKey}${this.groupingDelimiter}${value}` : `${value}`;\n                group = Object.assign(new Group(), { value, level, groupingKey });\n                groups.push(group);\n                groupsByValue.set(value, group);\n            }\n            group.rows.push(row);\n        });\n        if (level < this.groupingInfos.length - 1) {\n            groups.forEach((group) => {\n                group.groups = this.extractGroups(group.rows, group);\n            });\n        }\n        groups.sort(comparer);\n        return groups;\n    }\n    calculateTotals(group, aggregators) {\n        const totals = { avg: {}, max: {}, min: {}, sum: {} };\n        const { source: { data } } = this;\n        const keys = Object.keys(data);\n        const items = group.rows.map(i => keys.reduce((o, c) => (Object.assign(Object.assign({}, o), { [c]: data[c][i] })), {}));\n        aggregators.forEach((aggregator) => {\n            aggregator.init();\n            items.forEach((item) => aggregator.accumulate(item));\n            aggregator.storeResult(totals);\n        });\n        return totals;\n    }\n    addTotals(groups, level = 0) {\n        const { aggregators, collapsed: groupCollapsed } = this.groupingInfos[level];\n        const toggledGroups = this.toggledGroupsByLevel[level];\n        groups.forEach((group) => {\n            if (group.groups) {\n                this.addTotals(group.groups, level + 1);\n            }\n            if (aggregators.length && group.rows.length) {\n                group.totals = this.calculateTotals(group, aggregators);\n            }\n            group.collapsed = groupCollapsed !== toggledGroups[group.groupingKey];\n            group.title = group.value ? `${group.value}` : \"\";\n        });\n    }\n    flattenedGroupedRows(groups, level = 0) {\n        const rows = [];\n        groups.forEach((group) => {\n            rows.push(group);\n            if (!group.collapsed) {\n                const subRows = group.groups\n                    ? this.flattenedGroupedRows(group.groups, level + 1)\n                    : group.rows;\n                rows.push(...subRows);\n            }\n        });\n        return rows;\n    }\n    refresh() {\n        const groups = this.extractGroups(this.view.indices);\n        const labels = this.source.data[this.columns[0].field];\n        if (groups.length) {\n            this.addTotals(groups);\n            this.rows = this.flattenedGroupedRows(groups);\n            this.target.data = {\n                row_indices: this.rows.map(value => value instanceof Group ? value.rows : value),\n                labels: this.rows.map(value => value instanceof Group ? value.title : labels[value]),\n            };\n        }\n    }\n    getLength() {\n        return this.rows.length;\n    }\n    getItem(i) {\n        const item = this.rows[i];\n        const { source: { data } } = this;\n        return item instanceof Group\n            ? item\n            : Object.keys(data)\n                .reduce((o, c) => (Object.assign(Object.assign({}, o), { [c]: data[c][item] })), { [DTINDEX_NAME]: item });\n    }\n    getItemMetadata(i) {\n        const myItem = this.rows[i];\n        const columns = this.columns.slice(1);\n        const aggregators = myItem instanceof Group\n            ? this.groupingInfos[myItem.level].aggregators\n            : [];\n        function adapter(column) {\n            const { field: myField, formatter } = column;\n            const aggregator = aggregators.find(({ field_ }) => field_ === myField);\n            if (aggregator) {\n                const { key } = aggregator;\n                return {\n                    formatter(row, cell, _value, columnDef, dataContext) {\n                        return formatter ? formatter(row, cell, dataContext.totals[key][myField], columnDef, dataContext) : '';\n                    },\n                };\n            }\n            return {};\n        }\n        return myItem instanceof Group\n            ? {\n                selectable: false,\n                focusable: false,\n                cssClasses: 'slick-group',\n                columns: [{ formatter: groupCellFormatter }, ...columns.map(adapter)],\n            }\n            : {};\n    }\n    collapseGroup(groupingKey) {\n        const level = groupingKey.split(this.groupingDelimiter).length - 1;\n        this.toggledGroupsByLevel[level][groupingKey] = !this.groupingInfos[level].collapsed;\n        this.refresh();\n    }\n    expandGroup(groupingKey) {\n        const level = groupingKey.split(this.groupingDelimiter).length - 1;\n        this.toggledGroupsByLevel[level][groupingKey] = this.groupingInfos[level].collapsed;\n        this.refresh();\n    }\n}\nDataCubeProvider.__name__ = \"DataCubeProvider\";\nexport class DataCubeView extends DataTableView {\n    render() {\n        const options = {\n            enableCellNavigation: this.model.selectable !== false,\n            enableColumnReorder: false,\n            forceFitColumns: this.model.fit_columns,\n            multiColumnSort: false,\n            editable: this.model.editable,\n            autoEdit: false,\n            rowHeight: this.model.row_height,\n        };\n        const columns = this.model.columns.map(column => column.toColumn());\n        columns[0].formatter = indentFormatter(columns[0].formatter, this.model.grouping.length);\n        delete columns[0].editor;\n        this.data = new DataCubeProvider(this.model.source, this.model.view, columns, this.model.target);\n        this.data.setGrouping(this.model.grouping);\n        this.el.style.width = `${this.model.width}px`;\n        this.grid = new SlickGrid(this.el, this.data, columns, options);\n        this.grid.onClick.subscribe(handleGridClick);\n    }\n}\nDataCubeView.__name__ = \"DataCubeView\";\nexport class DataCube extends DataTable {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_DataCube() {\n        this.prototype.default_view = DataCubeView;\n        this.define({\n            grouping: [p.Array, []],\n            target: [p.Instance],\n        });\n    }\n}\nDataCube.__name__ = \"DataCube\";\nDataCube.init_DataCube();\n//# sourceMappingURL=data_cube.js.map"]},"metadata":{},"sourceType":"module"}