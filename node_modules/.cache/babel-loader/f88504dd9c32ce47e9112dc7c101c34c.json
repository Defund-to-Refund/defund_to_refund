{"ast":null,"code":"import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nimport { isBoolean, isInteger, isArrayOf } from \"../../core/util/types\";\nimport { range } from \"../../core/util/array\";\nimport { logger } from \"../../core/logging\";\nexport class Filter extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Filter() {\n    this.define({\n      filter: [p.Array, null]\n    });\n  }\n\n  compute_indices(_source) {\n    const filter = this.filter;\n\n    if (filter != null) {\n      if (isArrayOf(filter, isBoolean)) {\n        return range(0, filter.length).filter(i => filter[i] === true);\n      }\n\n      if (isArrayOf(filter, isInteger)) {\n        return filter;\n      }\n\n      logger.warn(`Filter ${this.id}: filter should either be array of only booleans or only integers, defaulting to no filtering`);\n      return null;\n    } else {\n      logger.warn(`Filter ${this.id}: filter was not set to be an array, defaulting to no filtering`);\n      return null;\n    }\n  }\n\n}\nFilter.__name__ = \"Filter\";\nFilter.init_Filter();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/filters/filter.js"],"names":["Model","p","isBoolean","isInteger","isArrayOf","range","logger","Filter","constructor","attrs","init_Filter","define","filter","Array","compute_indices","_source","length","i","warn","id","__name__"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,SAA/B,QAAgD,uBAAhD;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AACA,OAAO,MAAMC,MAAN,SAAqBP,KAArB,CAA2B;AAC9BQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,WAAP,GAAqB;AACjB,SAAKC,MAAL,CAAY;AACRC,MAAAA,MAAM,EAAE,CAACX,CAAC,CAACY,KAAH,EAAU,IAAV;AADA,KAAZ;AAGH;;AACDC,EAAAA,eAAe,CAACC,OAAD,EAAU;AACrB,UAAMH,MAAM,GAAG,KAAKA,MAApB;;AACA,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAChB,UAAIR,SAAS,CAACQ,MAAD,EAASV,SAAT,CAAb,EAAkC;AAC9B,eAAOG,KAAK,CAAC,CAAD,EAAIO,MAAM,CAACI,MAAX,CAAL,CAAwBJ,MAAxB,CAAgCK,CAAD,IAAOL,MAAM,CAACK,CAAD,CAAN,KAAc,IAApD,CAAP;AACH;;AACD,UAAIb,SAAS,CAACQ,MAAD,EAAST,SAAT,CAAb,EAAkC;AAC9B,eAAOS,MAAP;AACH;;AACDN,MAAAA,MAAM,CAACY,IAAP,CAAa,UAAS,KAAKC,EAAG,+FAA9B;AACA,aAAO,IAAP;AACH,KATD,MAUK;AACDb,MAAAA,MAAM,CAACY,IAAP,CAAa,UAAS,KAAKC,EAAG,iEAA9B;AACA,aAAO,IAAP;AACH;AACJ;;AAzB6B;AA2BlCZ,MAAM,CAACa,QAAP,GAAkB,QAAlB;AACAb,MAAM,CAACG,WAAP","sourcesContent":["import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nimport { isBoolean, isInteger, isArrayOf } from \"../../core/util/types\";\nimport { range } from \"../../core/util/array\";\nimport { logger } from \"../../core/logging\";\nexport class Filter extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Filter() {\n        this.define({\n            filter: [p.Array, null],\n        });\n    }\n    compute_indices(_source) {\n        const filter = this.filter;\n        if (filter != null) {\n            if (isArrayOf(filter, isBoolean)) {\n                return range(0, filter.length).filter((i) => filter[i] === true);\n            }\n            if (isArrayOf(filter, isInteger)) {\n                return filter;\n            }\n            logger.warn(`Filter ${this.id}: filter should either be array of only booleans or only integers, defaulting to no filtering`);\n            return null;\n        }\n        else {\n            logger.warn(`Filter ${this.id}: filter was not set to be an array, defaulting to no filtering`);\n            return null;\n        }\n    }\n}\nFilter.__name__ = \"Filter\";\nFilter.init_Filter();\n//# sourceMappingURL=filter.js.map"]},"metadata":{},"sourceType":"module"}