{"ast":null,"code":"import * as Numbro from \"@bokeh/numbro\";\nimport { TickFormatter } from \"./tick_formatter\";\nimport * as p from \"../../core/properties\";\nexport class NumeralTickFormatter extends TickFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_NumeralTickFormatter() {\n    this.define({\n      // TODO (bev) all of these could be tightened up\n      format: [p.String, '0,0'],\n      language: [p.String, 'en'],\n      rounding: [p.RoundingFunction, 'round']\n    });\n  }\n\n  get _rounding_fn() {\n    switch (this.rounding) {\n      case \"round\":\n      case \"nearest\":\n        return Math.round;\n\n      case \"floor\":\n      case \"rounddown\":\n        return Math.floor;\n\n      case \"ceil\":\n      case \"roundup\":\n        return Math.ceil;\n    }\n  }\n\n  doFormat(ticks, _opts) {\n    const {\n      format,\n      language,\n      _rounding_fn\n    } = this;\n    return ticks.map(tick => Numbro.format(tick, format, language, _rounding_fn));\n  }\n\n}\nNumeralTickFormatter.__name__ = \"NumeralTickFormatter\";\nNumeralTickFormatter.init_NumeralTickFormatter();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/formatters/numeral_tick_formatter.js"],"names":["Numbro","TickFormatter","p","NumeralTickFormatter","constructor","attrs","init_NumeralTickFormatter","define","format","String","language","rounding","RoundingFunction","_rounding_fn","Math","round","floor","ceil","doFormat","ticks","_opts","map","tick","__name__"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,eAAxB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,OAAO,MAAMC,oBAAN,SAAmCF,aAAnC,CAAiD;AACpDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,yBAAP,GAAmC;AAC/B,SAAKC,MAAL,CAAY;AACR;AACAC,MAAAA,MAAM,EAAE,CAACN,CAAC,CAACO,MAAH,EAAW,KAAX,CAFA;AAGRC,MAAAA,QAAQ,EAAE,CAACR,CAAC,CAACO,MAAH,EAAW,IAAX,CAHF;AAIRE,MAAAA,QAAQ,EAAE,CAACT,CAAC,CAACU,gBAAH,EAAqB,OAArB;AAJF,KAAZ;AAMH;;AACD,MAAIC,YAAJ,GAAmB;AACf,YAAQ,KAAKF,QAAb;AACI,WAAK,OAAL;AACA,WAAK,SAAL;AACI,eAAOG,IAAI,CAACC,KAAZ;;AACJ,WAAK,OAAL;AACA,WAAK,WAAL;AACI,eAAOD,IAAI,CAACE,KAAZ;;AACJ,WAAK,MAAL;AACA,WAAK,SAAL;AACI,eAAOF,IAAI,CAACG,IAAZ;AATR;AAWH;;AACDC,EAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAe;AACnB,UAAM;AAAEZ,MAAAA,MAAF;AAAUE,MAAAA,QAAV;AAAoBG,MAAAA;AAApB,QAAqC,IAA3C;AACA,WAAOM,KAAK,CAACE,GAAN,CAAWC,IAAD,IAAUtB,MAAM,CAACQ,MAAP,CAAcc,IAAd,EAAoBd,MAApB,EAA4BE,QAA5B,EAAsCG,YAAtC,CAApB,CAAP;AACH;;AA5BmD;AA8BxDV,oBAAoB,CAACoB,QAArB,GAAgC,sBAAhC;AACApB,oBAAoB,CAACG,yBAArB","sourcesContent":["import * as Numbro from \"@bokeh/numbro\";\nimport { TickFormatter } from \"./tick_formatter\";\nimport * as p from \"../../core/properties\";\nexport class NumeralTickFormatter extends TickFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_NumeralTickFormatter() {\n        this.define({\n            // TODO (bev) all of these could be tightened up\n            format: [p.String, '0,0'],\n            language: [p.String, 'en'],\n            rounding: [p.RoundingFunction, 'round'],\n        });\n    }\n    get _rounding_fn() {\n        switch (this.rounding) {\n            case \"round\":\n            case \"nearest\":\n                return Math.round;\n            case \"floor\":\n            case \"rounddown\":\n                return Math.floor;\n            case \"ceil\":\n            case \"roundup\":\n                return Math.ceil;\n        }\n    }\n    doFormat(ticks, _opts) {\n        const { format, language, _rounding_fn } = this;\n        return ticks.map((tick) => Numbro.format(tick, format, language, _rounding_fn));\n    }\n}\nNumeralTickFormatter.__name__ = \"NumeralTickFormatter\";\nNumeralTickFormatter.init_NumeralTickFormatter();\n//# sourceMappingURL=numeral_tick_formatter.js.map"]},"metadata":{},"sourceType":"module"}