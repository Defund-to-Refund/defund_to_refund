{"ast":null,"code":"import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nexport class TileSource extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_TileSource() {\n    this.define({\n      url: [p.String, ''],\n      tile_size: [p.Number, 256],\n      max_zoom: [p.Number, 30],\n      min_zoom: [p.Number, 0],\n      extra_url_vars: [p.Any, {}],\n      attribution: [p.String, ''],\n      x_origin_offset: [p.Number],\n      y_origin_offset: [p.Number],\n      initial_resolution: [p.Number]\n    });\n  }\n\n  initialize() {\n    super.initialize();\n    this.tiles = new Map();\n\n    this._normalize_case();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.change, () => this._clear_cache());\n  }\n\n  string_lookup_replace(str, lookup) {\n    let result_str = str;\n\n    for (const key in lookup) {\n      const value = lookup[key];\n      result_str = result_str.replace(`{${key}}`, value);\n    }\n\n    return result_str;\n  }\n\n  _normalize_case() {\n    /*\n     * Note: should probably be refactored into subclasses.\n     */\n    const url = this.url.replace('{x}', '{X}').replace('{y}', '{Y}').replace('{z}', '{Z}').replace('{q}', '{Q}').replace('{xmin}', '{XMIN}').replace('{ymin}', '{YMIN}').replace('{xmax}', '{XMAX}').replace('{ymax}', '{YMAX}');\n    this.url = url;\n  }\n\n  _clear_cache() {\n    this.tiles = new Map();\n  }\n\n  tile_xyz_to_key(x, y, z) {\n    return `${x}:${y}:${z}`;\n  }\n\n  key_to_tile_xyz(key) {\n    const [x, y, z] = key.split(':').map(c => parseInt(c));\n    return [x, y, z];\n  }\n\n  sort_tiles_from_center(tiles, tile_extent) {\n    const [txmin, tymin, txmax, tymax] = tile_extent;\n    const center_x = (txmax - txmin) / 2 + txmin;\n    const center_y = (tymax - tymin) / 2 + tymin;\n    tiles.sort(function (a, b) {\n      const a_distance = Math.sqrt((center_x - a[0]) ** 2 + (center_y - a[1]) ** 2);\n      const b_distance = Math.sqrt((center_x - b[0]) ** 2 + (center_y - b[1]) ** 2);\n      return a_distance - b_distance;\n    });\n  }\n\n  get_image_url(x, y, z) {\n    const image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n    return image_url.replace(\"{X}\", x.toString()).replace('{Y}', y.toString()).replace(\"{Z}\", z.toString());\n  }\n\n}\nTileSource.__name__ = \"TileSource\";\nTileSource.init_TileSource();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tiles/tile_source.js"],"names":["Model","p","TileSource","constructor","attrs","init_TileSource","define","url","String","tile_size","Number","max_zoom","min_zoom","extra_url_vars","Any","attribution","x_origin_offset","y_origin_offset","initial_resolution","initialize","tiles","Map","_normalize_case","connect_signals","connect","change","_clear_cache","string_lookup_replace","str","lookup","result_str","key","value","replace","tile_xyz_to_key","x","y","z","key_to_tile_xyz","split","map","c","parseInt","sort_tiles_from_center","tile_extent","txmin","tymin","txmax","tymax","center_x","center_y","sort","a","b","a_distance","Math","sqrt","b_distance","get_image_url","image_url","toString","__name__"],"mappings":"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","sourcesContent":["import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nexport class TileSource extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_TileSource() {\n        this.define({\n            url: [p.String, ''],\n            tile_size: [p.Number, 256],\n            max_zoom: [p.Number, 30],\n            min_zoom: [p.Number, 0],\n            extra_url_vars: [p.Any, {}],\n            attribution: [p.String, ''],\n            x_origin_offset: [p.Number],\n            y_origin_offset: [p.Number],\n            initial_resolution: [p.Number],\n        });\n    }\n    initialize() {\n        super.initialize();\n        this.tiles = new Map();\n        this._normalize_case();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.change, () => this._clear_cache());\n    }\n    string_lookup_replace(str, lookup) {\n        let result_str = str;\n        for (const key in lookup) {\n            const value = lookup[key];\n            result_str = result_str.replace(`{${key}}`, value);\n        }\n        return result_str;\n    }\n    _normalize_case() {\n        /*\n         * Note: should probably be refactored into subclasses.\n         */\n        const url = this.url\n            .replace('{x}', '{X}')\n            .replace('{y}', '{Y}')\n            .replace('{z}', '{Z}')\n            .replace('{q}', '{Q}')\n            .replace('{xmin}', '{XMIN}')\n            .replace('{ymin}', '{YMIN}')\n            .replace('{xmax}', '{XMAX}')\n            .replace('{ymax}', '{YMAX}');\n        this.url = url;\n    }\n    _clear_cache() {\n        this.tiles = new Map();\n    }\n    tile_xyz_to_key(x, y, z) {\n        return `${x}:${y}:${z}`;\n    }\n    key_to_tile_xyz(key) {\n        const [x, y, z] = key.split(':').map((c) => parseInt(c));\n        return [x, y, z];\n    }\n    sort_tiles_from_center(tiles, tile_extent) {\n        const [txmin, tymin, txmax, tymax] = tile_extent;\n        const center_x = ((txmax - txmin) / 2) + txmin;\n        const center_y = ((tymax - tymin) / 2) + tymin;\n        tiles.sort(function (a, b) {\n            const a_distance = Math.sqrt((center_x - a[0]) ** 2 + (center_y - a[1]) ** 2);\n            const b_distance = Math.sqrt((center_x - b[0]) ** 2 + (center_y - b[1]) ** 2);\n            return a_distance - b_distance;\n        });\n    }\n    get_image_url(x, y, z) {\n        const image_url = this.string_lookup_replace(this.url, this.extra_url_vars);\n        return image_url\n            .replace(\"{X}\", x.toString())\n            .replace('{Y}', y.toString())\n            .replace(\"{Z}\", z.toString());\n    }\n}\nTileSource.__name__ = \"TileSource\";\nTileSource.init_TileSource();\n//# sourceMappingURL=tile_source.js.map"]},"metadata":{},"sourceType":"module"}