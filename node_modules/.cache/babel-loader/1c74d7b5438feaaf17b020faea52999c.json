{"ast":null,"code":"import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport { generic_line_legend } from \"./utils\";\nimport * as p from \"../../core/properties\";\nexport class RayView extends XYGlyphView {\n  _map_data() {\n    if (this.model.properties.length.units == \"data\") this.slength = this.sdist(this.renderer.xscale, this._x, this._length);else this.slength = this._length;\n  }\n\n  _render(ctx, indices, {\n    sx,\n    sy,\n    slength,\n    _angle\n  }) {\n    if (this.visuals.line.doit) {\n      const width = this.renderer.plot_view.frame._width.value;\n      const height = this.renderer.plot_view.frame._height.value;\n      const inf_len = 2 * (width + height);\n\n      for (let i = 0, end = slength.length; i < end; i++) {\n        if (slength[i] == 0) slength[i] = inf_len;\n      }\n\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + _angle[i] + slength[i])) continue;\n        ctx.translate(sx[i], sy[i]);\n        ctx.rotate(_angle[i]);\n        ctx.beginPath();\n        ctx.moveTo(0, 0);\n        ctx.lineTo(slength[i], 0);\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.stroke();\n        ctx.rotate(-_angle[i]);\n        ctx.translate(-sx[i], -sy[i]);\n      }\n    }\n  }\n\n  draw_legend_for_index(ctx, bbox, index) {\n    generic_line_legend(this.visuals, ctx, bbox, index);\n  }\n\n}\nRayView.__name__ = \"RayView\";\nexport class Ray extends XYGlyph {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Ray() {\n    this.prototype.default_view = RayView;\n    this.mixins(['line']);\n    this.define({\n      length: [p.DistanceSpec],\n      angle: [p.AngleSpec]\n    });\n  }\n\n}\nRay.__name__ = \"Ray\";\nRay.init_Ray();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/ray.js"],"names":["XYGlyph","XYGlyphView","generic_line_legend","p","RayView","_map_data","model","properties","length","units","slength","sdist","renderer","xscale","_x","_length","_render","ctx","indices","sx","sy","_angle","visuals","line","doit","width","plot_view","frame","_width","value","height","_height","inf_len","i","end","isNaN","translate","rotate","beginPath","moveTo","lineTo","set_vectorize","stroke","draw_legend_for_index","bbox","index","__name__","Ray","constructor","attrs","init_Ray","prototype","default_view","mixins","define","DistanceSpec","angle","AngleSpec"],"mappings":"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","sourcesContent":["import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport { generic_line_legend } from \"./utils\";\nimport * as p from \"../../core/properties\";\nexport class RayView extends XYGlyphView {\n    _map_data() {\n        if (this.model.properties.length.units == \"data\")\n            this.slength = this.sdist(this.renderer.xscale, this._x, this._length);\n        else\n            this.slength = this._length;\n    }\n    _render(ctx, indices, { sx, sy, slength, _angle }) {\n        if (this.visuals.line.doit) {\n            const width = this.renderer.plot_view.frame._width.value;\n            const height = this.renderer.plot_view.frame._height.value;\n            const inf_len = 2 * (width + height);\n            for (let i = 0, end = slength.length; i < end; i++) {\n                if (slength[i] == 0)\n                    slength[i] = inf_len;\n            }\n            for (const i of indices) {\n                if (isNaN(sx[i] + sy[i] + _angle[i] + slength[i]))\n                    continue;\n                ctx.translate(sx[i], sy[i]);\n                ctx.rotate(_angle[i]);\n                ctx.beginPath();\n                ctx.moveTo(0, 0);\n                ctx.lineTo(slength[i], 0);\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.stroke();\n                ctx.rotate(-_angle[i]);\n                ctx.translate(-sx[i], -sy[i]);\n            }\n        }\n    }\n    draw_legend_for_index(ctx, bbox, index) {\n        generic_line_legend(this.visuals, ctx, bbox, index);\n    }\n}\nRayView.__name__ = \"RayView\";\nexport class Ray extends XYGlyph {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Ray() {\n        this.prototype.default_view = RayView;\n        this.mixins(['line']);\n        this.define({\n            length: [p.DistanceSpec],\n            angle: [p.AngleSpec],\n        });\n    }\n}\nRay.__name__ = \"Ray\";\nRay.init_Ray();\n//# sourceMappingURL=ray.js.map"]},"metadata":{},"sourceType":"module"}