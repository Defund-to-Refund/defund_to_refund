{"ast":null,"code":"import { concat, union } from \"./array\";\nexport const {\n  keys,\n  assign: extend\n} = Object;\nexport const values = (() => {\n  if (typeof Object.values !== \"undefined\") return Object.values;else {\n    return object => {\n      const keys = Object.keys(object);\n      const length = keys.length;\n      const values = new Array(length);\n\n      for (let i = 0; i < length; i++) {\n        values[i] = object[keys[i]];\n      }\n\n      return values;\n    };\n  }\n})();\nexport function clone(obj) {\n  return Object.assign({}, obj);\n}\nexport function merge(obj1, obj2) {\n  /*\n   * Returns an object with the array values for obj1 and obj2 unioned by key.\n   */\n  const result = Object.create(Object.prototype);\n  const keys = concat([Object.keys(obj1), Object.keys(obj2)]);\n\n  for (const key of keys) {\n    const arr1 = obj1.hasOwnProperty(key) ? obj1[key] : [];\n    const arr2 = obj2.hasOwnProperty(key) ? obj2[key] : [];\n    result[key] = union(arr1, arr2);\n  }\n\n  return result;\n}\nexport function size(obj) {\n  return Object.keys(obj).length;\n}\nexport function isEmpty(obj) {\n  return size(obj) === 0;\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/util/object.js"],"names":["concat","union","keys","assign","extend","Object","values","object","length","Array","i","clone","obj","merge","obj1","obj2","result","create","prototype","key","arr1","hasOwnProperty","arr2","size","isEmpty"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,KAAjB,QAA8B,SAA9B;AACA,OAAO,MAAM;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,MAAM,EAAEC;AAAhB,IAA2BC,MAAjC;AACP,OAAO,MAAMC,MAAM,GAAG,CAAC,MAAM;AACzB,MAAI,OAAOD,MAAM,CAACC,MAAd,KAAyB,WAA7B,EACI,OAAOD,MAAM,CAACC,MAAd,CADJ,KAEK;AACD,WAAQC,MAAD,IAAY;AACf,YAAML,IAAI,GAAGG,MAAM,CAACH,IAAP,CAAYK,MAAZ,CAAb;AACA,YAAMC,MAAM,GAAGN,IAAI,CAACM,MAApB;AACA,YAAMF,MAAM,GAAG,IAAIG,KAAJ,CAAUD,MAAV,CAAf;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAApB,EAA4BE,CAAC,EAA7B,EAAiC;AAC7BJ,QAAAA,MAAM,CAACI,CAAD,CAAN,GAAYH,MAAM,CAACL,IAAI,CAACQ,CAAD,CAAL,CAAlB;AACH;;AACD,aAAOJ,MAAP;AACH,KARD;AASH;AACJ,CAdqB,GAAf;AAeP,OAAO,SAASK,KAAT,CAAeC,GAAf,EAAoB;AACvB,SAAOP,MAAM,CAACF,MAAP,CAAc,EAAd,EAAkBS,GAAlB,CAAP;AACH;AACD,OAAO,SAASC,KAAT,CAAeC,IAAf,EAAqBC,IAArB,EAA2B;AAC9B;;;AAGA,QAAMC,MAAM,GAAGX,MAAM,CAACY,MAAP,CAAcZ,MAAM,CAACa,SAArB,CAAf;AACA,QAAMhB,IAAI,GAAGF,MAAM,CAAC,CAACK,MAAM,CAACH,IAAP,CAAYY,IAAZ,CAAD,EAAoBT,MAAM,CAACH,IAAP,CAAYa,IAAZ,CAApB,CAAD,CAAnB;;AACA,OAAK,MAAMI,GAAX,IAAkBjB,IAAlB,EAAwB;AACpB,UAAMkB,IAAI,GAAGN,IAAI,CAACO,cAAL,CAAoBF,GAApB,IAA2BL,IAAI,CAACK,GAAD,CAA/B,GAAuC,EAApD;AACA,UAAMG,IAAI,GAAGP,IAAI,CAACM,cAAL,CAAoBF,GAApB,IAA2BJ,IAAI,CAACI,GAAD,CAA/B,GAAuC,EAApD;AACAH,IAAAA,MAAM,CAACG,GAAD,CAAN,GAAclB,KAAK,CAACmB,IAAD,EAAOE,IAAP,CAAnB;AACH;;AACD,SAAON,MAAP;AACH;AACD,OAAO,SAASO,IAAT,CAAcX,GAAd,EAAmB;AACtB,SAAOP,MAAM,CAACH,IAAP,CAAYU,GAAZ,EAAiBJ,MAAxB;AACH;AACD,OAAO,SAASgB,OAAT,CAAiBZ,GAAjB,EAAsB;AACzB,SAAOW,IAAI,CAACX,GAAD,CAAJ,KAAc,CAArB;AACH","sourcesContent":["import { concat, union } from \"./array\";\nexport const { keys, assign: extend } = Object;\nexport const values = (() => {\n    if (typeof Object.values !== \"undefined\")\n        return Object.values;\n    else {\n        return (object) => {\n            const keys = Object.keys(object);\n            const length = keys.length;\n            const values = new Array(length);\n            for (let i = 0; i < length; i++) {\n                values[i] = object[keys[i]];\n            }\n            return values;\n        };\n    }\n})();\nexport function clone(obj) {\n    return Object.assign({}, obj);\n}\nexport function merge(obj1, obj2) {\n    /*\n     * Returns an object with the array values for obj1 and obj2 unioned by key.\n     */\n    const result = Object.create(Object.prototype);\n    const keys = concat([Object.keys(obj1), Object.keys(obj2)]);\n    for (const key of keys) {\n        const arr1 = obj1.hasOwnProperty(key) ? obj1[key] : [];\n        const arr2 = obj2.hasOwnProperty(key) ? obj2[key] : [];\n        result[key] = union(arr1, arr2);\n    }\n    return result;\n}\nexport function size(obj) {\n    return Object.keys(obj).length;\n}\nexport function isEmpty(obj) {\n    return size(obj) === 0;\n}\n//# sourceMappingURL=object.js.map"]},"metadata":{},"sourceType":"module"}