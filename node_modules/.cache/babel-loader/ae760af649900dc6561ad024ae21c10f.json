{"ast":null,"code":"import { isObject } from \"./core/util/types\";\nimport { HasProps } from \"./core/has_props\";\nexport const overrides = {};\n\nconst _all_models = new Map();\n\nexport const Models = name => {\n  const model = overrides[name] || _all_models.get(name);\n\n  if (model == null) {\n    throw new Error(`Model '${name}' does not exist. This could be due to a widget or a custom model not being registered before first usage.`);\n  }\n\n  return model;\n};\n\nModels.register = (name, model) => {\n  overrides[name] = model;\n};\n\nModels.unregister = name => {\n  delete overrides[name];\n};\n\nfunction is_HasProps(obj) {\n  return isObject(obj) && obj.prototype instanceof HasProps;\n}\n\nModels.register_models = (models, force = false, errorFn) => {\n  if (models == null) return;\n\n  for (const name in models) {\n    const model = models[name];\n\n    if (is_HasProps(model)) {\n      const qualified = model.__qualified__;\n      if (force || !_all_models.has(qualified)) _all_models.set(qualified, model);else if (errorFn != null) errorFn(qualified);else console.warn(`Model '${qualified}' was already registered`);\n    }\n  }\n};\n\nexport const register_models = Models.register_models;\n\nModels.registered_names = () => Array.from(_all_models.keys()); // TODO: this doesn't belong here, but it's easier this way for backwards compatibility\n\n\nimport * as AllModels from \"./models\";\nregister_models(AllModels);","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/base.js"],"names":["isObject","HasProps","overrides","_all_models","Map","Models","name","model","get","Error","register","unregister","is_HasProps","obj","prototype","register_models","models","force","errorFn","qualified","__qualified__","has","set","console","warn","registered_names","Array","from","keys","AllModels"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;AACA,OAAO,MAAMC,SAAS,GAAG,EAAlB;;AACP,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;;AACA,OAAO,MAAMC,MAAM,GAAKC,IAAD,IAAU;AAC7B,QAAMC,KAAK,GAAGL,SAAS,CAACI,IAAD,CAAT,IAAmBH,WAAW,CAACK,GAAZ,CAAgBF,IAAhB,CAAjC;;AACA,MAAIC,KAAK,IAAI,IAAb,EAAmB;AACf,UAAM,IAAIE,KAAJ,CAAW,UAASH,IAAK,4GAAzB,CAAN;AACH;;AACD,SAAOC,KAAP;AACH,CANM;;AAOPF,MAAM,CAACK,QAAP,GAAkB,CAACJ,IAAD,EAAOC,KAAP,KAAiB;AAC/BL,EAAAA,SAAS,CAACI,IAAD,CAAT,GAAkBC,KAAlB;AACH,CAFD;;AAGAF,MAAM,CAACM,UAAP,GAAqBL,IAAD,IAAU;AAC1B,SAAOJ,SAAS,CAACI,IAAD,CAAhB;AACH,CAFD;;AAGA,SAASM,WAAT,CAAqBC,GAArB,EAA0B;AACtB,SAAOb,QAAQ,CAACa,GAAD,CAAR,IAAiBA,GAAG,CAACC,SAAJ,YAAyBb,QAAjD;AACH;;AACDI,MAAM,CAACU,eAAP,GAAyB,CAACC,MAAD,EAASC,KAAK,GAAG,KAAjB,EAAwBC,OAAxB,KAAoC;AACzD,MAAIF,MAAM,IAAI,IAAd,EACI;;AACJ,OAAK,MAAMV,IAAX,IAAmBU,MAAnB,EAA2B;AACvB,UAAMT,KAAK,GAAGS,MAAM,CAACV,IAAD,CAApB;;AACA,QAAIM,WAAW,CAACL,KAAD,CAAf,EAAwB;AACpB,YAAMY,SAAS,GAAGZ,KAAK,CAACa,aAAxB;AACA,UAAIH,KAAK,IAAI,CAACd,WAAW,CAACkB,GAAZ,CAAgBF,SAAhB,CAAd,EACIhB,WAAW,CAACmB,GAAZ,CAAgBH,SAAhB,EAA2BZ,KAA3B,EADJ,KAEK,IAAIW,OAAO,IAAI,IAAf,EACDA,OAAO,CAACC,SAAD,CAAP,CADC,KAGDI,OAAO,CAACC,IAAR,CAAc,UAASL,SAAU,0BAAjC;AACP;AACJ;AACJ,CAfD;;AAgBA,OAAO,MAAMJ,eAAe,GAAGV,MAAM,CAACU,eAA/B;;AACPV,MAAM,CAACoB,gBAAP,GAA0B,MAAMC,KAAK,CAACC,IAAN,CAAWxB,WAAW,CAACyB,IAAZ,EAAX,CAAhC,C,CACA;;;AACA,OAAO,KAAKC,SAAZ,MAA2B,UAA3B;AACAd,eAAe,CAACc,SAAD,CAAf","sourcesContent":["import { isObject } from \"./core/util/types\";\nimport { HasProps } from \"./core/has_props\";\nexport const overrides = {};\nconst _all_models = new Map();\nexport const Models = ((name) => {\n    const model = overrides[name] || _all_models.get(name);\n    if (model == null) {\n        throw new Error(`Model '${name}' does not exist. This could be due to a widget or a custom model not being registered before first usage.`);\n    }\n    return model;\n});\nModels.register = (name, model) => {\n    overrides[name] = model;\n};\nModels.unregister = (name) => {\n    delete overrides[name];\n};\nfunction is_HasProps(obj) {\n    return isObject(obj) && obj.prototype instanceof HasProps;\n}\nModels.register_models = (models, force = false, errorFn) => {\n    if (models == null)\n        return;\n    for (const name in models) {\n        const model = models[name];\n        if (is_HasProps(model)) {\n            const qualified = model.__qualified__;\n            if (force || !_all_models.has(qualified))\n                _all_models.set(qualified, model);\n            else if (errorFn != null)\n                errorFn(qualified);\n            else\n                console.warn(`Model '${qualified}' was already registered`);\n        }\n    }\n};\nexport const register_models = Models.register_models;\nModels.registered_names = () => Array.from(_all_models.keys());\n// TODO: this doesn't belong here, but it's easier this way for backwards compatibility\nimport * as AllModels from \"./models\";\nregister_models(AllModels);\n//# sourceMappingURL=base.js.map"]},"metadata":{},"sourceType":"module"}