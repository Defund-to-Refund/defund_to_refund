{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport * as p from \"../../core/properties\";\nimport { Signal0 } from \"../../core/signaling\";\nimport { measure_font } from \"../../core/util/text\";\nimport { BBox } from \"../../core/util/bbox\";\nimport { max, every } from \"../../core/util/array\";\nimport { values } from \"../../core/util/object\";\nimport { isString, isArray } from \"../../core/util/types\";\nimport { unreachable } from \"../../core/util/assert\";\nexport class LegendView extends AnnotationView {\n  cursor(_sx, _sy) {\n    return this.model.click_policy == \"none\" ? null : \"pointer\";\n  }\n\n  get legend_padding() {\n    return this.visuals.border_line.line_color.value() != null ? this.model.padding : 0;\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.change, () => this.plot_view.request_render());\n    this.connect(this.model.item_change, () => this.plot_view.request_render());\n  }\n\n  compute_legend_bbox() {\n    const legend_names = this.model.get_legend_names();\n    const {\n      glyph_height,\n      glyph_width\n    } = this.model;\n    const {\n      label_height,\n      label_width\n    } = this.model;\n    this.max_label_height = max([measure_font(this.visuals.label_text.font_value()).height, label_height, glyph_height]); // this is to measure text properties\n\n    const {\n      ctx\n    } = this.plot_view.canvas_view;\n    ctx.save();\n    this.visuals.label_text.set_value(ctx);\n    this.text_widths = {};\n\n    for (const name of legend_names) {\n      this.text_widths[name] = max([ctx.measureText(name).width, label_width]);\n    }\n\n    this.visuals.title_text.set_value(ctx);\n    this.title_height = this.model.title ? measure_font(this.visuals.title_text.font_value()).height + this.model.title_standoff : 0;\n    this.title_width = this.model.title ? ctx.measureText(this.model.title).width : 0;\n    ctx.restore();\n    const max_label_width = Math.max(max(values(this.text_widths)), 0);\n    const legend_margin = this.model.margin;\n    const {\n      legend_padding\n    } = this;\n    const legend_spacing = this.model.spacing;\n    const {\n      label_standoff\n    } = this.model;\n    let legend_height, legend_width;\n\n    if (this.model.orientation == \"vertical\") {\n      legend_height = legend_names.length * this.max_label_height + Math.max(legend_names.length - 1, 0) * legend_spacing + 2 * legend_padding + this.title_height;\n      legend_width = max([max_label_width + glyph_width + label_standoff + 2 * legend_padding, this.title_width + 2 * legend_padding]);\n    } else {\n      let item_width = 2 * legend_padding + Math.max(legend_names.length - 1, 0) * legend_spacing;\n\n      for (const name in this.text_widths) {\n        const width = this.text_widths[name];\n        item_width += max([width, label_width]) + glyph_width + label_standoff;\n      }\n\n      legend_width = max([this.title_width + 2 * legend_padding, item_width]);\n      legend_height = this.max_label_height + this.title_height + 2 * legend_padding;\n    }\n\n    const panel = this.panel != null ? this.panel : this.plot_view.frame;\n    const [hr, vr] = panel.bbox.ranges;\n    const {\n      location\n    } = this.model;\n    let sx, sy;\n\n    if (isString(location)) {\n      switch (location) {\n        case 'top_left':\n          sx = hr.start + legend_margin;\n          sy = vr.start + legend_margin;\n          break;\n\n        case 'top_center':\n          sx = (hr.end + hr.start) / 2 - legend_width / 2;\n          sy = vr.start + legend_margin;\n          break;\n\n        case 'top_right':\n          sx = hr.end - legend_margin - legend_width;\n          sy = vr.start + legend_margin;\n          break;\n\n        case 'bottom_right':\n          sx = hr.end - legend_margin - legend_width;\n          sy = vr.end - legend_margin - legend_height;\n          break;\n\n        case 'bottom_center':\n          sx = (hr.end + hr.start) / 2 - legend_width / 2;\n          sy = vr.end - legend_margin - legend_height;\n          break;\n\n        case 'bottom_left':\n          sx = hr.start + legend_margin;\n          sy = vr.end - legend_margin - legend_height;\n          break;\n\n        case 'center_left':\n          sx = hr.start + legend_margin;\n          sy = (vr.end + vr.start) / 2 - legend_height / 2;\n          break;\n\n        case 'center':\n          sx = (hr.end + hr.start) / 2 - legend_width / 2;\n          sy = (vr.end + vr.start) / 2 - legend_height / 2;\n          break;\n\n        case 'center_right':\n          sx = hr.end - legend_margin - legend_width;\n          sy = (vr.end + vr.start) / 2 - legend_height / 2;\n          break;\n      }\n    } else if (isArray(location) && location.length == 2) {\n      const [vx, vy] = location;\n      sx = panel.xview.compute(vx);\n      sy = panel.yview.compute(vy) - legend_height;\n    } else unreachable();\n\n    return new BBox({\n      left: sx,\n      top: sy,\n      width: legend_width,\n      height: legend_height\n    });\n  }\n\n  interactive_bbox() {\n    return this.compute_legend_bbox();\n  }\n\n  interactive_hit(sx, sy) {\n    const bbox = this.interactive_bbox();\n    return bbox.contains(sx, sy);\n  }\n\n  on_hit(sx, sy) {\n    let yoffset;\n    const {\n      glyph_width\n    } = this.model;\n    const {\n      legend_padding\n    } = this;\n    const legend_spacing = this.model.spacing;\n    const {\n      label_standoff\n    } = this.model;\n    let xoffset = yoffset = legend_padding;\n    const legend_bbox = this.compute_legend_bbox();\n    const vertical = this.model.orientation == \"vertical\";\n\n    for (const item of this.model.items) {\n      const labels = item.get_labels_list_from_label_prop();\n\n      for (const label of labels) {\n        const x1 = legend_bbox.x + xoffset;\n        const y1 = legend_bbox.y + yoffset + this.title_height;\n        let w, h;\n        if (vertical) [w, h] = [legend_bbox.width - 2 * legend_padding, this.max_label_height];else [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height];\n        const bbox = new BBox({\n          left: x1,\n          top: y1,\n          width: w,\n          height: h\n        });\n\n        if (bbox.contains(sx, sy)) {\n          switch (this.model.click_policy) {\n            case \"hide\":\n              {\n                for (const r of item.renderers) r.visible = !r.visible;\n\n                break;\n              }\n\n            case \"mute\":\n              {\n                for (const r of item.renderers) r.muted = !r.muted;\n\n                break;\n              }\n          }\n\n          return true;\n        }\n\n        if (vertical) yoffset += this.max_label_height + legend_spacing;else xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n      }\n    }\n\n    return false;\n  }\n\n  render() {\n    if (!this.model.visible) return;\n    if (this.model.items.length == 0) return; // set a backref on render so that items can later signal item_change upates\n    // on the model to trigger a re-render\n\n    for (const item of this.model.items) {\n      item.legend = this.model;\n    }\n\n    const {\n      ctx\n    } = this.plot_view.canvas_view;\n    const bbox = this.compute_legend_bbox();\n    ctx.save();\n\n    this._draw_legend_box(ctx, bbox);\n\n    this._draw_legend_items(ctx, bbox);\n\n    if (this.model.title) this._draw_title(ctx, bbox);\n    ctx.restore();\n  }\n\n  _draw_legend_box(ctx, bbox) {\n    ctx.beginPath();\n    ctx.rect(bbox.x, bbox.y, bbox.width, bbox.height);\n    this.visuals.background_fill.set_value(ctx);\n    ctx.fill();\n\n    if (this.visuals.border_line.doit) {\n      this.visuals.border_line.set_value(ctx);\n      ctx.stroke();\n    }\n  }\n\n  _draw_legend_items(ctx, bbox) {\n    const {\n      glyph_width,\n      glyph_height\n    } = this.model;\n    const {\n      legend_padding\n    } = this;\n    const legend_spacing = this.model.spacing;\n    const {\n      label_standoff\n    } = this.model;\n    let xoffset = legend_padding;\n    let yoffset = legend_padding;\n    const vertical = this.model.orientation == \"vertical\";\n\n    for (const item of this.model.items) {\n      const labels = item.get_labels_list_from_label_prop();\n      const field = item.get_field_from_label_prop();\n      if (labels.length == 0) continue;\n\n      const active = (() => {\n        switch (this.model.click_policy) {\n          case \"none\":\n            return true;\n\n          case \"hide\":\n            return every(item.renderers, r => r.visible);\n\n          case \"mute\":\n            return every(item.renderers, r => !r.muted);\n        }\n      })();\n\n      for (const label of labels) {\n        const x1 = bbox.x + xoffset;\n        const y1 = bbox.y + yoffset + this.title_height;\n        const x2 = x1 + glyph_width;\n        const y2 = y1 + glyph_height;\n        if (vertical) yoffset += this.max_label_height + legend_spacing;else xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n        this.visuals.label_text.set_value(ctx);\n        ctx.fillText(label, x2 + label_standoff, y1 + this.max_label_height / 2.0);\n\n        for (const r of item.renderers) {\n          const view = this.plot_view.renderer_views[r.id];\n          view.draw_legend(ctx, x1, x2, y1, y2, field, label, item.index);\n        }\n\n        if (!active) {\n          let w, h;\n          if (vertical) [w, h] = [bbox.width - 2 * legend_padding, this.max_label_height];else [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height];\n          ctx.beginPath();\n          ctx.rect(x1, y1, w, h);\n          this.visuals.inactive_fill.set_value(ctx);\n          ctx.fill();\n        }\n      }\n    }\n  }\n\n  _draw_title(ctx, bbox) {\n    if (!this.visuals.title_text.doit) return;\n    ctx.save();\n    ctx.translate(bbox.x0, bbox.y0 + this.title_height);\n    this.visuals.title_text.set_value(ctx);\n    ctx.fillText(this.model.title, this.legend_padding, this.legend_padding - this.model.title_standoff);\n    ctx.restore();\n  }\n\n  _get_size() {\n    const {\n      width,\n      height\n    } = this.compute_legend_bbox();\n    return {\n      width: width + 2 * this.model.margin,\n      height: height + 2 * this.model.margin\n    };\n  }\n\n}\nLegendView.__name__ = \"LegendView\";\nexport class Legend extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  initialize() {\n    super.initialize();\n    this.item_change = new Signal0(this, \"item_change\");\n  }\n\n  static init_Legend() {\n    this.prototype.default_view = LegendView;\n    this.mixins(['text:label_', 'text:title_', 'fill:inactive_', 'line:border_', 'fill:background_']);\n    this.define({\n      orientation: [p.Orientation, 'vertical'],\n      location: [p.Any, 'top_right'],\n      title: [p.String],\n      title_standoff: [p.Number, 5],\n      label_standoff: [p.Number, 5],\n      glyph_height: [p.Number, 20],\n      glyph_width: [p.Number, 20],\n      label_height: [p.Number, 20],\n      label_width: [p.Number, 20],\n      margin: [p.Number, 10],\n      padding: [p.Number, 10],\n      spacing: [p.Number, 3],\n      items: [p.Array, []],\n      click_policy: [p.Any, \"none\"]\n    });\n    this.override({\n      border_line_color: \"#e5e5e5\",\n      border_line_alpha: 0.5,\n      border_line_width: 1,\n      background_fill_color: \"#ffffff\",\n      background_fill_alpha: 0.95,\n      inactive_fill_color: \"white\",\n      inactive_fill_alpha: 0.7,\n      label_text_font_size: \"13px\",\n      label_text_baseline: \"middle\",\n      title_text_font_size: \"13px\",\n      title_text_font_style: \"italic\"\n    });\n  }\n\n  get_legend_names() {\n    const legend_names = [];\n\n    for (const item of this.items) {\n      const labels = item.get_labels_list_from_label_prop();\n      legend_names.push(...labels);\n    }\n\n    return legend_names;\n  }\n\n}\nLegend.__name__ = \"Legend\";\nLegend.init_Legend();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/legend.js"],"names":["Annotation","AnnotationView","p","Signal0","measure_font","BBox","max","every","values","isString","isArray","unreachable","LegendView","cursor","_sx","_sy","model","click_policy","legend_padding","visuals","border_line","line_color","value","padding","connect_signals","connect","change","plot_view","request_render","item_change","compute_legend_bbox","legend_names","get_legend_names","glyph_height","glyph_width","label_height","label_width","max_label_height","label_text","font_value","height","ctx","canvas_view","save","set_value","text_widths","name","measureText","width","title_text","title_height","title","title_standoff","title_width","restore","max_label_width","Math","legend_margin","margin","legend_spacing","spacing","label_standoff","legend_height","legend_width","orientation","length","item_width","panel","frame","hr","vr","bbox","ranges","location","sx","sy","start","end","vx","vy","xview","compute","yview","left","top","interactive_bbox","interactive_hit","contains","on_hit","yoffset","xoffset","legend_bbox","vertical","item","items","labels","get_labels_list_from_label_prop","label","x1","x","y1","y","w","h","r","renderers","visible","muted","render","legend","_draw_legend_box","_draw_legend_items","_draw_title","beginPath","rect","background_fill","fill","doit","stroke","field","get_field_from_label_prop","active","x2","y2","fillText","view","renderer_views","id","draw_legend","index","inactive_fill","translate","x0","y0","_get_size","__name__","Legend","constructor","attrs","initialize","init_Legend","prototype","default_view","mixins","define","Orientation","Any","String","Number","Array","override","border_line_color","border_line_alpha","border_line_width","background_fill_color","background_fill_alpha","inactive_fill_color","inactive_fill_alpha","label_text_font_size","label_text_baseline","title_text_font_size","title_text_font_style","push"],"mappings":"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","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport * as p from \"../../core/properties\";\nimport { Signal0 } from \"../../core/signaling\";\nimport { measure_font } from \"../../core/util/text\";\nimport { BBox } from \"../../core/util/bbox\";\nimport { max, every } from \"../../core/util/array\";\nimport { values } from \"../../core/util/object\";\nimport { isString, isArray } from \"../../core/util/types\";\nimport { unreachable } from \"../../core/util/assert\";\nexport class LegendView extends AnnotationView {\n    cursor(_sx, _sy) {\n        return this.model.click_policy == \"none\" ? null : \"pointer\";\n    }\n    get legend_padding() {\n        return this.visuals.border_line.line_color.value() != null ? this.model.padding : 0;\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.change, () => this.plot_view.request_render());\n        this.connect(this.model.item_change, () => this.plot_view.request_render());\n    }\n    compute_legend_bbox() {\n        const legend_names = this.model.get_legend_names();\n        const { glyph_height, glyph_width } = this.model;\n        const { label_height, label_width } = this.model;\n        this.max_label_height = max([measure_font(this.visuals.label_text.font_value()).height, label_height, glyph_height]);\n        // this is to measure text properties\n        const { ctx } = this.plot_view.canvas_view;\n        ctx.save();\n        this.visuals.label_text.set_value(ctx);\n        this.text_widths = {};\n        for (const name of legend_names) {\n            this.text_widths[name] = max([ctx.measureText(name).width, label_width]);\n        }\n        this.visuals.title_text.set_value(ctx);\n        this.title_height = this.model.title ? measure_font(this.visuals.title_text.font_value()).height + this.model.title_standoff : 0;\n        this.title_width = this.model.title ? ctx.measureText(this.model.title).width : 0;\n        ctx.restore();\n        const max_label_width = Math.max(max(values(this.text_widths)), 0);\n        const legend_margin = this.model.margin;\n        const { legend_padding } = this;\n        const legend_spacing = this.model.spacing;\n        const { label_standoff } = this.model;\n        let legend_height, legend_width;\n        if (this.model.orientation == \"vertical\") {\n            legend_height = legend_names.length * this.max_label_height + Math.max(legend_names.length - 1, 0) * legend_spacing + 2 * legend_padding + this.title_height;\n            legend_width = max([(max_label_width + glyph_width + label_standoff + 2 * legend_padding), this.title_width + 2 * legend_padding]);\n        }\n        else {\n            let item_width = 2 * legend_padding + Math.max(legend_names.length - 1, 0) * legend_spacing;\n            for (const name in this.text_widths) {\n                const width = this.text_widths[name];\n                item_width += max([width, label_width]) + glyph_width + label_standoff;\n            }\n            legend_width = max([this.title_width + 2 * legend_padding, item_width]);\n            legend_height = this.max_label_height + this.title_height + 2 * legend_padding;\n        }\n        const panel = this.panel != null ? this.panel : this.plot_view.frame;\n        const [hr, vr] = panel.bbox.ranges;\n        const { location } = this.model;\n        let sx, sy;\n        if (isString(location)) {\n            switch (location) {\n                case 'top_left':\n                    sx = hr.start + legend_margin;\n                    sy = vr.start + legend_margin;\n                    break;\n                case 'top_center':\n                    sx = (hr.end + hr.start) / 2 - legend_width / 2;\n                    sy = vr.start + legend_margin;\n                    break;\n                case 'top_right':\n                    sx = hr.end - legend_margin - legend_width;\n                    sy = vr.start + legend_margin;\n                    break;\n                case 'bottom_right':\n                    sx = hr.end - legend_margin - legend_width;\n                    sy = vr.end - legend_margin - legend_height;\n                    break;\n                case 'bottom_center':\n                    sx = (hr.end + hr.start) / 2 - legend_width / 2;\n                    sy = vr.end - legend_margin - legend_height;\n                    break;\n                case 'bottom_left':\n                    sx = hr.start + legend_margin;\n                    sy = vr.end - legend_margin - legend_height;\n                    break;\n                case 'center_left':\n                    sx = hr.start + legend_margin;\n                    sy = (vr.end + vr.start) / 2 - legend_height / 2;\n                    break;\n                case 'center':\n                    sx = (hr.end + hr.start) / 2 - legend_width / 2;\n                    sy = (vr.end + vr.start) / 2 - legend_height / 2;\n                    break;\n                case 'center_right':\n                    sx = hr.end - legend_margin - legend_width;\n                    sy = (vr.end + vr.start) / 2 - legend_height / 2;\n                    break;\n            }\n        }\n        else if (isArray(location) && location.length == 2) {\n            const [vx, vy] = location;\n            sx = panel.xview.compute(vx);\n            sy = panel.yview.compute(vy) - legend_height;\n        }\n        else\n            unreachable();\n        return new BBox({ left: sx, top: sy, width: legend_width, height: legend_height });\n    }\n    interactive_bbox() {\n        return this.compute_legend_bbox();\n    }\n    interactive_hit(sx, sy) {\n        const bbox = this.interactive_bbox();\n        return bbox.contains(sx, sy);\n    }\n    on_hit(sx, sy) {\n        let yoffset;\n        const { glyph_width } = this.model;\n        const { legend_padding } = this;\n        const legend_spacing = this.model.spacing;\n        const { label_standoff } = this.model;\n        let xoffset = (yoffset = legend_padding);\n        const legend_bbox = this.compute_legend_bbox();\n        const vertical = this.model.orientation == \"vertical\";\n        for (const item of this.model.items) {\n            const labels = item.get_labels_list_from_label_prop();\n            for (const label of labels) {\n                const x1 = legend_bbox.x + xoffset;\n                const y1 = legend_bbox.y + yoffset + this.title_height;\n                let w, h;\n                if (vertical)\n                    [w, h] = [legend_bbox.width - 2 * legend_padding, this.max_label_height];\n                else\n                    [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height];\n                const bbox = new BBox({ left: x1, top: y1, width: w, height: h });\n                if (bbox.contains(sx, sy)) {\n                    switch (this.model.click_policy) {\n                        case \"hide\": {\n                            for (const r of item.renderers)\n                                r.visible = !r.visible;\n                            break;\n                        }\n                        case \"mute\": {\n                            for (const r of item.renderers)\n                                r.muted = !r.muted;\n                            break;\n                        }\n                    }\n                    return true;\n                }\n                if (vertical)\n                    yoffset += this.max_label_height + legend_spacing;\n                else\n                    xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n            }\n        }\n        return false;\n    }\n    render() {\n        if (!this.model.visible)\n            return;\n        if (this.model.items.length == 0)\n            return;\n        // set a backref on render so that items can later signal item_change upates\n        // on the model to trigger a re-render\n        for (const item of this.model.items) {\n            item.legend = this.model;\n        }\n        const { ctx } = this.plot_view.canvas_view;\n        const bbox = this.compute_legend_bbox();\n        ctx.save();\n        this._draw_legend_box(ctx, bbox);\n        this._draw_legend_items(ctx, bbox);\n        if (this.model.title)\n            this._draw_title(ctx, bbox);\n        ctx.restore();\n    }\n    _draw_legend_box(ctx, bbox) {\n        ctx.beginPath();\n        ctx.rect(bbox.x, bbox.y, bbox.width, bbox.height);\n        this.visuals.background_fill.set_value(ctx);\n        ctx.fill();\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_value(ctx);\n            ctx.stroke();\n        }\n    }\n    _draw_legend_items(ctx, bbox) {\n        const { glyph_width, glyph_height } = this.model;\n        const { legend_padding } = this;\n        const legend_spacing = this.model.spacing;\n        const { label_standoff } = this.model;\n        let xoffset = legend_padding;\n        let yoffset = legend_padding;\n        const vertical = this.model.orientation == \"vertical\";\n        for (const item of this.model.items) {\n            const labels = item.get_labels_list_from_label_prop();\n            const field = item.get_field_from_label_prop();\n            if (labels.length == 0)\n                continue;\n            const active = (() => {\n                switch (this.model.click_policy) {\n                    case \"none\": return true;\n                    case \"hide\": return every(item.renderers, r => r.visible);\n                    case \"mute\": return every(item.renderers, r => !r.muted);\n                }\n            })();\n            for (const label of labels) {\n                const x1 = bbox.x + xoffset;\n                const y1 = bbox.y + yoffset + this.title_height;\n                const x2 = x1 + glyph_width;\n                const y2 = y1 + glyph_height;\n                if (vertical)\n                    yoffset += this.max_label_height + legend_spacing;\n                else\n                    xoffset += this.text_widths[label] + glyph_width + label_standoff + legend_spacing;\n                this.visuals.label_text.set_value(ctx);\n                ctx.fillText(label, x2 + label_standoff, y1 + this.max_label_height / 2.0);\n                for (const r of item.renderers) {\n                    const view = this.plot_view.renderer_views[r.id];\n                    view.draw_legend(ctx, x1, x2, y1, y2, field, label, item.index);\n                }\n                if (!active) {\n                    let w, h;\n                    if (vertical)\n                        [w, h] = [bbox.width - 2 * legend_padding, this.max_label_height];\n                    else\n                        [w, h] = [this.text_widths[label] + glyph_width + label_standoff, this.max_label_height];\n                    ctx.beginPath();\n                    ctx.rect(x1, y1, w, h);\n                    this.visuals.inactive_fill.set_value(ctx);\n                    ctx.fill();\n                }\n            }\n        }\n    }\n    _draw_title(ctx, bbox) {\n        if (!this.visuals.title_text.doit)\n            return;\n        ctx.save();\n        ctx.translate(bbox.x0, bbox.y0 + this.title_height);\n        this.visuals.title_text.set_value(ctx);\n        ctx.fillText(this.model.title, this.legend_padding, this.legend_padding - this.model.title_standoff);\n        ctx.restore();\n    }\n    _get_size() {\n        const { width, height } = this.compute_legend_bbox();\n        return {\n            width: width + 2 * this.model.margin,\n            height: height + 2 * this.model.margin,\n        };\n    }\n}\nLegendView.__name__ = \"LegendView\";\nexport class Legend extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    initialize() {\n        super.initialize();\n        this.item_change = new Signal0(this, \"item_change\");\n    }\n    static init_Legend() {\n        this.prototype.default_view = LegendView;\n        this.mixins([\n            'text:label_',\n            'text:title_',\n            'fill:inactive_',\n            'line:border_',\n            'fill:background_',\n        ]);\n        this.define({\n            orientation: [p.Orientation, 'vertical'],\n            location: [p.Any, 'top_right'],\n            title: [p.String],\n            title_standoff: [p.Number, 5],\n            label_standoff: [p.Number, 5],\n            glyph_height: [p.Number, 20],\n            glyph_width: [p.Number, 20],\n            label_height: [p.Number, 20],\n            label_width: [p.Number, 20],\n            margin: [p.Number, 10],\n            padding: [p.Number, 10],\n            spacing: [p.Number, 3],\n            items: [p.Array, []],\n            click_policy: [p.Any, \"none\"],\n        });\n        this.override({\n            border_line_color: \"#e5e5e5\",\n            border_line_alpha: 0.5,\n            border_line_width: 1,\n            background_fill_color: \"#ffffff\",\n            background_fill_alpha: 0.95,\n            inactive_fill_color: \"white\",\n            inactive_fill_alpha: 0.7,\n            label_text_font_size: \"13px\",\n            label_text_baseline: \"middle\",\n            title_text_font_size: \"13px\",\n            title_text_font_style: \"italic\",\n        });\n    }\n    get_legend_names() {\n        const legend_names = [];\n        for (const item of this.items) {\n            const labels = item.get_labels_list_from_label_prop();\n            legend_names.push(...labels);\n        }\n        return legend_names;\n    }\n}\nLegend.__name__ = \"Legend\";\nLegend.init_Legend();\n//# sourceMappingURL=legend.js.map"]},"metadata":{},"sourceType":"module"}