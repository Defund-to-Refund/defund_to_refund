{"ast":null,"code":"import { Mapper } from \"./mapper\";\nimport * as p from \"../../core/properties\";\nimport { isNumber } from \"../../core/util/types\";\nimport { color2hex } from \"../../core/util/color\";\nimport { is_little_endian } from \"../../core/util/compat\";\nexport function _convert_color(color) {\n  if (isNumber(color)) return color;\n  if (color[0] != \"#\") color = color2hex(color);\n  if (color.length != 9) color = color + 'ff';\n  return parseInt(color.slice(1), 16);\n}\nexport function _convert_palette(palette) {\n  const new_palette = new Uint32Array(palette.length);\n\n  for (let i = 0, end = palette.length; i < end; i++) new_palette[i] = _convert_color(palette[i]);\n\n  return new_palette;\n}\nexport function _uint32_to_rgba(values) {\n  if (is_little_endian) {\n    const view = new DataView(values.buffer);\n\n    for (let i = 0, end = values.length; i < end; i++) view.setUint32(i * 4, values[i]);\n  }\n\n  return new Uint8Array(values.buffer);\n}\nexport class ColorMapper extends Mapper {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ColorMapper() {\n    this.define({\n      palette: [p.Any],\n      nan_color: [p.Color, \"gray\"]\n    });\n  }\n\n  v_compute(xs) {\n    const values = new Array(xs.length);\n\n    this._v_compute(xs, values, this.palette, this._colors(c => c));\n\n    return values;\n  }\n\n  get rgba_mapper() {\n    const self = this;\n\n    const palette = _convert_palette(this.palette);\n\n    const colors = this._colors(_convert_color);\n\n    return {\n      v_compute(xs) {\n        const values = new Uint32Array(xs.length);\n\n        self._v_compute(xs, values, palette, colors);\n\n        return _uint32_to_rgba(values);\n      }\n\n    };\n  }\n\n  _colors(conv) {\n    return {\n      nan_color: conv(this.nan_color)\n    };\n  }\n\n}\nColorMapper.__name__ = \"ColorMapper\";\nColorMapper.init_ColorMapper();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/mappers/color_mapper.js"],"names":["Mapper","p","isNumber","color2hex","is_little_endian","_convert_color","color","length","parseInt","slice","_convert_palette","palette","new_palette","Uint32Array","i","end","_uint32_to_rgba","values","view","DataView","buffer","setUint32","Uint8Array","ColorMapper","constructor","attrs","init_ColorMapper","define","Any","nan_color","Color","v_compute","xs","Array","_v_compute","_colors","c","rgba_mapper","self","colors","conv","__name__"],"mappings":"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","sourcesContent":["import { Mapper } from \"./mapper\";\nimport * as p from \"../../core/properties\";\nimport { isNumber } from \"../../core/util/types\";\nimport { color2hex } from \"../../core/util/color\";\nimport { is_little_endian } from \"../../core/util/compat\";\nexport function _convert_color(color) {\n    if (isNumber(color))\n        return color;\n    if (color[0] != \"#\")\n        color = color2hex(color);\n    if (color.length != 9)\n        color = color + 'ff';\n    return parseInt(color.slice(1), 16);\n}\nexport function _convert_palette(palette) {\n    const new_palette = new Uint32Array(palette.length);\n    for (let i = 0, end = palette.length; i < end; i++)\n        new_palette[i] = _convert_color(palette[i]);\n    return new_palette;\n}\nexport function _uint32_to_rgba(values) {\n    if (is_little_endian) {\n        const view = new DataView(values.buffer);\n        for (let i = 0, end = values.length; i < end; i++)\n            view.setUint32(i * 4, values[i]);\n    }\n    return new Uint8Array(values.buffer);\n}\nexport class ColorMapper extends Mapper {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ColorMapper() {\n        this.define({\n            palette: [p.Any],\n            nan_color: [p.Color, \"gray\"],\n        });\n    }\n    v_compute(xs) {\n        const values = new Array(xs.length);\n        this._v_compute(xs, values, this.palette, this._colors((c) => c));\n        return values;\n    }\n    get rgba_mapper() {\n        const self = this;\n        const palette = _convert_palette(this.palette);\n        const colors = this._colors(_convert_color);\n        return {\n            v_compute(xs) {\n                const values = new Uint32Array(xs.length);\n                self._v_compute(xs, values, palette, colors);\n                return _uint32_to_rgba(values);\n            },\n        };\n    }\n    _colors(conv) {\n        return { nan_color: conv(this.nan_color) };\n    }\n}\nColorMapper.__name__ = \"ColorMapper\";\nColorMapper.init_ColorMapper();\n//# sourceMappingURL=color_mapper.js.map"]},"metadata":{},"sourceType":"module"}