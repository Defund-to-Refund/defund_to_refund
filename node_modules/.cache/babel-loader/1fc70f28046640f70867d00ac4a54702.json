{"ast":null,"code":"import { Sizeable } from \"./types\";\nimport { Layoutable } from \"./layoutable\";\nimport { isNumber, isString, isPlainObject } from \"../util/types\";\nimport { BBox } from \"../util/bbox\";\nimport { sum, some } from \"../util/array\";\nconst {\n  max,\n  round\n} = Math;\n\nclass DefaultMap {\n  constructor(def) {\n    this.def = def;\n    this._map = new Map();\n  }\n\n  get(key) {\n    let value = this._map.get(key);\n\n    if (value === undefined) {\n      value = this.def();\n\n      this._map.set(key, value);\n    }\n\n    return value;\n  }\n\n  apply(key, fn) {\n    const value = this.get(key);\n\n    this._map.set(key, fn(value));\n  }\n\n}\n\nDefaultMap.__name__ = \"DefaultMap\";\n\nclass Container {\n  constructor() {\n    this._items = [];\n    this._nrows = 0;\n    this._ncols = 0;\n  }\n\n  get nrows() {\n    return this._nrows;\n  }\n\n  get ncols() {\n    return this._ncols;\n  }\n\n  add(span, data) {\n    const {\n      r1,\n      c1\n    } = span;\n    this._nrows = max(this._nrows, r1 + 1);\n    this._ncols = max(this._ncols, c1 + 1);\n\n    this._items.push({\n      span,\n      data\n    });\n  }\n\n  at(r, c) {\n    const selected = this._items.filter(({\n      span\n    }) => {\n      return span.r0 <= r && r <= span.r1 && span.c0 <= c && c <= span.c1;\n    });\n\n    return selected.map(({\n      data\n    }) => data);\n  }\n\n  row(r) {\n    const selected = this._items.filter(({\n      span\n    }) => span.r0 <= r && r <= span.r1);\n\n    return selected.map(({\n      data\n    }) => data);\n  }\n\n  col(c) {\n    const selected = this._items.filter(({\n      span\n    }) => span.c0 <= c && c <= span.c1);\n\n    return selected.map(({\n      data\n    }) => data);\n  }\n\n  foreach(fn) {\n    for (const {\n      span,\n      data\n    } of this._items) {\n      fn(span, data);\n    }\n  }\n\n  map(fn) {\n    const result = new Container();\n\n    for (const {\n      span,\n      data\n    } of this._items) {\n      result.add(span, fn(span, data));\n    }\n\n    return result;\n  }\n\n}\n\nContainer.__name__ = \"Container\";\nexport class Grid extends Layoutable {\n  constructor(items = []) {\n    super();\n    this.items = items;\n    this.rows = \"auto\";\n    this.cols = \"auto\";\n    this.spacing = 0;\n    this.absolute = false;\n  }\n\n  is_width_expanding() {\n    if (super.is_width_expanding()) return true;\n    if (this.sizing.width_policy == \"fixed\") return false;\n    const {\n      cols\n    } = this._state;\n    return some(cols, col => col.policy == \"max\");\n  }\n\n  is_height_expanding() {\n    if (super.is_height_expanding()) return true;\n    if (this.sizing.height_policy == \"fixed\") return false;\n    const {\n      rows\n    } = this._state;\n    return some(rows, row => row.policy == \"max\");\n  }\n\n  _init() {\n    super._init();\n\n    const items = new Container();\n\n    for (const {\n      layout,\n      row,\n      col,\n      row_span,\n      col_span\n    } of this.items) {\n      if (layout.sizing.visible) {\n        const r0 = row;\n        const c0 = col;\n        const r1 = row + (row_span != null ? row_span : 1) - 1;\n        const c1 = col + (col_span != null ? col_span : 1) - 1;\n        items.add({\n          r0,\n          c0,\n          r1,\n          c1\n        }, layout);\n      }\n    }\n\n    const {\n      nrows,\n      ncols\n    } = items;\n    const rows = new Array(nrows);\n\n    for (let y = 0; y < nrows; y++) {\n      const row = (() => {\n        const sizing = isPlainObject(this.rows) ? this.rows[y] || this.rows[\"*\"] : this.rows;\n        if (sizing == null) return {\n          policy: \"auto\"\n        };else if (isNumber(sizing)) return {\n          policy: \"fixed\",\n          height: sizing\n        };else if (isString(sizing)) return {\n          policy: sizing\n        };else return sizing;\n      })();\n\n      const align = row.align || \"auto\";\n      if (row.policy == \"fixed\") rows[y] = {\n        policy: \"fixed\",\n        height: row.height,\n        align\n      };else if (row.policy == \"min\") rows[y] = {\n        policy: \"min\",\n        align\n      };else if (row.policy == \"fit\" || row.policy == \"max\") rows[y] = {\n        policy: row.policy,\n        flex: row.flex || 1,\n        align\n      };else if (row.policy == \"auto\") {\n        if (some(items.row(y), layout => layout.is_height_expanding())) rows[y] = {\n          policy: \"max\",\n          flex: 1,\n          align\n        };else rows[y] = {\n          policy: \"min\",\n          align\n        };\n      } else throw new Error(\"unrechable\");\n    }\n\n    const cols = new Array(ncols);\n\n    for (let x = 0; x < ncols; x++) {\n      const col = (() => {\n        const sizing = isPlainObject(this.cols) ? this.cols[x] || this.cols[\"*\"] : this.cols;\n        if (sizing == null) return {\n          policy: \"auto\"\n        };else if (isNumber(sizing)) return {\n          policy: \"fixed\",\n          width: sizing\n        };else if (isString(sizing)) return {\n          policy: sizing\n        };else return sizing;\n      })();\n\n      const align = col.align || \"auto\";\n      if (col.policy == \"fixed\") cols[x] = {\n        policy: \"fixed\",\n        width: col.width,\n        align\n      };else if (col.policy == \"min\") cols[x] = {\n        policy: \"min\",\n        align\n      };else if (col.policy == \"fit\" || col.policy == \"max\") cols[x] = {\n        policy: col.policy,\n        flex: col.flex || 1,\n        align\n      };else if (col.policy == \"auto\") {\n        if (some(items.col(x), layout => layout.is_width_expanding())) cols[x] = {\n          policy: \"max\",\n          flex: 1,\n          align\n        };else cols[x] = {\n          policy: \"min\",\n          align\n        };\n      } else throw new Error(\"unrechable\");\n    }\n\n    const [rspacing, cspacing] = isNumber(this.spacing) ? [this.spacing, this.spacing] : this.spacing;\n    this._state = {\n      items,\n      nrows,\n      ncols,\n      rows,\n      cols,\n      rspacing,\n      cspacing\n    };\n  }\n\n  _measure_totals(row_heights, col_widths) {\n    const {\n      nrows,\n      ncols,\n      rspacing,\n      cspacing\n    } = this._state;\n    return {\n      height: sum(row_heights) + (nrows - 1) * rspacing,\n      width: sum(col_widths) + (ncols - 1) * cspacing\n    };\n  }\n\n  _measure_cells(cell_viewport) {\n    const {\n      items,\n      nrows,\n      ncols,\n      rows,\n      cols,\n      rspacing,\n      cspacing\n    } = this._state;\n    const row_heights = new Array(nrows);\n\n    for (let r = 0; r < nrows; r++) {\n      const row = rows[r];\n      row_heights[r] = row.policy == \"fixed\" ? row.height : 0;\n    }\n\n    const col_widths = new Array(ncols);\n\n    for (let c = 0; c < ncols; c++) {\n      const col = cols[c];\n      col_widths[c] = col.policy == \"fixed\" ? col.width : 0;\n    }\n\n    const size_hints = new Container();\n    items.foreach((span, layout) => {\n      const {\n        r0,\n        c0,\n        r1,\n        c1\n      } = span;\n      const rspace = (r1 - r0) * rspacing;\n      const cspace = (c1 - c0) * cspacing;\n      let height = 0;\n\n      for (let r = r0; r <= r1; r++) {\n        height += cell_viewport(r, c0).height;\n      }\n\n      height += rspace;\n      let width = 0;\n\n      for (let c = c0; c <= c1; c++) {\n        width += cell_viewport(r0, c).width;\n      }\n\n      width += cspace;\n      const size_hint = layout.measure({\n        width,\n        height\n      });\n      size_hints.add(span, {\n        layout,\n        size_hint\n      });\n      const size = new Sizeable(size_hint).grow_by(layout.sizing.margin);\n      size.height -= rspace;\n      size.width -= cspace;\n      const radjustable = [];\n\n      for (let r = r0; r <= r1; r++) {\n        const row = rows[r];\n        if (row.policy == \"fixed\") size.height -= row.height;else radjustable.push(r);\n      }\n\n      if (size.height > 0) {\n        const rheight = round(size.height / radjustable.length);\n\n        for (const r of radjustable) {\n          row_heights[r] = max(row_heights[r], rheight);\n        }\n      }\n\n      const cadjustable = [];\n\n      for (let c = c0; c <= c1; c++) {\n        const col = cols[c];\n        if (col.policy == \"fixed\") size.width -= col.width;else cadjustable.push(c);\n      }\n\n      if (size.width > 0) {\n        const cwidth = round(size.width / cadjustable.length);\n\n        for (const c of cadjustable) {\n          col_widths[c] = max(col_widths[c], cwidth);\n        }\n      }\n    });\n\n    const size = this._measure_totals(row_heights, col_widths);\n\n    return {\n      size,\n      row_heights,\n      col_widths,\n      size_hints\n    };\n  }\n\n  _measure_grid(viewport) {\n    const {\n      nrows,\n      ncols,\n      rows,\n      cols,\n      rspacing,\n      cspacing\n    } = this._state;\n\n    const preferred = this._measure_cells((y, x) => {\n      const row = rows[y];\n      const col = cols[x];\n      return {\n        width: col.policy == \"fixed\" ? col.width : Infinity,\n        height: row.policy == \"fixed\" ? row.height : Infinity\n      };\n    });\n\n    let available_height;\n    if (this.sizing.height_policy == \"fixed\" && this.sizing.height != null) available_height = this.sizing.height;else if (viewport.height != Infinity && this.is_height_expanding()) available_height = viewport.height;else available_height = preferred.size.height;\n    let height_flex = 0;\n\n    for (let y = 0; y < nrows; y++) {\n      const row = rows[y];\n      if (row.policy == \"fit\" || row.policy == \"max\") height_flex += row.flex;else available_height -= preferred.row_heights[y];\n    }\n\n    available_height -= (nrows - 1) * rspacing;\n\n    if (height_flex != 0 && available_height > 0) {\n      for (let y = 0; y < nrows; y++) {\n        const row = rows[y];\n\n        if (row.policy == \"fit\" || row.policy == \"max\") {\n          const height = round(available_height * (row.flex / height_flex));\n          available_height -= height;\n          preferred.row_heights[y] = height;\n          height_flex -= row.flex;\n        }\n      }\n    } else if (available_height < 0) {\n      let nadjustable = 0;\n\n      for (let y = 0; y < nrows; y++) {\n        const row = rows[y];\n        if (row.policy != \"fixed\") nadjustable++;\n      }\n\n      let overflow_height = -available_height;\n\n      for (let y = 0; y < nrows; y++) {\n        const row = rows[y];\n\n        if (row.policy != \"fixed\") {\n          const height = preferred.row_heights[y];\n          const cutoff = round(overflow_height / nadjustable);\n          preferred.row_heights[y] = max(height - cutoff, 0);\n          overflow_height -= cutoff > height ? height : cutoff;\n          nadjustable--;\n        }\n      }\n    }\n\n    let available_width;\n    if (this.sizing.width_policy == \"fixed\" && this.sizing.width != null) available_width = this.sizing.width;else if (viewport.width != Infinity && this.is_width_expanding()) available_width = viewport.width;else available_width = preferred.size.width;\n    let width_flex = 0;\n\n    for (let x = 0; x < ncols; x++) {\n      const col = cols[x];\n      if (col.policy == \"fit\" || col.policy == \"max\") width_flex += col.flex;else available_width -= preferred.col_widths[x];\n    }\n\n    available_width -= (ncols - 1) * cspacing;\n\n    if (width_flex != 0 && available_width > 0) {\n      for (let x = 0; x < ncols; x++) {\n        const col = cols[x];\n\n        if (col.policy == \"fit\" || col.policy == \"max\") {\n          const width = round(available_width * (col.flex / width_flex));\n          available_width -= width;\n          preferred.col_widths[x] = width;\n          width_flex -= col.flex;\n        }\n      }\n    } else if (available_width < 0) {\n      let nadjustable = 0;\n\n      for (let x = 0; x < ncols; x++) {\n        const col = cols[x];\n        if (col.policy != \"fixed\") nadjustable++;\n      }\n\n      let overflow_width = -available_width;\n\n      for (let x = 0; x < ncols; x++) {\n        const col = cols[x];\n\n        if (col.policy != \"fixed\") {\n          const width = preferred.col_widths[x];\n          const cutoff = round(overflow_width / nadjustable);\n          preferred.col_widths[x] = max(width - cutoff, 0);\n          overflow_width -= cutoff > width ? width : cutoff;\n          nadjustable--;\n        }\n      }\n    }\n\n    const {\n      row_heights,\n      col_widths,\n      size_hints\n    } = this._measure_cells((y, x) => {\n      return {\n        width: preferred.col_widths[x],\n        height: preferred.row_heights[y]\n      };\n    });\n\n    const size = this._measure_totals(row_heights, col_widths);\n\n    return {\n      size,\n      row_heights,\n      col_widths,\n      size_hints\n    };\n  }\n\n  _measure(viewport) {\n    const {\n      size\n    } = this._measure_grid(viewport);\n\n    return size;\n  }\n\n  _set_geometry(outer, inner) {\n    super._set_geometry(outer, inner);\n\n    const {\n      nrows,\n      ncols,\n      rspacing,\n      cspacing\n    } = this._state;\n\n    const {\n      row_heights,\n      col_widths,\n      size_hints\n    } = this._measure_grid(outer);\n\n    const rows = this._state.rows.map((row, r) => {\n      return Object.assign(Object.assign({}, row), {\n        top: 0,\n        height: row_heights[r],\n\n        get bottom() {\n          return this.top + this.height;\n        }\n\n      });\n    });\n\n    const cols = this._state.cols.map((col, c) => {\n      return Object.assign(Object.assign({}, col), {\n        left: 0,\n        width: col_widths[c],\n\n        get right() {\n          return this.left + this.width;\n        }\n\n      });\n    });\n\n    const items = size_hints.map((_, item) => {\n      return Object.assign(Object.assign({}, item), {\n        outer: new BBox(),\n        inner: new BBox()\n      });\n    });\n\n    for (let r = 0, top = !this.absolute ? 0 : outer.top; r < nrows; r++) {\n      const row = rows[r];\n      row.top = top;\n      top += row.height + rspacing;\n    }\n\n    for (let c = 0, left = !this.absolute ? 0 : outer.left; c < ncols; c++) {\n      const col = cols[c];\n      col.left = left;\n      left += col.width + cspacing;\n    }\n\n    function span_width(c0, c1) {\n      let width = (c1 - c0) * cspacing;\n\n      for (let c = c0; c <= c1; c++) {\n        width += cols[c].width;\n      }\n\n      return width;\n    }\n\n    function span_height(r0, r1) {\n      let height = (r1 - r0) * rspacing;\n\n      for (let r = r0; r <= r1; r++) {\n        height += rows[r].height;\n      }\n\n      return height;\n    }\n\n    items.foreach(({\n      r0,\n      c0,\n      r1,\n      c1\n    }, item) => {\n      const {\n        layout,\n        size_hint\n      } = item;\n      const {\n        sizing\n      } = layout;\n      const {\n        width,\n        height\n      } = size_hint;\n      const span = {\n        width: span_width(c0, c1),\n        height: span_height(r0, r1)\n      };\n      const halign = c0 == c1 && cols[c0].align != \"auto\" ? cols[c0].align : sizing.halign;\n      const valign = r0 == r1 && rows[r0].align != \"auto\" ? rows[r0].align : sizing.valign;\n      let left = cols[c0].left;\n      if (halign == \"start\") left += sizing.margin.left;else if (halign == \"center\") left += round((span.width - width) / 2);else if (halign == \"end\") left += span.width - sizing.margin.right - width;\n      let top = rows[r0].top;\n      if (valign == \"start\") top += sizing.margin.top;else if (valign == \"center\") top += round((span.height - height) / 2);else if (valign == \"end\") top += span.height - sizing.margin.bottom - height;\n      item.outer = new BBox({\n        left,\n        top,\n        width,\n        height\n      });\n    });\n    const row_aligns = rows.map(() => {\n      return {\n        start: new DefaultMap(() => 0),\n        end: new DefaultMap(() => 0)\n      };\n    });\n    const col_aligns = cols.map(() => {\n      return {\n        start: new DefaultMap(() => 0),\n        end: new DefaultMap(() => 0)\n      };\n    });\n    items.foreach(({\n      r0,\n      c0,\n      r1,\n      c1\n    }, {\n      size_hint,\n      outer\n    }) => {\n      const {\n        inner\n      } = size_hint;\n\n      if (inner != null) {\n        row_aligns[r0].start.apply(outer.top, v => max(v, inner.top));\n        row_aligns[r1].end.apply(rows[r1].bottom - outer.bottom, v => max(v, inner.bottom));\n        col_aligns[c0].start.apply(outer.left, v => max(v, inner.left));\n        col_aligns[c1].end.apply(cols[c1].right - outer.right, v => max(v, inner.right));\n      }\n    });\n    items.foreach(({\n      r0,\n      c0,\n      r1,\n      c1\n    }, item) => {\n      const {\n        size_hint,\n        outer\n      } = item;\n\n      function inner_bbox({\n        left,\n        right,\n        top,\n        bottom\n      }) {\n        const width = outer.width - left - right;\n        const height = outer.height - top - bottom;\n        return new BBox({\n          left,\n          top,\n          width,\n          height\n        });\n      }\n\n      if (size_hint.inner != null) {\n        let inner = inner_bbox(size_hint.inner);\n\n        if (size_hint.align !== false) {\n          const top = row_aligns[r0].start.get(outer.top);\n          const bottom = row_aligns[r1].end.get(rows[r1].bottom - outer.bottom);\n          const left = col_aligns[c0].start.get(outer.left);\n          const right = col_aligns[c1].end.get(cols[c1].right - outer.right);\n\n          try {\n            inner = inner_bbox({\n              top,\n              bottom,\n              left,\n              right\n            });\n          } catch (_a) {}\n        }\n\n        item.inner = inner;\n      } else item.inner = outer;\n    });\n    items.foreach((_, {\n      layout,\n      outer,\n      inner\n    }) => {\n      layout.set_geometry(outer, inner);\n    });\n  }\n\n}\nGrid.__name__ = \"Grid\";\nexport class Row extends Grid {\n  constructor(items) {\n    super();\n    this.items = items.map((item, i) => ({\n      layout: item,\n      row: 0,\n      col: i\n    }));\n    this.rows = \"fit\";\n  }\n\n}\nRow.__name__ = \"Row\";\nexport class Column extends Grid {\n  constructor(items) {\n    super();\n    this.items = items.map((item, i) => ({\n      layout: item,\n      row: i,\n      col: 0\n    }));\n    this.cols = \"fit\";\n  }\n\n}\nColumn.__name__ = \"Column\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/layout/grid.js"],"names":["Sizeable","Layoutable","isNumber","isString","isPlainObject","BBox","sum","some","max","round","Math","DefaultMap","constructor","def","_map","Map","get","key","value","undefined","set","apply","fn","__name__","Container","_items","_nrows","_ncols","nrows","ncols","add","span","data","r1","c1","push","at","r","c","selected","filter","r0","c0","map","row","col","foreach","result","Grid","items","rows","cols","spacing","absolute","is_width_expanding","sizing","width_policy","_state","policy","is_height_expanding","height_policy","_init","layout","row_span","col_span","visible","Array","y","height","align","flex","Error","x","width","rspacing","cspacing","_measure_totals","row_heights","col_widths","_measure_cells","cell_viewport","size_hints","rspace","cspace","size_hint","measure","size","grow_by","margin","radjustable","rheight","length","cadjustable","cwidth","_measure_grid","viewport","preferred","Infinity","available_height","height_flex","nadjustable","overflow_height","cutoff","available_width","width_flex","overflow_width","_measure","_set_geometry","outer","inner","Object","assign","top","bottom","left","right","_","item","span_width","span_height","halign","valign","row_aligns","start","end","col_aligns","v","inner_bbox","_a","set_geometry","Row","i","Column"],"mappings":"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","sourcesContent":["import { Sizeable } from \"./types\";\nimport { Layoutable } from \"./layoutable\";\nimport { isNumber, isString, isPlainObject } from \"../util/types\";\nimport { BBox } from \"../util/bbox\";\nimport { sum, some } from \"../util/array\";\nconst { max, round } = Math;\nclass DefaultMap {\n    constructor(def) {\n        this.def = def;\n        this._map = new Map();\n    }\n    get(key) {\n        let value = this._map.get(key);\n        if (value === undefined) {\n            value = this.def();\n            this._map.set(key, value);\n        }\n        return value;\n    }\n    apply(key, fn) {\n        const value = this.get(key);\n        this._map.set(key, fn(value));\n    }\n}\nDefaultMap.__name__ = \"DefaultMap\";\nclass Container {\n    constructor() {\n        this._items = [];\n        this._nrows = 0;\n        this._ncols = 0;\n    }\n    get nrows() {\n        return this._nrows;\n    }\n    get ncols() {\n        return this._ncols;\n    }\n    add(span, data) {\n        const { r1, c1 } = span;\n        this._nrows = max(this._nrows, r1 + 1);\n        this._ncols = max(this._ncols, c1 + 1);\n        this._items.push({ span, data });\n    }\n    at(r, c) {\n        const selected = this._items.filter(({ span }) => {\n            return span.r0 <= r && r <= span.r1 &&\n                span.c0 <= c && c <= span.c1;\n        });\n        return selected.map(({ data }) => data);\n    }\n    row(r) {\n        const selected = this._items.filter(({ span }) => span.r0 <= r && r <= span.r1);\n        return selected.map(({ data }) => data);\n    }\n    col(c) {\n        const selected = this._items.filter(({ span }) => span.c0 <= c && c <= span.c1);\n        return selected.map(({ data }) => data);\n    }\n    foreach(fn) {\n        for (const { span, data } of this._items) {\n            fn(span, data);\n        }\n    }\n    map(fn) {\n        const result = new Container();\n        for (const { span, data } of this._items) {\n            result.add(span, fn(span, data));\n        }\n        return result;\n    }\n}\nContainer.__name__ = \"Container\";\nexport class Grid extends Layoutable {\n    constructor(items = []) {\n        super();\n        this.items = items;\n        this.rows = \"auto\";\n        this.cols = \"auto\";\n        this.spacing = 0;\n        this.absolute = false;\n    }\n    is_width_expanding() {\n        if (super.is_width_expanding())\n            return true;\n        if (this.sizing.width_policy == \"fixed\")\n            return false;\n        const { cols } = this._state;\n        return some(cols, (col) => col.policy == \"max\");\n    }\n    is_height_expanding() {\n        if (super.is_height_expanding())\n            return true;\n        if (this.sizing.height_policy == \"fixed\")\n            return false;\n        const { rows } = this._state;\n        return some(rows, (row) => row.policy == \"max\");\n    }\n    _init() {\n        super._init();\n        const items = new Container();\n        for (const { layout, row, col, row_span, col_span } of this.items) {\n            if (layout.sizing.visible) {\n                const r0 = row;\n                const c0 = col;\n                const r1 = row + (row_span != null ? row_span : 1) - 1;\n                const c1 = col + (col_span != null ? col_span : 1) - 1;\n                items.add({ r0, c0, r1, c1 }, layout);\n            }\n        }\n        const { nrows, ncols } = items;\n        const rows = new Array(nrows);\n        for (let y = 0; y < nrows; y++) {\n            const row = (() => {\n                const sizing = isPlainObject(this.rows) ? this.rows[y] || this.rows[\"*\"] : this.rows;\n                if (sizing == null)\n                    return { policy: \"auto\" };\n                else if (isNumber(sizing))\n                    return { policy: \"fixed\", height: sizing };\n                else if (isString(sizing))\n                    return { policy: sizing };\n                else\n                    return sizing;\n            })();\n            const align = row.align || \"auto\";\n            if (row.policy == \"fixed\")\n                rows[y] = { policy: \"fixed\", height: row.height, align };\n            else if (row.policy == \"min\")\n                rows[y] = { policy: \"min\", align };\n            else if (row.policy == \"fit\" || row.policy == \"max\")\n                rows[y] = { policy: row.policy, flex: row.flex || 1, align };\n            else if (row.policy == \"auto\") {\n                if (some(items.row(y), (layout) => layout.is_height_expanding()))\n                    rows[y] = { policy: \"max\", flex: 1, align };\n                else\n                    rows[y] = { policy: \"min\", align };\n            }\n            else\n                throw new Error(\"unrechable\");\n        }\n        const cols = new Array(ncols);\n        for (let x = 0; x < ncols; x++) {\n            const col = (() => {\n                const sizing = isPlainObject(this.cols) ? this.cols[x] || this.cols[\"*\"] : this.cols;\n                if (sizing == null)\n                    return { policy: \"auto\" };\n                else if (isNumber(sizing))\n                    return { policy: \"fixed\", width: sizing };\n                else if (isString(sizing))\n                    return { policy: sizing };\n                else\n                    return sizing;\n            })();\n            const align = col.align || \"auto\";\n            if (col.policy == \"fixed\")\n                cols[x] = { policy: \"fixed\", width: col.width, align };\n            else if (col.policy == \"min\")\n                cols[x] = { policy: \"min\", align };\n            else if (col.policy == \"fit\" || col.policy == \"max\")\n                cols[x] = { policy: col.policy, flex: col.flex || 1, align };\n            else if (col.policy == \"auto\") {\n                if (some(items.col(x), (layout) => layout.is_width_expanding()))\n                    cols[x] = { policy: \"max\", flex: 1, align };\n                else\n                    cols[x] = { policy: \"min\", align };\n            }\n            else\n                throw new Error(\"unrechable\");\n        }\n        const [rspacing, cspacing] = isNumber(this.spacing) ? [this.spacing, this.spacing] : this.spacing;\n        this._state = { items, nrows, ncols, rows, cols, rspacing, cspacing };\n    }\n    _measure_totals(row_heights, col_widths) {\n        const { nrows, ncols, rspacing, cspacing } = this._state;\n        return {\n            height: sum(row_heights) + (nrows - 1) * rspacing,\n            width: sum(col_widths) + (ncols - 1) * cspacing,\n        };\n    }\n    _measure_cells(cell_viewport) {\n        const { items, nrows, ncols, rows, cols, rspacing, cspacing } = this._state;\n        const row_heights = new Array(nrows);\n        for (let r = 0; r < nrows; r++) {\n            const row = rows[r];\n            row_heights[r] = row.policy == \"fixed\" ? row.height : 0;\n        }\n        const col_widths = new Array(ncols);\n        for (let c = 0; c < ncols; c++) {\n            const col = cols[c];\n            col_widths[c] = col.policy == \"fixed\" ? col.width : 0;\n        }\n        const size_hints = new Container();\n        items.foreach((span, layout) => {\n            const { r0, c0, r1, c1 } = span;\n            const rspace = (r1 - r0) * rspacing;\n            const cspace = (c1 - c0) * cspacing;\n            let height = 0;\n            for (let r = r0; r <= r1; r++) {\n                height += cell_viewport(r, c0).height;\n            }\n            height += rspace;\n            let width = 0;\n            for (let c = c0; c <= c1; c++) {\n                width += cell_viewport(r0, c).width;\n            }\n            width += cspace;\n            const size_hint = layout.measure({ width, height });\n            size_hints.add(span, { layout, size_hint });\n            const size = new Sizeable(size_hint).grow_by(layout.sizing.margin);\n            size.height -= rspace;\n            size.width -= cspace;\n            const radjustable = [];\n            for (let r = r0; r <= r1; r++) {\n                const row = rows[r];\n                if (row.policy == \"fixed\")\n                    size.height -= row.height;\n                else\n                    radjustable.push(r);\n            }\n            if (size.height > 0) {\n                const rheight = round(size.height / radjustable.length);\n                for (const r of radjustable) {\n                    row_heights[r] = max(row_heights[r], rheight);\n                }\n            }\n            const cadjustable = [];\n            for (let c = c0; c <= c1; c++) {\n                const col = cols[c];\n                if (col.policy == \"fixed\")\n                    size.width -= col.width;\n                else\n                    cadjustable.push(c);\n            }\n            if (size.width > 0) {\n                const cwidth = round(size.width / cadjustable.length);\n                for (const c of cadjustable) {\n                    col_widths[c] = max(col_widths[c], cwidth);\n                }\n            }\n        });\n        const size = this._measure_totals(row_heights, col_widths);\n        return { size, row_heights, col_widths, size_hints };\n    }\n    _measure_grid(viewport) {\n        const { nrows, ncols, rows, cols, rspacing, cspacing } = this._state;\n        const preferred = this._measure_cells((y, x) => {\n            const row = rows[y];\n            const col = cols[x];\n            return {\n                width: col.policy == \"fixed\" ? col.width : Infinity,\n                height: row.policy == \"fixed\" ? row.height : Infinity,\n            };\n        });\n        let available_height;\n        if (this.sizing.height_policy == \"fixed\" && this.sizing.height != null)\n            available_height = this.sizing.height;\n        else if (viewport.height != Infinity && this.is_height_expanding())\n            available_height = viewport.height;\n        else\n            available_height = preferred.size.height;\n        let height_flex = 0;\n        for (let y = 0; y < nrows; y++) {\n            const row = rows[y];\n            if (row.policy == \"fit\" || row.policy == \"max\")\n                height_flex += row.flex;\n            else\n                available_height -= preferred.row_heights[y];\n        }\n        available_height -= (nrows - 1) * rspacing;\n        if (height_flex != 0 && available_height > 0) {\n            for (let y = 0; y < nrows; y++) {\n                const row = rows[y];\n                if (row.policy == \"fit\" || row.policy == \"max\") {\n                    const height = round(available_height * (row.flex / height_flex));\n                    available_height -= height;\n                    preferred.row_heights[y] = height;\n                    height_flex -= row.flex;\n                }\n            }\n        }\n        else if (available_height < 0) {\n            let nadjustable = 0;\n            for (let y = 0; y < nrows; y++) {\n                const row = rows[y];\n                if (row.policy != \"fixed\")\n                    nadjustable++;\n            }\n            let overflow_height = -available_height;\n            for (let y = 0; y < nrows; y++) {\n                const row = rows[y];\n                if (row.policy != \"fixed\") {\n                    const height = preferred.row_heights[y];\n                    const cutoff = round(overflow_height / nadjustable);\n                    preferred.row_heights[y] = max(height - cutoff, 0);\n                    overflow_height -= cutoff > height ? height : cutoff;\n                    nadjustable--;\n                }\n            }\n        }\n        let available_width;\n        if (this.sizing.width_policy == \"fixed\" && this.sizing.width != null)\n            available_width = this.sizing.width;\n        else if (viewport.width != Infinity && this.is_width_expanding())\n            available_width = viewport.width;\n        else\n            available_width = preferred.size.width;\n        let width_flex = 0;\n        for (let x = 0; x < ncols; x++) {\n            const col = cols[x];\n            if (col.policy == \"fit\" || col.policy == \"max\")\n                width_flex += col.flex;\n            else\n                available_width -= preferred.col_widths[x];\n        }\n        available_width -= (ncols - 1) * cspacing;\n        if (width_flex != 0 && available_width > 0) {\n            for (let x = 0; x < ncols; x++) {\n                const col = cols[x];\n                if (col.policy == \"fit\" || col.policy == \"max\") {\n                    const width = round(available_width * (col.flex / width_flex));\n                    available_width -= width;\n                    preferred.col_widths[x] = width;\n                    width_flex -= col.flex;\n                }\n            }\n        }\n        else if (available_width < 0) {\n            let nadjustable = 0;\n            for (let x = 0; x < ncols; x++) {\n                const col = cols[x];\n                if (col.policy != \"fixed\")\n                    nadjustable++;\n            }\n            let overflow_width = -available_width;\n            for (let x = 0; x < ncols; x++) {\n                const col = cols[x];\n                if (col.policy != \"fixed\") {\n                    const width = preferred.col_widths[x];\n                    const cutoff = round(overflow_width / nadjustable);\n                    preferred.col_widths[x] = max(width - cutoff, 0);\n                    overflow_width -= cutoff > width ? width : cutoff;\n                    nadjustable--;\n                }\n            }\n        }\n        const { row_heights, col_widths, size_hints } = this._measure_cells((y, x) => {\n            return {\n                width: preferred.col_widths[x],\n                height: preferred.row_heights[y],\n            };\n        });\n        const size = this._measure_totals(row_heights, col_widths);\n        return { size, row_heights, col_widths, size_hints };\n    }\n    _measure(viewport) {\n        const { size } = this._measure_grid(viewport);\n        return size;\n    }\n    _set_geometry(outer, inner) {\n        super._set_geometry(outer, inner);\n        const { nrows, ncols, rspacing, cspacing } = this._state;\n        const { row_heights, col_widths, size_hints } = this._measure_grid(outer);\n        const rows = this._state.rows.map((row, r) => {\n            return Object.assign(Object.assign({}, row), { top: 0, height: row_heights[r], get bottom() { return this.top + this.height; } });\n        });\n        const cols = this._state.cols.map((col, c) => {\n            return Object.assign(Object.assign({}, col), { left: 0, width: col_widths[c], get right() { return this.left + this.width; } });\n        });\n        const items = size_hints.map((_, item) => {\n            return Object.assign(Object.assign({}, item), { outer: new BBox(), inner: new BBox() });\n        });\n        for (let r = 0, top = !this.absolute ? 0 : outer.top; r < nrows; r++) {\n            const row = rows[r];\n            row.top = top;\n            top += row.height + rspacing;\n        }\n        for (let c = 0, left = !this.absolute ? 0 : outer.left; c < ncols; c++) {\n            const col = cols[c];\n            col.left = left;\n            left += col.width + cspacing;\n        }\n        function span_width(c0, c1) {\n            let width = (c1 - c0) * cspacing;\n            for (let c = c0; c <= c1; c++) {\n                width += cols[c].width;\n            }\n            return width;\n        }\n        function span_height(r0, r1) {\n            let height = (r1 - r0) * rspacing;\n            for (let r = r0; r <= r1; r++) {\n                height += rows[r].height;\n            }\n            return height;\n        }\n        items.foreach(({ r0, c0, r1, c1 }, item) => {\n            const { layout, size_hint } = item;\n            const { sizing } = layout;\n            const { width, height } = size_hint;\n            const span = {\n                width: span_width(c0, c1),\n                height: span_height(r0, r1),\n            };\n            const halign = c0 == c1 && cols[c0].align != \"auto\" ? cols[c0].align : sizing.halign;\n            const valign = r0 == r1 && rows[r0].align != \"auto\" ? rows[r0].align : sizing.valign;\n            let left = cols[c0].left;\n            if (halign == \"start\")\n                left += sizing.margin.left;\n            else if (halign == \"center\")\n                left += round((span.width - width) / 2);\n            else if (halign == \"end\")\n                left += span.width - sizing.margin.right - width;\n            let top = rows[r0].top;\n            if (valign == \"start\")\n                top += sizing.margin.top;\n            else if (valign == \"center\")\n                top += round((span.height - height) / 2);\n            else if (valign == \"end\")\n                top += span.height - sizing.margin.bottom - height;\n            item.outer = new BBox({ left, top, width, height });\n        });\n        const row_aligns = rows.map(() => {\n            return {\n                start: new DefaultMap(() => 0),\n                end: new DefaultMap(() => 0),\n            };\n        });\n        const col_aligns = cols.map(() => {\n            return {\n                start: new DefaultMap(() => 0),\n                end: new DefaultMap(() => 0),\n            };\n        });\n        items.foreach(({ r0, c0, r1, c1 }, { size_hint, outer }) => {\n            const { inner } = size_hint;\n            if (inner != null) {\n                row_aligns[r0].start.apply(outer.top, (v) => max(v, inner.top));\n                row_aligns[r1].end.apply(rows[r1].bottom - outer.bottom, (v) => max(v, inner.bottom));\n                col_aligns[c0].start.apply(outer.left, (v) => max(v, inner.left));\n                col_aligns[c1].end.apply(cols[c1].right - outer.right, (v) => max(v, inner.right));\n            }\n        });\n        items.foreach(({ r0, c0, r1, c1 }, item) => {\n            const { size_hint, outer } = item;\n            function inner_bbox({ left, right, top, bottom }) {\n                const width = outer.width - left - right;\n                const height = outer.height - top - bottom;\n                return new BBox({ left, top, width, height });\n            }\n            if (size_hint.inner != null) {\n                let inner = inner_bbox(size_hint.inner);\n                if (size_hint.align !== false) {\n                    const top = row_aligns[r0].start.get(outer.top);\n                    const bottom = row_aligns[r1].end.get(rows[r1].bottom - outer.bottom);\n                    const left = col_aligns[c0].start.get(outer.left);\n                    const right = col_aligns[c1].end.get(cols[c1].right - outer.right);\n                    try {\n                        inner = inner_bbox({ top, bottom, left, right });\n                    }\n                    catch (_a) { }\n                }\n                item.inner = inner;\n            }\n            else\n                item.inner = outer;\n        });\n        items.foreach((_, { layout, outer, inner }) => {\n            layout.set_geometry(outer, inner);\n        });\n    }\n}\nGrid.__name__ = \"Grid\";\nexport class Row extends Grid {\n    constructor(items) {\n        super();\n        this.items = items.map((item, i) => ({ layout: item, row: 0, col: i }));\n        this.rows = \"fit\";\n    }\n}\nRow.__name__ = \"Row\";\nexport class Column extends Grid {\n    constructor(items) {\n        super();\n        this.items = items.map((item, i) => ({ layout: item, row: i, col: 0 }));\n        this.cols = \"fit\";\n    }\n}\nColumn.__name__ = \"Column\";\n//# sourceMappingURL=grid.js.map"]},"metadata":{},"sourceType":"module"}