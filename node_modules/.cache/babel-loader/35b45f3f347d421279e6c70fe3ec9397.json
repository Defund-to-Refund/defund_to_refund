{"ast":null,"code":"import { ContinuousScale } from \"./continuous_scale\";\nexport class LogScale extends ContinuousScale {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  compute(x) {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n\n    let value;\n    if (inter_factor == 0) value = 0;else {\n      const _x = (Math.log(x) - inter_offset) / inter_factor;\n\n      if (isFinite(_x)) value = _x * factor + offset;else value = NaN;\n    }\n    return value;\n  }\n\n  v_compute(xs) {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n\n    const result = new Float64Array(xs.length);\n\n    if (inter_factor == 0) {\n      for (let i = 0; i < xs.length; i++) result[i] = 0;\n    } else {\n      for (let i = 0; i < xs.length; i++) {\n        const _x = (Math.log(xs[i]) - inter_offset) / inter_factor;\n\n        let value;\n        if (isFinite(_x)) value = _x * factor + offset;else value = NaN;\n        result[i] = value;\n      }\n    }\n\n    return result;\n  }\n\n  invert(xprime) {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n\n    const value = (xprime - offset) / factor;\n    return Math.exp(inter_factor * value + inter_offset);\n  }\n\n  v_invert(xprimes) {\n    const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n\n    const result = new Float64Array(xprimes.length);\n\n    for (let i = 0; i < xprimes.length; i++) {\n      const value = (xprimes[i] - offset) / factor;\n      result[i] = Math.exp(inter_factor * value + inter_offset);\n    }\n\n    return result;\n  }\n\n  _get_safe_factor(orig_start, orig_end) {\n    let start = orig_start < 0 ? 0 : orig_start;\n    let end = orig_end < 0 ? 0 : orig_end;\n\n    if (start == end) {\n      if (start == 0) [start, end] = [1, 10];else {\n        const log_val = Math.log(start) / Math.log(10);\n        start = 10 ** Math.floor(log_val);\n        if (Math.ceil(log_val) != Math.floor(log_val)) end = 10 ** Math.ceil(log_val);else end = 10 ** (Math.ceil(log_val) + 1);\n      }\n    }\n\n    return [start, end];\n  }\n  /*protected*/\n\n\n  _compute_state() {\n    const source_start = this.source_range.start;\n    const source_end = this.source_range.end;\n    const target_start = this.target_range.start;\n    const target_end = this.target_range.end;\n    const screen_range = target_end - target_start;\n\n    const [start, end] = this._get_safe_factor(source_start, source_end);\n\n    let inter_factor;\n    let inter_offset;\n\n    if (start == 0) {\n      inter_factor = Math.log(end);\n      inter_offset = 0;\n    } else {\n      inter_factor = Math.log(end) - Math.log(start);\n      inter_offset = Math.log(start);\n    }\n\n    const factor = screen_range;\n    const offset = target_start;\n    return [factor, offset, inter_factor, inter_offset];\n  }\n\n}\nLogScale.__name__ = \"LogScale\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/scales/log_scale.js"],"names":["ContinuousScale","LogScale","constructor","attrs","compute","x","factor","offset","inter_factor","inter_offset","_compute_state","value","_x","Math","log","isFinite","NaN","v_compute","xs","result","Float64Array","length","i","invert","xprime","exp","v_invert","xprimes","_get_safe_factor","orig_start","orig_end","start","end","log_val","floor","ceil","source_start","source_range","source_end","target_start","target_range","target_end","screen_range","__name__"],"mappings":"AAAA,SAASA,eAAT,QAAgC,oBAAhC;AACA,OAAO,MAAMC,QAAN,SAAuBD,eAAvB,CAAuC;AAC1CE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACDC,EAAAA,OAAO,CAACC,CAAD,EAAI;AACP,UAAM,CAACC,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,IAA+C,KAAKC,cAAL,EAArD;;AACA,QAAIC,KAAJ;AACA,QAAIH,YAAY,IAAI,CAApB,EACIG,KAAK,GAAG,CAAR,CADJ,KAEK;AACD,YAAMC,EAAE,GAAG,CAACC,IAAI,CAACC,GAAL,CAAST,CAAT,IAAcI,YAAf,IAA+BD,YAA1C;;AACA,UAAIO,QAAQ,CAACH,EAAD,CAAZ,EACID,KAAK,GAAGC,EAAE,GAAGN,MAAL,GAAcC,MAAtB,CADJ,KAGII,KAAK,GAAGK,GAAR;AACP;AACD,WAAOL,KAAP;AACH;;AACDM,EAAAA,SAAS,CAACC,EAAD,EAAK;AACV,UAAM,CAACZ,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,IAA+C,KAAKC,cAAL,EAArD;;AACA,UAAMS,MAAM,GAAG,IAAIC,YAAJ,CAAiBF,EAAE,CAACG,MAApB,CAAf;;AACA,QAAIb,YAAY,IAAI,CAApB,EAAuB;AACnB,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+BC,CAAC,EAAhC,EACIH,MAAM,CAACG,CAAD,CAAN,GAAY,CAAZ;AACP,KAHD,MAIK;AACD,WAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACG,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAChC,cAAMV,EAAE,GAAG,CAACC,IAAI,CAACC,GAAL,CAASI,EAAE,CAACI,CAAD,CAAX,IAAkBb,YAAnB,IAAmCD,YAA9C;;AACA,YAAIG,KAAJ;AACA,YAAII,QAAQ,CAACH,EAAD,CAAZ,EACID,KAAK,GAAGC,EAAE,GAAGN,MAAL,GAAcC,MAAtB,CADJ,KAGII,KAAK,GAAGK,GAAR;AACJG,QAAAA,MAAM,CAACG,CAAD,CAAN,GAAYX,KAAZ;AACH;AACJ;;AACD,WAAOQ,MAAP;AACH;;AACDI,EAAAA,MAAM,CAACC,MAAD,EAAS;AACX,UAAM,CAAClB,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,IAA+C,KAAKC,cAAL,EAArD;;AACA,UAAMC,KAAK,GAAG,CAACa,MAAM,GAAGjB,MAAV,IAAoBD,MAAlC;AACA,WAAOO,IAAI,CAACY,GAAL,CAASjB,YAAY,GAAGG,KAAf,GAAuBF,YAAhC,CAAP;AACH;;AACDiB,EAAAA,QAAQ,CAACC,OAAD,EAAU;AACd,UAAM,CAACrB,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,IAA+C,KAAKC,cAAL,EAArD;;AACA,UAAMS,MAAM,GAAG,IAAIC,YAAJ,CAAiBO,OAAO,CAACN,MAAzB,CAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,OAAO,CAACN,MAA5B,EAAoCC,CAAC,EAArC,EAAyC;AACrC,YAAMX,KAAK,GAAG,CAACgB,OAAO,CAACL,CAAD,CAAP,GAAaf,MAAd,IAAwBD,MAAtC;AACAa,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAYT,IAAI,CAACY,GAAL,CAASjB,YAAY,GAAGG,KAAf,GAAuBF,YAAhC,CAAZ;AACH;;AACD,WAAOU,MAAP;AACH;;AACDS,EAAAA,gBAAgB,CAACC,UAAD,EAAaC,QAAb,EAAuB;AACnC,QAAIC,KAAK,GAAGF,UAAU,GAAG,CAAb,GAAiB,CAAjB,GAAqBA,UAAjC;AACA,QAAIG,GAAG,GAAGF,QAAQ,GAAG,CAAX,GAAe,CAAf,GAAmBA,QAA7B;;AACA,QAAIC,KAAK,IAAIC,GAAb,EAAkB;AACd,UAAID,KAAK,IAAI,CAAb,EACI,CAACA,KAAD,EAAQC,GAAR,IAAe,CAAC,CAAD,EAAI,EAAJ,CAAf,CADJ,KAEK;AACD,cAAMC,OAAO,GAAGpB,IAAI,CAACC,GAAL,CAASiB,KAAT,IAAkBlB,IAAI,CAACC,GAAL,CAAS,EAAT,CAAlC;AACAiB,QAAAA,KAAK,GAAG,MAAMlB,IAAI,CAACqB,KAAL,CAAWD,OAAX,CAAd;AACA,YAAIpB,IAAI,CAACsB,IAAL,CAAUF,OAAV,KAAsBpB,IAAI,CAACqB,KAAL,CAAWD,OAAX,CAA1B,EACID,GAAG,GAAG,MAAMnB,IAAI,CAACsB,IAAL,CAAUF,OAAV,CAAZ,CADJ,KAGID,GAAG,GAAG,OAAOnB,IAAI,CAACsB,IAAL,CAAUF,OAAV,IAAqB,CAA5B,CAAN;AACP;AACJ;;AACD,WAAO,CAACF,KAAD,EAAQC,GAAR,CAAP;AACH;AACD;;;AAActB,EAAAA,cAAc,GAAG;AAC3B,UAAM0B,YAAY,GAAG,KAAKC,YAAL,CAAkBN,KAAvC;AACA,UAAMO,UAAU,GAAG,KAAKD,YAAL,CAAkBL,GAArC;AACA,UAAMO,YAAY,GAAG,KAAKC,YAAL,CAAkBT,KAAvC;AACA,UAAMU,UAAU,GAAG,KAAKD,YAAL,CAAkBR,GAArC;AACA,UAAMU,YAAY,GAAGD,UAAU,GAAGF,YAAlC;;AACA,UAAM,CAACR,KAAD,EAAQC,GAAR,IAAe,KAAKJ,gBAAL,CAAsBQ,YAAtB,EAAoCE,UAApC,CAArB;;AACA,QAAI9B,YAAJ;AACA,QAAIC,YAAJ;;AACA,QAAIsB,KAAK,IAAI,CAAb,EAAgB;AACZvB,MAAAA,YAAY,GAAGK,IAAI,CAACC,GAAL,CAASkB,GAAT,CAAf;AACAvB,MAAAA,YAAY,GAAG,CAAf;AACH,KAHD,MAIK;AACDD,MAAAA,YAAY,GAAGK,IAAI,CAACC,GAAL,CAASkB,GAAT,IAAgBnB,IAAI,CAACC,GAAL,CAASiB,KAAT,CAA/B;AACAtB,MAAAA,YAAY,GAAGI,IAAI,CAACC,GAAL,CAASiB,KAAT,CAAf;AACH;;AACD,UAAMzB,MAAM,GAAGoC,YAAf;AACA,UAAMnC,MAAM,GAAGgC,YAAf;AACA,WAAO,CAACjC,MAAD,EAASC,MAAT,EAAiBC,YAAjB,EAA+BC,YAA/B,CAAP;AACH;;AAzFyC;AA2F9CR,QAAQ,CAAC0C,QAAT,GAAoB,UAApB","sourcesContent":["import { ContinuousScale } from \"./continuous_scale\";\nexport class LogScale extends ContinuousScale {\n    constructor(attrs) {\n        super(attrs);\n    }\n    compute(x) {\n        const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n        let value;\n        if (inter_factor == 0)\n            value = 0;\n        else {\n            const _x = (Math.log(x) - inter_offset) / inter_factor;\n            if (isFinite(_x))\n                value = _x * factor + offset;\n            else\n                value = NaN;\n        }\n        return value;\n    }\n    v_compute(xs) {\n        const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n        const result = new Float64Array(xs.length);\n        if (inter_factor == 0) {\n            for (let i = 0; i < xs.length; i++)\n                result[i] = 0;\n        }\n        else {\n            for (let i = 0; i < xs.length; i++) {\n                const _x = (Math.log(xs[i]) - inter_offset) / inter_factor;\n                let value;\n                if (isFinite(_x))\n                    value = _x * factor + offset;\n                else\n                    value = NaN;\n                result[i] = value;\n            }\n        }\n        return result;\n    }\n    invert(xprime) {\n        const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n        const value = (xprime - offset) / factor;\n        return Math.exp(inter_factor * value + inter_offset);\n    }\n    v_invert(xprimes) {\n        const [factor, offset, inter_factor, inter_offset] = this._compute_state();\n        const result = new Float64Array(xprimes.length);\n        for (let i = 0; i < xprimes.length; i++) {\n            const value = (xprimes[i] - offset) / factor;\n            result[i] = Math.exp(inter_factor * value + inter_offset);\n        }\n        return result;\n    }\n    _get_safe_factor(orig_start, orig_end) {\n        let start = orig_start < 0 ? 0 : orig_start;\n        let end = orig_end < 0 ? 0 : orig_end;\n        if (start == end) {\n            if (start == 0)\n                [start, end] = [1, 10];\n            else {\n                const log_val = Math.log(start) / Math.log(10);\n                start = 10 ** Math.floor(log_val);\n                if (Math.ceil(log_val) != Math.floor(log_val))\n                    end = 10 ** Math.ceil(log_val);\n                else\n                    end = 10 ** (Math.ceil(log_val) + 1);\n            }\n        }\n        return [start, end];\n    }\n    /*protected*/ _compute_state() {\n        const source_start = this.source_range.start;\n        const source_end = this.source_range.end;\n        const target_start = this.target_range.start;\n        const target_end = this.target_range.end;\n        const screen_range = target_end - target_start;\n        const [start, end] = this._get_safe_factor(source_start, source_end);\n        let inter_factor;\n        let inter_offset;\n        if (start == 0) {\n            inter_factor = Math.log(end);\n            inter_offset = 0;\n        }\n        else {\n            inter_factor = Math.log(end) - Math.log(start);\n            inter_offset = Math.log(start);\n        }\n        const factor = screen_range;\n        const offset = target_start;\n        return [factor, offset, inter_factor, inter_offset];\n    }\n}\nLogScale.__name__ = \"LogScale\";\n//# sourceMappingURL=log_scale.js.map"]},"metadata":{},"sourceType":"module"}