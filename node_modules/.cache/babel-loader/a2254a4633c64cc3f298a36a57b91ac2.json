{"ast":null,"code":"var _jsxFileName = \"/Users/osifo1131/Desktop/defund_to_refund/src/App.js\";\nimport React, { useState } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport Title from './components/title';\nimport TotalFunds from './components/totalFunds';\nimport SliderBar from './components/sliderBar';\nimport { groups } from './dummy_data/groups';\n\nfunction App() {\n  const [funds, setFunds] = useState(1000000000);\n  const [percentage, setPercentage] = useState([0, 0, 0, 0]);\n  const [totalPercentage, setTotalPercentage] = useState(0); //for (i =0; i != percentage.length ; i ++){\n  //i / 100 = totalPercentage \n  // totalPercentage * funds = setFunds\n  //funds - setFunds = funds\n  //TotalFunds = funds\n  //}\n\n  const handlePercentage = (e, value) => {\n    let index = parseInt(e.target.id, 10);\n    setPercentage([...percentage.slice(0, index), value, ...percentage.slice(index + 1)]).then();\n    let newFunds = 1000000000 - 1000000000 * (value / 100);\n    console.log(newFunds);\n    setFunds(newFunds);\n  };\n\n  const groupSections = groups.map((group, idx) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: idx,\n      style: {\n        display: 'flex'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }\n    }, group, \": \"), /*#__PURE__*/React.createElement(SliderBar, {\n      handlePercentage: handlePercentage,\n      idx: idx,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }\n    }, \"Percentage: \", percentage[idx]));\n  });\n  console.log(percentage);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Title, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(TotalFunds, {\n    funds: funds,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, groupSections)));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/osifo1131/Desktop/defund_to_refund/src/App.js"],"names":["React","useState","Title","TotalFunds","SliderBar","groups","App","funds","setFunds","percentage","setPercentage","totalPercentage","setTotalPercentage","handlePercentage","e","value","index","parseInt","target","id","slice","then","newFunds","console","log","groupSections","map","group","idx","display","flexDirection"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,OAAO,WAAP;AAEA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,SAASC,MAAT,QAAuB,qBAAvB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAAEC,KAAF,EAASC,QAAT,IAAsBP,QAAQ,CAAC,UAAD,CAApC;AACA,QAAM,CAAEQ,UAAF,EAAcC,aAAd,IAA+BT,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,CAA7C;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,CAAD,CAAtD,CAHa,CAKb;AACA;AACA;AACA;AACA;AAEA;;AAEA,QAAMY,gBAAgB,GAAG,CAACC,CAAD,EAAIC,KAAJ,KAAc;AACrC,QAAIC,KAAK,GAAGC,QAAQ,CAACH,CAAC,CAACI,MAAF,CAASC,EAAV,EAAc,EAAd,CAApB;AACAT,IAAAA,aAAa,CAAC,CAAC,GAAGD,UAAU,CAACW,KAAX,CAAiB,CAAjB,EAAoBJ,KAApB,CAAJ,EAAgCD,KAAhC,EAAuC,GAAGN,UAAU,CAACW,KAAX,CAAiBJ,KAAK,GAAC,CAAvB,CAA1C,CAAD,CAAb,CACCK,IADD;AAKA,QAAIC,QAAQ,GAAG,aAAc,cAAcP,KAAK,GAAG,GAAtB,CAA7B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAd,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACD,GAVD;;AAYA,QAAMG,aAAa,GAAGpB,MAAM,CAACqB,GAAP,CAAY,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAChD,wBACE;AAAK,MAAA,GAAG,EAAEA,GAAV;AAAe,MAAA,KAAK,EAAE;AAACC,QAAAA,OAAO,EAAE;AAAV,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,KAAJ,OADF,eAEE,oBAAC,SAAD;AAAW,MAAA,gBAAgB,EAAEd,gBAA7B;AAA+C,MAAA,GAAG,EAAEe,GAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAgBnB,UAAU,CAACmB,GAAD,CAA1B,CAHF,CADF;AAOD,GARqB,CAAtB;AAUAL,EAAAA,OAAO,CAACC,GAAR,CAAYf,UAAZ;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE;AAAQ,IAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEF,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAGE;AAAK,IAAA,KAAK,EAAE;AAAEsB,MAAAA,OAAO,EAAE,MAAX;AAAmBC,MAAAA,aAAa,EAAE;AAAlC,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGL,aADH,CAHF,CAFF,CADF;AAYD;;AAED,eAAenB,GAAf","sourcesContent":["import React, { useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Title from './components/title'\nimport TotalFunds from './components/totalFunds'\nimport SliderBar from './components/sliderBar'\nimport { groups } from './dummy_data/groups'\n\nfunction App() {\n  const [ funds, setFunds ] = useState(1000000000)\n  const [ percentage, setPercentage] = useState([0, 0, 0, 0])\n  const [totalPercentage, setTotalPercentage] = useState(0)\n\n  //for (i =0; i != percentage.length ; i ++){\n  //i / 100 = totalPercentage \n  // totalPercentage * funds = setFunds\n  //funds - setFunds = funds\n  //TotalFunds = funds\n\n  //}\n  \n  const handlePercentage = (e, value) => {\n    let index = parseInt(e.target.id, 10)\n    setPercentage([...percentage.slice(0, index), value, ...percentage.slice(index+1)])\n    .then()\n\n   \n    \n    let newFunds = 1000000000 - (1000000000 * (value / 100)) \n    console.log(newFunds)\n    setFunds(newFunds)\n  }\n\n  const groupSections = groups.map( (group, idx) => {\n    return (\n      <div key={idx} style={{display: 'flex'}}>\n        <p>{group}: </p>\n        <SliderBar handlePercentage={handlePercentage} idx={idx}/>\n        <p>Percentage: {percentage[idx]}</p>\n      </div>\n    )\n  })\n\n  console.log(percentage)\n  return (\n    <div className=\"App\">\n\n      <header className=\"App-header\">\n        <Title />\n        <TotalFunds funds={funds} />\n        <div style={{ display: 'flex', flexDirection: 'column'}}>\n          {groupSections}\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"]},"metadata":{},"sourceType":"module"}