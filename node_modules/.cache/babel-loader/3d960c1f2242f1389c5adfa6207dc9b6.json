{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport { OpenHead } from \"./arrow_head\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport * as p from \"../../core/properties\";\nimport { atan2 } from \"../../core/util/math\";\nexport class ArrowView extends AnnotationView {\n  initialize() {\n    super.initialize();\n    if (this.model.source == null) this.model.source = new ColumnDataSource();\n    this.set_data(this.model.source);\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.change, () => this.set_data(this.model.source));\n    this.connect(this.model.source.streaming, () => this.set_data(this.model.source));\n    this.connect(this.model.source.patching, () => this.set_data(this.model.source));\n  }\n\n  set_data(source) {\n    super.set_data(source);\n    this.visuals.warm_cache(source);\n    this.plot_view.request_render();\n  }\n\n  _map_data() {\n    const {\n      frame\n    } = this.plot_view;\n    let sx_start, sy_start;\n\n    if (this.model.start_units == 'data') {\n      sx_start = frame.xscales[this.model.x_range_name].v_compute(this._x_start);\n      sy_start = frame.yscales[this.model.y_range_name].v_compute(this._y_start);\n    } else {\n      sx_start = frame.xview.v_compute(this._x_start);\n      sy_start = frame.yview.v_compute(this._y_start);\n    }\n\n    let sx_end, sy_end;\n\n    if (this.model.end_units == 'data') {\n      sx_end = frame.xscales[this.model.x_range_name].v_compute(this._x_end);\n      sy_end = frame.yscales[this.model.y_range_name].v_compute(this._y_end);\n    } else {\n      sx_end = frame.xview.v_compute(this._x_end);\n      sy_end = frame.yview.v_compute(this._y_end);\n    }\n\n    return [[sx_start, sy_start], [sx_end, sy_end]];\n  }\n\n  render() {\n    if (!this.model.visible) return;\n    const {\n      ctx\n    } = this.plot_view.canvas_view;\n    ctx.save(); // Order in this function is important. First we draw all the arrow heads.\n\n    const [start, end] = this._map_data();\n\n    if (this.model.end != null) this._arrow_head(ctx, \"render\", this.model.end, start, end);\n    if (this.model.start != null) this._arrow_head(ctx, \"render\", this.model.start, end, start); // Next we call .clip on all the arrow heads, inside an initial canvas sized\n    // rect, to create an \"inverted\" clip region for the arrow heads\n\n    ctx.beginPath();\n    const {\n      x,\n      y,\n      width,\n      height\n    } = this.plot_view.frame.bbox;\n    ctx.rect(x, y, width, height);\n    if (this.model.end != null) this._arrow_head(ctx, \"clip\", this.model.end, start, end);\n    if (this.model.start != null) this._arrow_head(ctx, \"clip\", this.model.start, end, start);\n    ctx.closePath();\n    ctx.clip(); // Finally we draw the arrow body, with the clipping regions set up. This prevents\n    // \"fat\" arrows from overlapping the arrow head in a bad way.\n\n    this._arrow_body(ctx, start, end);\n\n    ctx.restore();\n  }\n\n  _arrow_head(ctx, action, head, start, end) {\n    for (let i = 0, _end = this._x_start.length; i < _end; i++) {\n      // arrow head runs orthogonal to arrow body\n      const angle = Math.PI / 2 + atan2([start[0][i], start[1][i]], [end[0][i], end[1][i]]);\n      ctx.save();\n      ctx.translate(end[0][i], end[1][i]);\n      ctx.rotate(angle);\n      if (action == \"render\") head.render(ctx, i);else if (action == \"clip\") head.clip(ctx, i);\n      ctx.restore();\n    }\n  }\n\n  _arrow_body(ctx, start, end) {\n    if (!this.visuals.line.doit) return;\n\n    for (let i = 0, n = this._x_start.length; i < n; i++) {\n      this.visuals.line.set_vectorize(ctx, i);\n      ctx.beginPath();\n      ctx.moveTo(start[0][i], start[1][i]);\n      ctx.lineTo(end[0][i], end[1][i]);\n      ctx.stroke();\n    }\n  }\n\n}\nArrowView.__name__ = \"ArrowView\";\nexport class Arrow extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Arrow() {\n    this.prototype.default_view = ArrowView;\n    this.mixins(['line']);\n    this.define({\n      x_start: [p.NumberSpec],\n      y_start: [p.NumberSpec],\n      start_units: [p.SpatialUnits, 'data'],\n      start: [p.Instance, null],\n      x_end: [p.NumberSpec],\n      y_end: [p.NumberSpec],\n      end_units: [p.SpatialUnits, 'data'],\n      end: [p.Instance, () => new OpenHead({})],\n      source: [p.Instance],\n      x_range_name: [p.String, 'default'],\n      y_range_name: [p.String, 'default']\n    });\n  }\n\n}\nArrow.__name__ = \"Arrow\";\nArrow.init_Arrow();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/arrow.js"],"names":["Annotation","AnnotationView","OpenHead","ColumnDataSource","p","atan2","ArrowView","initialize","model","source","set_data","connect_signals","connect","change","streaming","patching","visuals","warm_cache","plot_view","request_render","_map_data","frame","sx_start","sy_start","start_units","xscales","x_range_name","v_compute","_x_start","yscales","y_range_name","_y_start","xview","yview","sx_end","sy_end","end_units","_x_end","_y_end","render","visible","ctx","canvas_view","save","start","end","_arrow_head","beginPath","x","y","width","height","bbox","rect","closePath","clip","_arrow_body","restore","action","head","i","_end","length","angle","Math","PI","translate","rotate","line","doit","n","set_vectorize","moveTo","lineTo","stroke","__name__","Arrow","constructor","attrs","init_Arrow","prototype","default_view","mixins","define","x_start","NumberSpec","y_start","SpatialUnits","Instance","x_end","y_end","String"],"mappings":"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","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport { OpenHead } from \"./arrow_head\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport * as p from \"../../core/properties\";\nimport { atan2 } from \"../../core/util/math\";\nexport class ArrowView extends AnnotationView {\n    initialize() {\n        super.initialize();\n        if (this.model.source == null)\n            this.model.source = new ColumnDataSource();\n        this.set_data(this.model.source);\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.change, () => this.set_data(this.model.source));\n        this.connect(this.model.source.streaming, () => this.set_data(this.model.source));\n        this.connect(this.model.source.patching, () => this.set_data(this.model.source));\n    }\n    set_data(source) {\n        super.set_data(source);\n        this.visuals.warm_cache(source);\n        this.plot_view.request_render();\n    }\n    _map_data() {\n        const { frame } = this.plot_view;\n        let sx_start, sy_start;\n        if (this.model.start_units == 'data') {\n            sx_start = frame.xscales[this.model.x_range_name].v_compute(this._x_start);\n            sy_start = frame.yscales[this.model.y_range_name].v_compute(this._y_start);\n        }\n        else {\n            sx_start = frame.xview.v_compute(this._x_start);\n            sy_start = frame.yview.v_compute(this._y_start);\n        }\n        let sx_end, sy_end;\n        if (this.model.end_units == 'data') {\n            sx_end = frame.xscales[this.model.x_range_name].v_compute(this._x_end);\n            sy_end = frame.yscales[this.model.y_range_name].v_compute(this._y_end);\n        }\n        else {\n            sx_end = frame.xview.v_compute(this._x_end);\n            sy_end = frame.yview.v_compute(this._y_end);\n        }\n        return [[sx_start, sy_start], [sx_end, sy_end]];\n    }\n    render() {\n        if (!this.model.visible)\n            return;\n        const { ctx } = this.plot_view.canvas_view;\n        ctx.save();\n        // Order in this function is important. First we draw all the arrow heads.\n        const [start, end] = this._map_data();\n        if (this.model.end != null)\n            this._arrow_head(ctx, \"render\", this.model.end, start, end);\n        if (this.model.start != null)\n            this._arrow_head(ctx, \"render\", this.model.start, end, start);\n        // Next we call .clip on all the arrow heads, inside an initial canvas sized\n        // rect, to create an \"inverted\" clip region for the arrow heads\n        ctx.beginPath();\n        const { x, y, width, height } = this.plot_view.frame.bbox;\n        ctx.rect(x, y, width, height);\n        if (this.model.end != null)\n            this._arrow_head(ctx, \"clip\", this.model.end, start, end);\n        if (this.model.start != null)\n            this._arrow_head(ctx, \"clip\", this.model.start, end, start);\n        ctx.closePath();\n        ctx.clip();\n        // Finally we draw the arrow body, with the clipping regions set up. This prevents\n        // \"fat\" arrows from overlapping the arrow head in a bad way.\n        this._arrow_body(ctx, start, end);\n        ctx.restore();\n    }\n    _arrow_head(ctx, action, head, start, end) {\n        for (let i = 0, _end = this._x_start.length; i < _end; i++) {\n            // arrow head runs orthogonal to arrow body\n            const angle = Math.PI / 2 + atan2([start[0][i], start[1][i]], [end[0][i], end[1][i]]);\n            ctx.save();\n            ctx.translate(end[0][i], end[1][i]);\n            ctx.rotate(angle);\n            if (action == \"render\")\n                head.render(ctx, i);\n            else if (action == \"clip\")\n                head.clip(ctx, i);\n            ctx.restore();\n        }\n    }\n    _arrow_body(ctx, start, end) {\n        if (!this.visuals.line.doit)\n            return;\n        for (let i = 0, n = this._x_start.length; i < n; i++) {\n            this.visuals.line.set_vectorize(ctx, i);\n            ctx.beginPath();\n            ctx.moveTo(start[0][i], start[1][i]);\n            ctx.lineTo(end[0][i], end[1][i]);\n            ctx.stroke();\n        }\n    }\n}\nArrowView.__name__ = \"ArrowView\";\nexport class Arrow extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Arrow() {\n        this.prototype.default_view = ArrowView;\n        this.mixins(['line']);\n        this.define({\n            x_start: [p.NumberSpec],\n            y_start: [p.NumberSpec],\n            start_units: [p.SpatialUnits, 'data'],\n            start: [p.Instance, null],\n            x_end: [p.NumberSpec],\n            y_end: [p.NumberSpec],\n            end_units: [p.SpatialUnits, 'data'],\n            end: [p.Instance, () => new OpenHead({})],\n            source: [p.Instance],\n            x_range_name: [p.String, 'default'],\n            y_range_name: [p.String, 'default'],\n        });\n    }\n}\nArrow.__name__ = \"Arrow\";\nArrow.init_Arrow();\n//# sourceMappingURL=arrow.js.map"]},"metadata":{},"sourceType":"module"}