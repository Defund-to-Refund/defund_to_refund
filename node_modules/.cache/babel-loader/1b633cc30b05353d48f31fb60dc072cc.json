{"ast":null,"code":"import * as proj from \"../../core/util/projections\";\nimport { extend } from \"../../core/util/object\";\nimport { Renderer, RendererView } from \"../renderers/renderer\";\nexport class AnnotationView extends RendererView {\n  get panel() {\n    return this.layout;\n  }\n\n  get_size() {\n    if (this.model.visible) {\n      const {\n        width,\n        height\n      } = this._get_size();\n\n      return {\n        width: Math.round(width),\n        height: Math.round(height)\n      };\n    } else return {\n      width: 0,\n      height: 0\n    };\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    const p = this.model.properties;\n    this.on_change(p.visible, () => this.plot_view.request_layout());\n  }\n\n  _get_size() {\n    throw new Error(\"not implemented\");\n  }\n\n  get ctx() {\n    return this.plot_view.canvas_view.ctx;\n  }\n\n  set_data(source) {\n    const data = this.model.materialize_dataspecs(source);\n    extend(this, data);\n\n    if (this.plot_model.use_map) {\n      const self = this;\n      if (self._x != null) [self._x, self._y] = proj.project_xy(self._x, self._y);\n      if (self._xs != null) [self._xs, self._ys] = proj.project_xsys(self._xs, self._ys);\n    }\n  }\n\n  get needs_clip() {\n    return this.layout == null; // TODO: change this, when center layout is fully implemented\n  }\n\n  serializable_state() {\n    const state = super.serializable_state();\n    return this.layout == null ? state : Object.assign(Object.assign({}, state), {\n      bbox: this.layout.bbox.box\n    });\n  }\n\n}\nAnnotationView.__name__ = \"AnnotationView\";\nexport class Annotation extends Renderer {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Annotation() {\n    this.override({\n      level: 'annotation'\n    });\n  }\n\n}\nAnnotation.__name__ = \"Annotation\";\nAnnotation.init_Annotation();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/annotation.js"],"names":["proj","extend","Renderer","RendererView","AnnotationView","panel","layout","get_size","model","visible","width","height","_get_size","Math","round","connect_signals","p","properties","on_change","plot_view","request_layout","Error","ctx","canvas_view","set_data","source","data","materialize_dataspecs","plot_model","use_map","self","_x","_y","project_xy","_xs","_ys","project_xsys","needs_clip","serializable_state","state","Object","assign","bbox","box","__name__","Annotation","constructor","attrs","init_Annotation","override","level"],"mappings":"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","sourcesContent":["import * as proj from \"../../core/util/projections\";\nimport { extend } from \"../../core/util/object\";\nimport { Renderer, RendererView } from \"../renderers/renderer\";\nexport class AnnotationView extends RendererView {\n    get panel() {\n        return this.layout;\n    }\n    get_size() {\n        if (this.model.visible) {\n            const { width, height } = this._get_size();\n            return { width: Math.round(width), height: Math.round(height) };\n        }\n        else\n            return { width: 0, height: 0 };\n    }\n    connect_signals() {\n        super.connect_signals();\n        const p = this.model.properties;\n        this.on_change(p.visible, () => this.plot_view.request_layout());\n    }\n    _get_size() {\n        throw new Error(\"not implemented\");\n    }\n    get ctx() {\n        return this.plot_view.canvas_view.ctx;\n    }\n    set_data(source) {\n        const data = this.model.materialize_dataspecs(source);\n        extend(this, data);\n        if (this.plot_model.use_map) {\n            const self = this;\n            if (self._x != null)\n                [self._x, self._y] = proj.project_xy(self._x, self._y);\n            if (self._xs != null)\n                [self._xs, self._ys] = proj.project_xsys(self._xs, self._ys);\n        }\n    }\n    get needs_clip() {\n        return this.layout == null; // TODO: change this, when center layout is fully implemented\n    }\n    serializable_state() {\n        const state = super.serializable_state();\n        return this.layout == null ? state : Object.assign(Object.assign({}, state), { bbox: this.layout.bbox.box });\n    }\n}\nAnnotationView.__name__ = \"AnnotationView\";\nexport class Annotation extends Renderer {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Annotation() {\n        this.override({\n            level: 'annotation',\n        });\n    }\n}\nAnnotation.__name__ = \"Annotation\";\nAnnotation.init_Annotation();\n//# sourceMappingURL=annotation.js.map"]},"metadata":{},"sourceType":"module"}