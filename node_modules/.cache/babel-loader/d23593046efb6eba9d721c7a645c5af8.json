{"ast":null,"code":"import { Message } from \"./message\";\nexport class Receiver {\n  constructor() {\n    this.message = null;\n    this._partial = null;\n    this._fragments = [];\n    this._buf_header = null;\n    this._current_consumer = this._HEADER;\n  }\n\n  consume(fragment) {\n    this._current_consumer(fragment);\n  }\n\n  _HEADER(fragment) {\n    this._assume_text(fragment);\n\n    this.message = null;\n    this._partial = null;\n    this._fragments = [fragment];\n    this._buf_header = null;\n    this._current_consumer = this._METADATA;\n  }\n\n  _METADATA(fragment) {\n    this._assume_text(fragment);\n\n    this._fragments.push(fragment);\n\n    this._current_consumer = this._CONTENT;\n  }\n\n  _CONTENT(fragment) {\n    this._assume_text(fragment);\n\n    this._fragments.push(fragment);\n\n    const [header_json, metadata_json, content_json] = this._fragments.slice(0, 3);\n\n    this._partial = Message.assemble(header_json, metadata_json, content_json);\n\n    this._check_complete();\n  }\n\n  _BUFFER_HEADER(fragment) {\n    this._assume_text(fragment);\n\n    this._buf_header = fragment; // XXX: assume text but Header is expected\n\n    this._current_consumer = this._BUFFER_PAYLOAD;\n  }\n\n  _BUFFER_PAYLOAD(fragment) {\n    this._assume_binary(fragment);\n\n    this._partial.assemble_buffer(this._buf_header, fragment);\n\n    this._check_complete();\n  }\n\n  _assume_text(fragment) {\n    if (fragment instanceof ArrayBuffer) throw new Error(\"Expected text fragment but received binary fragment\");\n  }\n\n  _assume_binary(fragment) {\n    if (!(fragment instanceof ArrayBuffer)) throw new Error(\"Expected binary fragment but received text fragment\");\n  }\n\n  _check_complete() {\n    if (this._partial.complete()) {\n      this.message = this._partial;\n      this._current_consumer = this._HEADER;\n    } else this._current_consumer = this._BUFFER_HEADER;\n  }\n\n}\nReceiver.__name__ = \"Receiver\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/protocol/receiver.js"],"names":["Message","Receiver","constructor","message","_partial","_fragments","_buf_header","_current_consumer","_HEADER","consume","fragment","_assume_text","_METADATA","push","_CONTENT","header_json","metadata_json","content_json","slice","assemble","_check_complete","_BUFFER_HEADER","_BUFFER_PAYLOAD","_assume_binary","assemble_buffer","ArrayBuffer","Error","complete","__name__"],"mappings":"AAAA,SAASA,OAAT,QAAwB,WAAxB;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,GAAG;AACV,SAAKC,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,UAAL,GAAkB,EAAlB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,iBAAL,GAAyB,KAAKC,OAA9B;AACH;;AACDC,EAAAA,OAAO,CAACC,QAAD,EAAW;AACd,SAAKH,iBAAL,CAAuBG,QAAvB;AACH;;AACDF,EAAAA,OAAO,CAACE,QAAD,EAAW;AACd,SAAKC,YAAL,CAAkBD,QAAlB;;AACA,SAAKP,OAAL,GAAe,IAAf;AACA,SAAKC,QAAL,GAAgB,IAAhB;AACA,SAAKC,UAAL,GAAkB,CAACK,QAAD,CAAlB;AACA,SAAKJ,WAAL,GAAmB,IAAnB;AACA,SAAKC,iBAAL,GAAyB,KAAKK,SAA9B;AACH;;AACDA,EAAAA,SAAS,CAACF,QAAD,EAAW;AAChB,SAAKC,YAAL,CAAkBD,QAAlB;;AACA,SAAKL,UAAL,CAAgBQ,IAAhB,CAAqBH,QAArB;;AACA,SAAKH,iBAAL,GAAyB,KAAKO,QAA9B;AACH;;AACDA,EAAAA,QAAQ,CAACJ,QAAD,EAAW;AACf,SAAKC,YAAL,CAAkBD,QAAlB;;AACA,SAAKL,UAAL,CAAgBQ,IAAhB,CAAqBH,QAArB;;AACA,UAAM,CAACK,WAAD,EAAcC,aAAd,EAA6BC,YAA7B,IAA6C,KAAKZ,UAAL,CAAgBa,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAAnD;;AACA,SAAKd,QAAL,GAAgBJ,OAAO,CAACmB,QAAR,CAAiBJ,WAAjB,EAA8BC,aAA9B,EAA6CC,YAA7C,CAAhB;;AACA,SAAKG,eAAL;AACH;;AACDC,EAAAA,cAAc,CAACX,QAAD,EAAW;AACrB,SAAKC,YAAL,CAAkBD,QAAlB;;AACA,SAAKJ,WAAL,GAAmBI,QAAnB,CAFqB,CAEQ;;AAC7B,SAAKH,iBAAL,GAAyB,KAAKe,eAA9B;AACH;;AACDA,EAAAA,eAAe,CAACZ,QAAD,EAAW;AACtB,SAAKa,cAAL,CAAoBb,QAApB;;AACA,SAAKN,QAAL,CAAcoB,eAAd,CAA8B,KAAKlB,WAAnC,EAAgDI,QAAhD;;AACA,SAAKU,eAAL;AACH;;AACDT,EAAAA,YAAY,CAACD,QAAD,EAAW;AACnB,QAAIA,QAAQ,YAAYe,WAAxB,EACI,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACP;;AACDH,EAAAA,cAAc,CAACb,QAAD,EAAW;AACrB,QAAI,EAAEA,QAAQ,YAAYe,WAAtB,CAAJ,EACI,MAAM,IAAIC,KAAJ,CAAU,qDAAV,CAAN;AACP;;AACDN,EAAAA,eAAe,GAAG;AACd,QAAI,KAAKhB,QAAL,CAAcuB,QAAd,EAAJ,EAA8B;AAC1B,WAAKxB,OAAL,GAAe,KAAKC,QAApB;AACA,WAAKG,iBAAL,GAAyB,KAAKC,OAA9B;AACH,KAHD,MAKI,KAAKD,iBAAL,GAAyB,KAAKc,cAA9B;AACP;;AAxDiB;AA0DtBpB,QAAQ,CAAC2B,QAAT,GAAoB,UAApB","sourcesContent":["import { Message } from \"./message\";\nexport class Receiver {\n    constructor() {\n        this.message = null;\n        this._partial = null;\n        this._fragments = [];\n        this._buf_header = null;\n        this._current_consumer = this._HEADER;\n    }\n    consume(fragment) {\n        this._current_consumer(fragment);\n    }\n    _HEADER(fragment) {\n        this._assume_text(fragment);\n        this.message = null;\n        this._partial = null;\n        this._fragments = [fragment];\n        this._buf_header = null;\n        this._current_consumer = this._METADATA;\n    }\n    _METADATA(fragment) {\n        this._assume_text(fragment);\n        this._fragments.push(fragment);\n        this._current_consumer = this._CONTENT;\n    }\n    _CONTENT(fragment) {\n        this._assume_text(fragment);\n        this._fragments.push(fragment);\n        const [header_json, metadata_json, content_json] = this._fragments.slice(0, 3);\n        this._partial = Message.assemble(header_json, metadata_json, content_json);\n        this._check_complete();\n    }\n    _BUFFER_HEADER(fragment) {\n        this._assume_text(fragment);\n        this._buf_header = fragment; // XXX: assume text but Header is expected\n        this._current_consumer = this._BUFFER_PAYLOAD;\n    }\n    _BUFFER_PAYLOAD(fragment) {\n        this._assume_binary(fragment);\n        this._partial.assemble_buffer(this._buf_header, fragment);\n        this._check_complete();\n    }\n    _assume_text(fragment) {\n        if (fragment instanceof ArrayBuffer)\n            throw new Error(\"Expected text fragment but received binary fragment\");\n    }\n    _assume_binary(fragment) {\n        if (!(fragment instanceof ArrayBuffer))\n            throw new Error(\"Expected binary fragment but received text fragment\");\n    }\n    _check_complete() {\n        if (this._partial.complete()) {\n            this.message = this._partial;\n            this._current_consumer = this._HEADER;\n        }\n        else\n            this._current_consumer = this._BUFFER_HEADER;\n    }\n}\nReceiver.__name__ = \"Receiver\";\n//# sourceMappingURL=receiver.js.map"]},"metadata":{},"sourceType":"module"}