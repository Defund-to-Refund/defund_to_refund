{"ast":null,"code":"import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport { BoxAnnotation } from \"../../annotations/box_annotation\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_box_zoom } from \"../../../styles/icons\";\nexport class BoxZoomToolView extends GestureToolView {\n  _match_aspect(base_point, curpoint, frame) {\n    // aspect ratio of plot frame\n    const a = frame.bbox.aspect;\n    const hend = frame.bbox.h_range.end;\n    const hstart = frame.bbox.h_range.start;\n    const vend = frame.bbox.v_range.end;\n    const vstart = frame.bbox.v_range.start; // current aspect of cursor-defined box\n\n    let vw = Math.abs(base_point[0] - curpoint[0]);\n    let vh = Math.abs(base_point[1] - curpoint[1]);\n    const va = vh == 0 ? 0 : vw / vh;\n    const [xmod] = va >= a ? [1, va / a] : [a / va, 1]; // OK the code blocks below merit some explanation. They do:\n    //\n    // compute left/right, pin to frame if necessary\n    // compute top/bottom (based on new left/right), pin to frame if necessary\n    // recompute left/right (based on top/bottom), in case top/bottom were pinned\n    // base_point[0] is left\n\n    let left;\n    let right;\n\n    if (base_point[0] <= curpoint[0]) {\n      left = base_point[0];\n      right = base_point[0] + vw * xmod;\n      if (right > hend) right = hend; // base_point[0] is right\n    } else {\n      right = base_point[0];\n      left = base_point[0] - vw * xmod;\n      if (left < hstart) left = hstart;\n    }\n\n    vw = Math.abs(right - left); // base_point[1] is bottom\n\n    let top;\n    let bottom;\n\n    if (base_point[1] <= curpoint[1]) {\n      bottom = base_point[1];\n      top = base_point[1] + vw / a;\n      if (top > vend) top = vend; // base_point[1] is top\n    } else {\n      top = base_point[1];\n      bottom = base_point[1] - vw / a;\n      if (bottom < vstart) bottom = vstart;\n    }\n\n    vh = Math.abs(top - bottom); // base_point[0] is left\n\n    if (base_point[0] <= curpoint[0]) right = base_point[0] + a * vh; // base_point[0] is right\n    else left = base_point[0] - a * vh;\n    return [[left, right], [bottom, top]];\n  }\n\n  _compute_limits(curpoint) {\n    const frame = this.plot_view.frame;\n    const dims = this.model.dimensions;\n    let base_point = this._base_point;\n\n    if (this.model.origin == \"center\") {\n      const [cx, cy] = base_point;\n      const [dx, dy] = curpoint;\n      base_point = [cx - (dx - cx), cy - (dy - cy)];\n    }\n\n    let sx;\n    let sy;\n    if (this.model.match_aspect && dims == 'both') [sx, sy] = this._match_aspect(base_point, curpoint, frame);else [sx, sy] = this.model._get_dim_limits(base_point, curpoint, frame, dims);\n    return [sx, sy];\n  }\n\n  _pan_start(ev) {\n    this._base_point = [ev.sx, ev.sy];\n  }\n\n  _pan(ev) {\n    const curpoint = [ev.sx, ev.sy];\n\n    const [sx, sy] = this._compute_limits(curpoint);\n\n    this.model.overlay.update({\n      left: sx[0],\n      right: sx[1],\n      top: sy[0],\n      bottom: sy[1]\n    });\n  }\n\n  _pan_end(ev) {\n    const curpoint = [ev.sx, ev.sy];\n\n    const [sx, sy] = this._compute_limits(curpoint);\n\n    this._update(sx, sy);\n\n    this.model.overlay.update({\n      left: null,\n      right: null,\n      top: null,\n      bottom: null\n    });\n    this._base_point = null;\n  }\n\n  _update([sx0, sx1], [sy0, sy1]) {\n    // If the viewing window is too small, no-op: it is likely that the user did\n    // not intend to make this box zoom and instead was trying to cancel out of the\n    // zoom, a la matplotlib's ToolZoom. Like matplotlib, set the threshold at 5 pixels.\n    if (Math.abs(sx1 - sx0) <= 5 || Math.abs(sy1 - sy0) <= 5) return;\n    const {\n      xscales,\n      yscales\n    } = this.plot_view.frame;\n    const xrs = {};\n\n    for (const name in xscales) {\n      const scale = xscales[name];\n      const [start, end] = scale.r_invert(sx0, sx1);\n      xrs[name] = {\n        start,\n        end\n      };\n    }\n\n    const yrs = {};\n\n    for (const name in yscales) {\n      const scale = yscales[name];\n      const [start, end] = scale.r_invert(sy0, sy1);\n      yrs[name] = {\n        start,\n        end\n      };\n    }\n\n    const zoom_info = {\n      xrs,\n      yrs\n    };\n    this.plot_view.push_state('box_zoom', {\n      range: zoom_info\n    });\n    this.plot_view.update_range(zoom_info);\n  }\n\n}\nBoxZoomToolView.__name__ = \"BoxZoomToolView\";\n\nconst DEFAULT_BOX_OVERLAY = () => {\n  return new BoxAnnotation({\n    level: \"overlay\",\n    render_mode: \"css\",\n    top_units: \"screen\",\n    left_units: \"screen\",\n    bottom_units: \"screen\",\n    right_units: \"screen\",\n    fill_color: {\n      value: \"lightgrey\"\n    },\n    fill_alpha: {\n      value: 0.5\n    },\n    line_color: {\n      value: \"black\"\n    },\n    line_alpha: {\n      value: 1.0\n    },\n    line_width: {\n      value: 2\n    },\n    line_dash: {\n      value: [4, 4]\n    }\n  });\n};\n\nexport class BoxZoomTool extends GestureTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Box Zoom\";\n    this.icon = bk_tool_icon_box_zoom;\n    this.event_type = \"pan\";\n    this.default_order = 20;\n  }\n\n  static init_BoxZoomTool() {\n    this.prototype.default_view = BoxZoomToolView;\n    this.define({\n      dimensions: [p.Dimensions, \"both\"],\n      overlay: [p.Instance, DEFAULT_BOX_OVERLAY],\n      match_aspect: [p.Boolean, false],\n      origin: [p.BoxOrigin, \"corner\"]\n    });\n    this.register_alias(\"box_zoom\", () => new BoxZoomTool({\n      dimensions: 'both'\n    }));\n    this.register_alias(\"xbox_zoom\", () => new BoxZoomTool({\n      dimensions: 'width'\n    }));\n    this.register_alias(\"ybox_zoom\", () => new BoxZoomTool({\n      dimensions: 'height'\n    }));\n  }\n\n  get tooltip() {\n    return this._get_dim_tooltip(this.tool_name, this.dimensions);\n  }\n\n}\nBoxZoomTool.__name__ = \"BoxZoomTool\";\nBoxZoomTool.init_BoxZoomTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/box_zoom_tool.js"],"names":["GestureTool","GestureToolView","BoxAnnotation","p","bk_tool_icon_box_zoom","BoxZoomToolView","_match_aspect","base_point","curpoint","frame","a","bbox","aspect","hend","h_range","end","hstart","start","vend","v_range","vstart","vw","Math","abs","vh","va","xmod","left","right","top","bottom","_compute_limits","plot_view","dims","model","dimensions","_base_point","origin","cx","cy","dx","dy","sx","sy","match_aspect","_get_dim_limits","_pan_start","ev","_pan","overlay","update","_pan_end","_update","sx0","sx1","sy0","sy1","xscales","yscales","xrs","name","scale","r_invert","yrs","zoom_info","push_state","range","update_range","__name__","DEFAULT_BOX_OVERLAY","level","render_mode","top_units","left_units","bottom_units","right_units","fill_color","value","fill_alpha","line_color","line_alpha","line_width","line_dash","BoxZoomTool","constructor","attrs","tool_name","icon","event_type","default_order","init_BoxZoomTool","prototype","default_view","define","Dimensions","Instance","Boolean","BoxOrigin","register_alias","tooltip","_get_dim_tooltip"],"mappings":"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","sourcesContent":["import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport { BoxAnnotation } from \"../../annotations/box_annotation\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_box_zoom } from \"../../../styles/icons\";\nexport class BoxZoomToolView extends GestureToolView {\n    _match_aspect(base_point, curpoint, frame) {\n        // aspect ratio of plot frame\n        const a = frame.bbox.aspect;\n        const hend = frame.bbox.h_range.end;\n        const hstart = frame.bbox.h_range.start;\n        const vend = frame.bbox.v_range.end;\n        const vstart = frame.bbox.v_range.start;\n        // current aspect of cursor-defined box\n        let vw = Math.abs(base_point[0] - curpoint[0]);\n        let vh = Math.abs(base_point[1] - curpoint[1]);\n        const va = vh == 0 ? 0 : vw / vh;\n        const [xmod] = va >= a ? [1, va / a] : [a / va, 1];\n        // OK the code blocks below merit some explanation. They do:\n        //\n        // compute left/right, pin to frame if necessary\n        // compute top/bottom (based on new left/right), pin to frame if necessary\n        // recompute left/right (based on top/bottom), in case top/bottom were pinned\n        // base_point[0] is left\n        let left;\n        let right;\n        if (base_point[0] <= curpoint[0]) {\n            left = base_point[0];\n            right = base_point[0] + vw * xmod;\n            if (right > hend)\n                right = hend;\n            // base_point[0] is right\n        }\n        else {\n            right = base_point[0];\n            left = base_point[0] - vw * xmod;\n            if (left < hstart)\n                left = hstart;\n        }\n        vw = Math.abs(right - left);\n        // base_point[1] is bottom\n        let top;\n        let bottom;\n        if (base_point[1] <= curpoint[1]) {\n            bottom = base_point[1];\n            top = base_point[1] + vw / a;\n            if (top > vend)\n                top = vend;\n            // base_point[1] is top\n        }\n        else {\n            top = base_point[1];\n            bottom = base_point[1] - vw / a;\n            if (bottom < vstart)\n                bottom = vstart;\n        }\n        vh = Math.abs(top - bottom);\n        // base_point[0] is left\n        if (base_point[0] <= curpoint[0])\n            right = base_point[0] + a * vh;\n        // base_point[0] is right\n        else\n            left = base_point[0] - a * vh;\n        return [[left, right], [bottom, top]];\n    }\n    _compute_limits(curpoint) {\n        const frame = this.plot_view.frame;\n        const dims = this.model.dimensions;\n        let base_point = this._base_point;\n        if (this.model.origin == \"center\") {\n            const [cx, cy] = base_point;\n            const [dx, dy] = curpoint;\n            base_point = [cx - (dx - cx), cy - (dy - cy)];\n        }\n        let sx;\n        let sy;\n        if (this.model.match_aspect && dims == 'both')\n            [sx, sy] = this._match_aspect(base_point, curpoint, frame);\n        else\n            [sx, sy] = this.model._get_dim_limits(base_point, curpoint, frame, dims);\n        return [sx, sy];\n    }\n    _pan_start(ev) {\n        this._base_point = [ev.sx, ev.sy];\n    }\n    _pan(ev) {\n        const curpoint = [ev.sx, ev.sy];\n        const [sx, sy] = this._compute_limits(curpoint);\n        this.model.overlay.update({ left: sx[0], right: sx[1], top: sy[0], bottom: sy[1] });\n    }\n    _pan_end(ev) {\n        const curpoint = [ev.sx, ev.sy];\n        const [sx, sy] = this._compute_limits(curpoint);\n        this._update(sx, sy);\n        this.model.overlay.update({ left: null, right: null, top: null, bottom: null });\n        this._base_point = null;\n    }\n    _update([sx0, sx1], [sy0, sy1]) {\n        // If the viewing window is too small, no-op: it is likely that the user did\n        // not intend to make this box zoom and instead was trying to cancel out of the\n        // zoom, a la matplotlib's ToolZoom. Like matplotlib, set the threshold at 5 pixels.\n        if (Math.abs(sx1 - sx0) <= 5 || Math.abs(sy1 - sy0) <= 5)\n            return;\n        const { xscales, yscales } = this.plot_view.frame;\n        const xrs = {};\n        for (const name in xscales) {\n            const scale = xscales[name];\n            const [start, end] = scale.r_invert(sx0, sx1);\n            xrs[name] = { start, end };\n        }\n        const yrs = {};\n        for (const name in yscales) {\n            const scale = yscales[name];\n            const [start, end] = scale.r_invert(sy0, sy1);\n            yrs[name] = { start, end };\n        }\n        const zoom_info = { xrs, yrs };\n        this.plot_view.push_state('box_zoom', { range: zoom_info });\n        this.plot_view.update_range(zoom_info);\n    }\n}\nBoxZoomToolView.__name__ = \"BoxZoomToolView\";\nconst DEFAULT_BOX_OVERLAY = () => {\n    return new BoxAnnotation({\n        level: \"overlay\",\n        render_mode: \"css\",\n        top_units: \"screen\",\n        left_units: \"screen\",\n        bottom_units: \"screen\",\n        right_units: \"screen\",\n        fill_color: { value: \"lightgrey\" },\n        fill_alpha: { value: 0.5 },\n        line_color: { value: \"black\" },\n        line_alpha: { value: 1.0 },\n        line_width: { value: 2 },\n        line_dash: { value: [4, 4] },\n    });\n};\nexport class BoxZoomTool extends GestureTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Box Zoom\";\n        this.icon = bk_tool_icon_box_zoom;\n        this.event_type = \"pan\";\n        this.default_order = 20;\n    }\n    static init_BoxZoomTool() {\n        this.prototype.default_view = BoxZoomToolView;\n        this.define({\n            dimensions: [p.Dimensions, \"both\"],\n            overlay: [p.Instance, DEFAULT_BOX_OVERLAY],\n            match_aspect: [p.Boolean, false],\n            origin: [p.BoxOrigin, \"corner\"],\n        });\n        this.register_alias(\"box_zoom\", () => new BoxZoomTool({ dimensions: 'both' }));\n        this.register_alias(\"xbox_zoom\", () => new BoxZoomTool({ dimensions: 'width' }));\n        this.register_alias(\"ybox_zoom\", () => new BoxZoomTool({ dimensions: 'height' }));\n    }\n    get tooltip() {\n        return this._get_dim_tooltip(this.tool_name, this.dimensions);\n    }\n}\nBoxZoomTool.__name__ = \"BoxZoomTool\";\nBoxZoomTool.init_BoxZoomTool();\n//# sourceMappingURL=box_zoom_tool.js.map"]},"metadata":{},"sourceType":"module"}