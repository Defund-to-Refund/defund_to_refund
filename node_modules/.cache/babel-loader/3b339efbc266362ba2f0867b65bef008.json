{"ast":null,"code":"import { Marker, MarkerView } from \"./marker\";\nimport { marker_funcs } from \"./defs\";\nimport * as p from \"../../core/properties\";\nexport class ScatterView extends MarkerView {\n  _render(ctx, indices, {\n    sx,\n    sy,\n    _size,\n    _angle,\n    _marker\n  }) {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + _size[i] + _angle[i]) || _marker[i] == null) continue;\n      const r = _size[i] / 2;\n      ctx.beginPath();\n      ctx.translate(sx[i], sy[i]);\n      if (_angle[i]) ctx.rotate(_angle[i]);\n\n      marker_funcs[_marker[i]](ctx, i, r, this.visuals.line, this.visuals.fill);\n\n      if (_angle[i]) ctx.rotate(-_angle[i]);\n      ctx.translate(-sx[i], -sy[i]);\n    }\n  }\n\n  draw_legend_for_index(ctx, {\n    x0,\n    x1,\n    y0,\n    y1\n  }, index) {\n    // using objects like this seems a little wonky, since the keys are coerced to\n    // stings, but it works\n    const len = index + 1;\n    const sx = new Array(len);\n    sx[index] = (x0 + x1) / 2;\n    const sy = new Array(len);\n    sy[index] = (y0 + y1) / 2;\n    const size = new Array(len);\n    size[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.4;\n    const angle = new Array(len);\n    angle[index] = 0; // don't attempt to match glyph angle\n\n    const marker = new Array(len);\n    marker[index] = this._marker[index];\n\n    this._render(ctx, [index], {\n      sx,\n      sy,\n      _size: size,\n      _angle: angle,\n      _marker: marker\n    }); // XXX\n\n  }\n\n}\nScatterView.__name__ = \"ScatterView\";\nexport class Scatter extends Marker {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Scatter() {\n    this.prototype.default_view = ScatterView;\n    this.define({\n      marker: [p.MarkerSpec, {\n        value: \"circle\"\n      }]\n    });\n  }\n\n}\nScatter.__name__ = \"Scatter\";\nScatter.init_Scatter();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/markers/scatter.js"],"names":["Marker","MarkerView","marker_funcs","p","ScatterView","_render","ctx","indices","sx","sy","_size","_angle","_marker","i","isNaN","r","beginPath","translate","rotate","visuals","line","fill","draw_legend_for_index","x0","x1","y0","y1","index","len","Array","size","Math","min","abs","angle","marker","__name__","Scatter","constructor","attrs","init_Scatter","prototype","default_view","define","MarkerSpec","value"],"mappings":"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","sourcesContent":["import { Marker, MarkerView } from \"./marker\";\nimport { marker_funcs } from \"./defs\";\nimport * as p from \"../../core/properties\";\nexport class ScatterView extends MarkerView {\n    _render(ctx, indices, { sx, sy, _size, _angle, _marker }) {\n        for (const i of indices) {\n            if (isNaN(sx[i] + sy[i] + _size[i] + _angle[i]) || _marker[i] == null)\n                continue;\n            const r = _size[i] / 2;\n            ctx.beginPath();\n            ctx.translate(sx[i], sy[i]);\n            if (_angle[i])\n                ctx.rotate(_angle[i]);\n            marker_funcs[_marker[i]](ctx, i, r, this.visuals.line, this.visuals.fill);\n            if (_angle[i])\n                ctx.rotate(-_angle[i]);\n            ctx.translate(-sx[i], -sy[i]);\n        }\n    }\n    draw_legend_for_index(ctx, { x0, x1, y0, y1 }, index) {\n        // using objects like this seems a little wonky, since the keys are coerced to\n        // stings, but it works\n        const len = index + 1;\n        const sx = new Array(len);\n        sx[index] = (x0 + x1) / 2;\n        const sy = new Array(len);\n        sy[index] = (y0 + y1) / 2;\n        const size = new Array(len);\n        size[index] = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.4;\n        const angle = new Array(len);\n        angle[index] = 0; // don't attempt to match glyph angle\n        const marker = new Array(len);\n        marker[index] = this._marker[index];\n        this._render(ctx, [index], { sx, sy, _size: size, _angle: angle, _marker: marker }); // XXX\n    }\n}\nScatterView.__name__ = \"ScatterView\";\nexport class Scatter extends Marker {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Scatter() {\n        this.prototype.default_view = ScatterView;\n        this.define({\n            marker: [p.MarkerSpec, { value: \"circle\" }],\n        });\n    }\n}\nScatter.__name__ = \"Scatter\";\nScatter.init_Scatter();\n//# sourceMappingURL=scatter.js.map"]},"metadata":{},"sourceType":"module"}