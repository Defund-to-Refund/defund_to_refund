{"ast":null,"code":"import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nimport { Selection } from \"../selections/selection\";\nimport { intersection } from \"../../core/util/array\";\nimport { ColumnarDataSource } from \"./columnar_data_source\";\nexport class CDSView extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_CDSView() {\n    this.define({\n      filters: [p.Array, []],\n      source: [p.Instance]\n    });\n    this.internal({\n      indices: [p.Array, []],\n      indices_map: [p.Any, {}]\n    });\n  }\n\n  initialize() {\n    super.initialize();\n    this.compute_indices();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.properties.filters.change, () => {\n      this.compute_indices();\n      this.change.emit();\n    });\n\n    const connect_listeners = () => {\n      const fn = () => this.compute_indices();\n\n      if (this.source != null) {\n        this.connect(this.source.change, fn);\n\n        if (this.source instanceof ColumnarDataSource) {\n          this.connect(this.source.streaming, fn);\n          this.connect(this.source.patching, fn);\n        }\n      }\n    };\n\n    let initialized = this.source != null;\n    if (initialized) connect_listeners();else {\n      this.connect(this.properties.source.change, () => {\n        if (!initialized) {\n          connect_listeners();\n          initialized = true;\n        }\n      });\n    }\n  }\n\n  compute_indices() {\n    const indices = this.filters.map(filter => filter.compute_indices(this.source)).filter(indices => indices != null);\n    if (indices.length > 0) this.indices = intersection.apply(this, indices);else if (this.source instanceof ColumnarDataSource) this.indices = this.source.get_indices();\n    this.indices_map_to_subset();\n  }\n\n  indices_map_to_subset() {\n    this.indices_map = {};\n\n    for (let i = 0; i < this.indices.length; i++) {\n      this.indices_map[this.indices[i]] = i;\n    }\n  }\n\n  convert_selection_from_subset(selection_subset) {\n    const selection_full = new Selection();\n    selection_full.update_through_union(selection_subset);\n    const indices_1d = selection_subset.indices.map(i => this.indices[i]);\n    selection_full.indices = indices_1d;\n    selection_full.image_indices = selection_subset.image_indices;\n    return selection_full;\n  }\n\n  convert_selection_to_subset(selection_full) {\n    const selection_subset = new Selection();\n    selection_subset.update_through_union(selection_full);\n    const indices_1d = selection_full.indices.map(i => this.indices_map[i]);\n    selection_subset.indices = indices_1d;\n    selection_subset.image_indices = selection_full.image_indices;\n    return selection_subset;\n  }\n\n  convert_indices_from_subset(indices) {\n    return indices.map(i => this.indices[i]);\n  }\n\n}\nCDSView.__name__ = \"CDSView\";\nCDSView.init_CDSView();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/sources/cds_view.js"],"names":["Model","p","Selection","intersection","ColumnarDataSource","CDSView","constructor","attrs","init_CDSView","define","filters","Array","source","Instance","internal","indices","indices_map","Any","initialize","compute_indices","connect_signals","connect","properties","change","emit","connect_listeners","fn","streaming","patching","initialized","map","filter","length","apply","get_indices","indices_map_to_subset","i","convert_selection_from_subset","selection_subset","selection_full","update_through_union","indices_1d","image_indices","convert_selection_to_subset","convert_indices_from_subset","__name__"],"mappings":"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","sourcesContent":["import { Model } from \"../../model\";\nimport * as p from \"../../core/properties\";\nimport { Selection } from \"../selections/selection\";\nimport { intersection } from \"../../core/util/array\";\nimport { ColumnarDataSource } from \"./columnar_data_source\";\nexport class CDSView extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_CDSView() {\n        this.define({\n            filters: [p.Array, []],\n            source: [p.Instance],\n        });\n        this.internal({\n            indices: [p.Array, []],\n            indices_map: [p.Any, {}],\n        });\n    }\n    initialize() {\n        super.initialize();\n        this.compute_indices();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.properties.filters.change, () => {\n            this.compute_indices();\n            this.change.emit();\n        });\n        const connect_listeners = () => {\n            const fn = () => this.compute_indices();\n            if (this.source != null) {\n                this.connect(this.source.change, fn);\n                if (this.source instanceof ColumnarDataSource) {\n                    this.connect(this.source.streaming, fn);\n                    this.connect(this.source.patching, fn);\n                }\n            }\n        };\n        let initialized = this.source != null;\n        if (initialized)\n            connect_listeners();\n        else {\n            this.connect(this.properties.source.change, () => {\n                if (!initialized) {\n                    connect_listeners();\n                    initialized = true;\n                }\n            });\n        }\n    }\n    compute_indices() {\n        const indices = this.filters\n            .map((filter) => filter.compute_indices(this.source))\n            .filter((indices) => indices != null);\n        if (indices.length > 0)\n            this.indices = intersection.apply(this, indices);\n        else if (this.source instanceof ColumnarDataSource)\n            this.indices = this.source.get_indices();\n        this.indices_map_to_subset();\n    }\n    indices_map_to_subset() {\n        this.indices_map = {};\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices_map[this.indices[i]] = i;\n        }\n    }\n    convert_selection_from_subset(selection_subset) {\n        const selection_full = new Selection();\n        selection_full.update_through_union(selection_subset);\n        const indices_1d = selection_subset.indices.map((i) => this.indices[i]);\n        selection_full.indices = indices_1d;\n        selection_full.image_indices = selection_subset.image_indices;\n        return selection_full;\n    }\n    convert_selection_to_subset(selection_full) {\n        const selection_subset = new Selection();\n        selection_subset.update_through_union(selection_full);\n        const indices_1d = selection_full.indices.map((i) => this.indices_map[i]);\n        selection_subset.indices = indices_1d;\n        selection_subset.image_indices = selection_full.image_indices;\n        return selection_subset;\n    }\n    convert_indices_from_subset(indices) {\n        return indices.map((i) => this.indices[i]);\n    }\n}\nCDSView.__name__ = \"CDSView\";\nCDSView.init_CDSView();\n//# sourceMappingURL=cds_view.js.map"]},"metadata":{},"sourceType":"module"}