{"ast":null,"code":"import { Model } from \"../../model\";\nimport { ColumnarDataSource } from \"../sources/columnar_data_source\";\nimport { isValue, isField } from \"../../core/vectorization\";\nimport * as p from \"../../core/properties\";\nimport { logger } from \"../../core/logging\";\nimport { uniq, includes } from \"../../core/util/array\";\nexport class LegendItem extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_LegendItem() {\n    this.define({\n      label: [p.StringSpec, null],\n      renderers: [p.Array, []],\n      index: [p.Number, null]\n    });\n  }\n  /*protected*/\n\n\n  _check_data_sources_on_renderers() {\n    const field = this.get_field_from_label_prop();\n\n    if (field != null) {\n      if (this.renderers.length < 1) {\n        return false;\n      }\n\n      const source = this.renderers[0].data_source;\n\n      if (source != null) {\n        for (const r of this.renderers) {\n          if (r.data_source != source) {\n            return false;\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n  /*protected*/\n\n\n  _check_field_label_on_data_source() {\n    const field = this.get_field_from_label_prop();\n\n    if (field != null) {\n      if (this.renderers.length < 1) {\n        return false;\n      }\n\n      const source = this.renderers[0].data_source;\n\n      if (source != null && !includes(source.columns(), field)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  initialize() {\n    super.initialize();\n    this.legend = null;\n    this.connect(this.change, () => {\n      if (this.legend != null) this.legend.item_change.emit();\n    }); // Validate data_sources match\n\n    const data_source_validation = this._check_data_sources_on_renderers();\n\n    if (!data_source_validation) logger.error(\"Non matching data sources on legend item renderers\"); // Validate label in data_source\n\n    const field_validation = this._check_field_label_on_data_source();\n\n    if (!field_validation) logger.error(`Bad column name on label: ${this.label}`);\n  }\n\n  get_field_from_label_prop() {\n    const {\n      label\n    } = this;\n    return isField(label) ? label.field : null;\n  }\n\n  get_labels_list_from_label_prop() {\n    // Always return a list of the labels\n    if (isValue(this.label)) {\n      const {\n        value\n      } = this.label;\n      return value != null ? [value] : [];\n    }\n\n    const field = this.get_field_from_label_prop();\n\n    if (field != null) {\n      let source;\n      if (this.renderers[0] && this.renderers[0].data_source != null) source = this.renderers[0].data_source;else return [\"No source found\"];\n\n      if (source instanceof ColumnarDataSource) {\n        const data = source.get_column(field);\n        if (data != null) return uniq(Array.from(data));else return [\"Invalid field\"];\n      }\n    }\n\n    return [];\n  }\n\n}\nLegendItem.__name__ = \"LegendItem\";\nLegendItem.init_LegendItem();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/legend_item.js"],"names":["Model","ColumnarDataSource","isValue","isField","p","logger","uniq","includes","LegendItem","constructor","attrs","init_LegendItem","define","label","StringSpec","renderers","Array","index","Number","_check_data_sources_on_renderers","field","get_field_from_label_prop","length","source","data_source","r","_check_field_label_on_data_source","columns","initialize","legend","connect","change","item_change","emit","data_source_validation","error","field_validation","get_labels_list_from_label_prop","value","data","get_column","from","__name__"],"mappings":"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","sourcesContent":["import { Model } from \"../../model\";\nimport { ColumnarDataSource } from \"../sources/columnar_data_source\";\nimport { isValue, isField } from \"../../core/vectorization\";\nimport * as p from \"../../core/properties\";\nimport { logger } from \"../../core/logging\";\nimport { uniq, includes } from \"../../core/util/array\";\nexport class LegendItem extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_LegendItem() {\n        this.define({\n            label: [p.StringSpec, null],\n            renderers: [p.Array, []],\n            index: [p.Number, null],\n        });\n    }\n    /*protected*/ _check_data_sources_on_renderers() {\n        const field = this.get_field_from_label_prop();\n        if (field != null) {\n            if (this.renderers.length < 1) {\n                return false;\n            }\n            const source = this.renderers[0].data_source;\n            if (source != null) {\n                for (const r of this.renderers) {\n                    if (r.data_source != source) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /*protected*/ _check_field_label_on_data_source() {\n        const field = this.get_field_from_label_prop();\n        if (field != null) {\n            if (this.renderers.length < 1) {\n                return false;\n            }\n            const source = this.renderers[0].data_source;\n            if (source != null && !includes(source.columns(), field)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    initialize() {\n        super.initialize();\n        this.legend = null;\n        this.connect(this.change, () => { if (this.legend != null)\n            this.legend.item_change.emit(); });\n        // Validate data_sources match\n        const data_source_validation = this._check_data_sources_on_renderers();\n        if (!data_source_validation)\n            logger.error(\"Non matching data sources on legend item renderers\");\n        // Validate label in data_source\n        const field_validation = this._check_field_label_on_data_source();\n        if (!field_validation)\n            logger.error(`Bad column name on label: ${this.label}`);\n    }\n    get_field_from_label_prop() {\n        const { label } = this;\n        return isField(label) ? label.field : null;\n    }\n    get_labels_list_from_label_prop() {\n        // Always return a list of the labels\n        if (isValue(this.label)) {\n            const { value } = this.label;\n            return value != null ? [value] : [];\n        }\n        const field = this.get_field_from_label_prop();\n        if (field != null) {\n            let source;\n            if (this.renderers[0] && this.renderers[0].data_source != null)\n                source = this.renderers[0].data_source;\n            else\n                return [\"No source found\"];\n            if (source instanceof ColumnarDataSource) {\n                const data = source.get_column(field);\n                if (data != null)\n                    return uniq(Array.from(data));\n                else\n                    return [\"Invalid field\"];\n            }\n        }\n        return [];\n    }\n}\nLegendItem.__name__ = \"LegendItem\";\nLegendItem.init_LegendItem();\n//# sourceMappingURL=legend_item.js.map"]},"metadata":{},"sourceType":"module"}