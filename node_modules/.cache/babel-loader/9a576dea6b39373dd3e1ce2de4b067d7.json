{"ast":null,"code":"import { DataRenderer, DataRendererView } from \"./data_renderer\";\nimport { NodesOnly } from \"../graphs/graph_hit_test_policy\";\nimport * as p from \"../../core/properties\";\nimport { build_views } from \"../../core/build_views\";\nexport class GraphRendererView extends DataRendererView {\n  initialize() {\n    super.initialize();\n    this.xscale = this.plot_view.frame.xscales.default;\n    this.yscale = this.plot_view.frame.yscales.default;\n    this._renderer_views = {};\n  }\n\n  async lazy_initialize() {\n    [this.node_view, this.edge_view] = await build_views(this._renderer_views, [this.model.node_renderer, this.model.edge_renderer], {\n      parent: this.parent\n    });\n    this.set_data();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.layout_provider.change, () => this.set_data());\n    this.connect(this.model.node_renderer.data_source._select, () => this.set_data());\n    this.connect(this.model.node_renderer.data_source.inspect, () => this.set_data());\n    this.connect(this.model.node_renderer.data_source.change, () => this.set_data());\n    this.connect(this.model.edge_renderer.data_source._select, () => this.set_data());\n    this.connect(this.model.edge_renderer.data_source.inspect, () => this.set_data());\n    this.connect(this.model.edge_renderer.data_source.change, () => this.set_data());\n    const {\n      x_ranges,\n      y_ranges\n    } = this.plot_view.frame;\n\n    for (const name in x_ranges) {\n      const rng = x_ranges[name];\n      this.connect(rng.change, () => this.set_data());\n    }\n\n    for (const name in y_ranges) {\n      const rng = y_ranges[name];\n      this.connect(rng.change, () => this.set_data());\n    }\n  }\n\n  set_data(request_render = true) {\n    // TODO (bev) this is a bit clunky, need to make sure glyphs use the correct ranges when they call\n    // mapping functions on the base Renderer class\n    this.node_view.glyph.model.setv({\n      x_range_name: this.model.x_range_name,\n      y_range_name: this.model.y_range_name\n    }, {\n      silent: true\n    });\n    this.edge_view.glyph.model.setv({\n      x_range_name: this.model.x_range_name,\n      y_range_name: this.model.y_range_name\n    }, {\n      silent: true\n    }); // XXX\n\n    const node_glyph = this.node_view.glyph;\n    [node_glyph._x, node_glyph._y] = this.model.layout_provider.get_node_coordinates(this.model.node_renderer.data_source);\n    const edge_glyph = this.edge_view.glyph;\n    [edge_glyph._xs, edge_glyph._ys] = this.model.layout_provider.get_edge_coordinates(this.model.edge_renderer.data_source);\n    node_glyph.index_data();\n    edge_glyph.index_data();\n    if (request_render) this.request_render();\n  }\n\n  render() {\n    this.edge_view.render();\n    this.node_view.render();\n  }\n\n}\nGraphRendererView.__name__ = \"GraphRendererView\";\nexport class GraphRenderer extends DataRenderer {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_GraphRenderer() {\n    this.prototype.default_view = GraphRendererView;\n    this.define({\n      layout_provider: [p.Instance],\n      node_renderer: [p.Instance],\n      edge_renderer: [p.Instance],\n      selection_policy: [p.Instance, () => new NodesOnly()],\n      inspection_policy: [p.Instance, () => new NodesOnly()]\n    });\n  }\n\n  get_selection_manager() {\n    return this.node_renderer.data_source.selection_manager;\n  }\n\n}\nGraphRenderer.__name__ = \"GraphRenderer\";\nGraphRenderer.init_GraphRenderer();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/renderers/graph_renderer.js"],"names":["DataRenderer","DataRendererView","NodesOnly","p","build_views","GraphRendererView","initialize","xscale","plot_view","frame","xscales","default","yscale","yscales","_renderer_views","lazy_initialize","node_view","edge_view","model","node_renderer","edge_renderer","parent","set_data","connect_signals","connect","layout_provider","change","data_source","_select","inspect","x_ranges","y_ranges","name","rng","request_render","glyph","setv","x_range_name","y_range_name","silent","node_glyph","_x","_y","get_node_coordinates","edge_glyph","_xs","_ys","get_edge_coordinates","index_data","render","__name__","GraphRenderer","constructor","attrs","init_GraphRenderer","prototype","default_view","define","Instance","selection_policy","inspection_policy","get_selection_manager","selection_manager"],"mappings":"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","sourcesContent":["import { DataRenderer, DataRendererView } from \"./data_renderer\";\nimport { NodesOnly } from \"../graphs/graph_hit_test_policy\";\nimport * as p from \"../../core/properties\";\nimport { build_views } from \"../../core/build_views\";\nexport class GraphRendererView extends DataRendererView {\n    initialize() {\n        super.initialize();\n        this.xscale = this.plot_view.frame.xscales.default;\n        this.yscale = this.plot_view.frame.yscales.default;\n        this._renderer_views = {};\n    }\n    async lazy_initialize() {\n        [this.node_view, this.edge_view] = await build_views(this._renderer_views, [\n            this.model.node_renderer,\n            this.model.edge_renderer,\n        ], { parent: this.parent });\n        this.set_data();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.layout_provider.change, () => this.set_data());\n        this.connect(this.model.node_renderer.data_source._select, () => this.set_data());\n        this.connect(this.model.node_renderer.data_source.inspect, () => this.set_data());\n        this.connect(this.model.node_renderer.data_source.change, () => this.set_data());\n        this.connect(this.model.edge_renderer.data_source._select, () => this.set_data());\n        this.connect(this.model.edge_renderer.data_source.inspect, () => this.set_data());\n        this.connect(this.model.edge_renderer.data_source.change, () => this.set_data());\n        const { x_ranges, y_ranges } = this.plot_view.frame;\n        for (const name in x_ranges) {\n            const rng = x_ranges[name];\n            this.connect(rng.change, () => this.set_data());\n        }\n        for (const name in y_ranges) {\n            const rng = y_ranges[name];\n            this.connect(rng.change, () => this.set_data());\n        }\n    }\n    set_data(request_render = true) {\n        // TODO (bev) this is a bit clunky, need to make sure glyphs use the correct ranges when they call\n        // mapping functions on the base Renderer class\n        this.node_view.glyph.model.setv({ x_range_name: this.model.x_range_name, y_range_name: this.model.y_range_name }, { silent: true });\n        this.edge_view.glyph.model.setv({ x_range_name: this.model.x_range_name, y_range_name: this.model.y_range_name }, { silent: true });\n        // XXX\n        const node_glyph = this.node_view.glyph;\n        [node_glyph._x, node_glyph._y] =\n            this.model.layout_provider.get_node_coordinates(this.model.node_renderer.data_source);\n        const edge_glyph = this.edge_view.glyph;\n        [edge_glyph._xs, edge_glyph._ys] =\n            this.model.layout_provider.get_edge_coordinates(this.model.edge_renderer.data_source);\n        node_glyph.index_data();\n        edge_glyph.index_data();\n        if (request_render)\n            this.request_render();\n    }\n    render() {\n        this.edge_view.render();\n        this.node_view.render();\n    }\n}\nGraphRendererView.__name__ = \"GraphRendererView\";\nexport class GraphRenderer extends DataRenderer {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_GraphRenderer() {\n        this.prototype.default_view = GraphRendererView;\n        this.define({\n            layout_provider: [p.Instance],\n            node_renderer: [p.Instance],\n            edge_renderer: [p.Instance],\n            selection_policy: [p.Instance, () => new NodesOnly()],\n            inspection_policy: [p.Instance, () => new NodesOnly()],\n        });\n    }\n    get_selection_manager() {\n        return this.node_renderer.data_source.selection_manager;\n    }\n}\nGraphRenderer.__name__ = \"GraphRenderer\";\nGraphRenderer.init_GraphRenderer();\n//# sourceMappingURL=graph_renderer.js.map"]},"metadata":{},"sourceType":"module"}