{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport { TeeHead } from \"./arrow_head\";\nimport * as p from \"../../core/properties\";\nexport class WhiskerView extends AnnotationView {\n  initialize() {\n    super.initialize();\n    this.set_data(this.model.source);\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.source.streaming, () => this.set_data(this.model.source));\n    this.connect(this.model.source.patching, () => this.set_data(this.model.source));\n    this.connect(this.model.source.change, () => this.set_data(this.model.source));\n  }\n\n  set_data(source) {\n    super.set_data(source);\n    this.visuals.warm_cache(source);\n    this.plot_view.request_render();\n  }\n\n  _map_data() {\n    const {\n      frame\n    } = this.plot_view;\n    const dim = this.model.dimension;\n    const xscale = frame.xscales[this.model.x_range_name];\n    const yscale = frame.yscales[this.model.y_range_name];\n    const limit_scale = dim == \"height\" ? yscale : xscale;\n    const base_scale = dim == \"height\" ? xscale : yscale;\n    const limit_view = dim == \"height\" ? frame.yview : frame.xview;\n    const base_view = dim == \"height\" ? frame.xview : frame.yview;\n\n    let _lower_sx;\n\n    if (this.model.properties.lower.units == \"data\") _lower_sx = limit_scale.v_compute(this._lower);else _lower_sx = limit_view.v_compute(this._lower);\n\n    let _upper_sx;\n\n    if (this.model.properties.upper.units == \"data\") _upper_sx = limit_scale.v_compute(this._upper);else _upper_sx = limit_view.v_compute(this._upper);\n\n    let _base_sx;\n\n    if (this.model.properties.base.units == \"data\") _base_sx = base_scale.v_compute(this._base);else _base_sx = base_view.v_compute(this._base);\n    const [i, j] = dim == 'height' ? [1, 0] : [0, 1];\n    const _lower = [_lower_sx, _base_sx];\n    const _upper = [_upper_sx, _base_sx];\n    this._lower_sx = _lower[i];\n    this._lower_sy = _lower[j];\n    this._upper_sx = _upper[i];\n    this._upper_sy = _upper[j];\n  }\n\n  render() {\n    if (!this.model.visible) return;\n\n    this._map_data();\n\n    const {\n      ctx\n    } = this.plot_view.canvas_view;\n\n    if (this.visuals.line.doit) {\n      for (let i = 0, end = this._lower_sx.length; i < end; i++) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.beginPath();\n        ctx.moveTo(this._lower_sx[i], this._lower_sy[i]);\n        ctx.lineTo(this._upper_sx[i], this._upper_sy[i]);\n        ctx.stroke();\n      }\n    }\n\n    const angle = this.model.dimension == \"height\" ? 0 : Math.PI / 2;\n\n    if (this.model.lower_head != null) {\n      for (let i = 0, end = this._lower_sx.length; i < end; i++) {\n        ctx.save();\n        ctx.translate(this._lower_sx[i], this._lower_sy[i]);\n        ctx.rotate(angle + Math.PI);\n        this.model.lower_head.render(ctx, i);\n        ctx.restore();\n      }\n    }\n\n    if (this.model.upper_head != null) {\n      for (let i = 0, end = this._upper_sx.length; i < end; i++) {\n        ctx.save();\n        ctx.translate(this._upper_sx[i], this._upper_sy[i]);\n        ctx.rotate(angle);\n        this.model.upper_head.render(ctx, i);\n        ctx.restore();\n      }\n    }\n  }\n\n}\nWhiskerView.__name__ = \"WhiskerView\";\nexport class Whisker extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Whisker() {\n    this.prototype.default_view = WhiskerView;\n    this.mixins(['line']);\n    this.define({\n      lower: [p.DistanceSpec],\n      lower_head: [p.Instance, () => new TeeHead({\n        level: \"underlay\",\n        size: 10\n      })],\n      upper: [p.DistanceSpec],\n      upper_head: [p.Instance, () => new TeeHead({\n        level: \"underlay\",\n        size: 10\n      })],\n      base: [p.DistanceSpec],\n      dimension: [p.Dimension, 'height'],\n      source: [p.Instance, () => new ColumnDataSource()],\n      x_range_name: [p.String, 'default'],\n      y_range_name: [p.String, 'default']\n    });\n    this.override({\n      level: 'underlay'\n    });\n  }\n\n}\nWhisker.__name__ = \"Whisker\";\nWhisker.init_Whisker();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/whisker.js"],"names":["Annotation","AnnotationView","ColumnDataSource","TeeHead","p","WhiskerView","initialize","set_data","model","source","connect_signals","connect","streaming","patching","change","visuals","warm_cache","plot_view","request_render","_map_data","frame","dim","dimension","xscale","xscales","x_range_name","yscale","yscales","y_range_name","limit_scale","base_scale","limit_view","yview","xview","base_view","_lower_sx","properties","lower","units","v_compute","_lower","_upper_sx","upper","_upper","_base_sx","base","_base","i","j","_lower_sy","_upper_sy","render","visible","ctx","canvas_view","line","doit","end","length","set_vectorize","beginPath","moveTo","lineTo","stroke","angle","Math","PI","lower_head","save","translate","rotate","restore","upper_head","__name__","Whisker","constructor","attrs","init_Whisker","prototype","default_view","mixins","define","DistanceSpec","Instance","level","size","Dimension","String","override"],"mappings":"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","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport { TeeHead } from \"./arrow_head\";\nimport * as p from \"../../core/properties\";\nexport class WhiskerView extends AnnotationView {\n    initialize() {\n        super.initialize();\n        this.set_data(this.model.source);\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.source.streaming, () => this.set_data(this.model.source));\n        this.connect(this.model.source.patching, () => this.set_data(this.model.source));\n        this.connect(this.model.source.change, () => this.set_data(this.model.source));\n    }\n    set_data(source) {\n        super.set_data(source);\n        this.visuals.warm_cache(source);\n        this.plot_view.request_render();\n    }\n    _map_data() {\n        const { frame } = this.plot_view;\n        const dim = this.model.dimension;\n        const xscale = frame.xscales[this.model.x_range_name];\n        const yscale = frame.yscales[this.model.y_range_name];\n        const limit_scale = dim == \"height\" ? yscale : xscale;\n        const base_scale = dim == \"height\" ? xscale : yscale;\n        const limit_view = dim == \"height\" ? frame.yview : frame.xview;\n        const base_view = dim == \"height\" ? frame.xview : frame.yview;\n        let _lower_sx;\n        if (this.model.properties.lower.units == \"data\")\n            _lower_sx = limit_scale.v_compute(this._lower);\n        else\n            _lower_sx = limit_view.v_compute(this._lower);\n        let _upper_sx;\n        if (this.model.properties.upper.units == \"data\")\n            _upper_sx = limit_scale.v_compute(this._upper);\n        else\n            _upper_sx = limit_view.v_compute(this._upper);\n        let _base_sx;\n        if (this.model.properties.base.units == \"data\")\n            _base_sx = base_scale.v_compute(this._base);\n        else\n            _base_sx = base_view.v_compute(this._base);\n        const [i, j] = dim == 'height' ? [1, 0] : [0, 1];\n        const _lower = [_lower_sx, _base_sx];\n        const _upper = [_upper_sx, _base_sx];\n        this._lower_sx = _lower[i];\n        this._lower_sy = _lower[j];\n        this._upper_sx = _upper[i];\n        this._upper_sy = _upper[j];\n    }\n    render() {\n        if (!this.model.visible)\n            return;\n        this._map_data();\n        const { ctx } = this.plot_view.canvas_view;\n        if (this.visuals.line.doit) {\n            for (let i = 0, end = this._lower_sx.length; i < end; i++) {\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.beginPath();\n                ctx.moveTo(this._lower_sx[i], this._lower_sy[i]);\n                ctx.lineTo(this._upper_sx[i], this._upper_sy[i]);\n                ctx.stroke();\n            }\n        }\n        const angle = this.model.dimension == \"height\" ? 0 : Math.PI / 2;\n        if (this.model.lower_head != null) {\n            for (let i = 0, end = this._lower_sx.length; i < end; i++) {\n                ctx.save();\n                ctx.translate(this._lower_sx[i], this._lower_sy[i]);\n                ctx.rotate(angle + Math.PI);\n                this.model.lower_head.render(ctx, i);\n                ctx.restore();\n            }\n        }\n        if (this.model.upper_head != null) {\n            for (let i = 0, end = this._upper_sx.length; i < end; i++) {\n                ctx.save();\n                ctx.translate(this._upper_sx[i], this._upper_sy[i]);\n                ctx.rotate(angle);\n                this.model.upper_head.render(ctx, i);\n                ctx.restore();\n            }\n        }\n    }\n}\nWhiskerView.__name__ = \"WhiskerView\";\nexport class Whisker extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Whisker() {\n        this.prototype.default_view = WhiskerView;\n        this.mixins(['line']);\n        this.define({\n            lower: [p.DistanceSpec],\n            lower_head: [p.Instance, () => new TeeHead({ level: \"underlay\", size: 10 })],\n            upper: [p.DistanceSpec],\n            upper_head: [p.Instance, () => new TeeHead({ level: \"underlay\", size: 10 })],\n            base: [p.DistanceSpec],\n            dimension: [p.Dimension, 'height'],\n            source: [p.Instance, () => new ColumnDataSource()],\n            x_range_name: [p.String, 'default'],\n            y_range_name: [p.String, 'default'],\n        });\n        this.override({\n            level: 'underlay',\n        });\n    }\n}\nWhisker.__name__ = \"Whisker\";\nWhisker.init_Whisker();\n//# sourceMappingURL=whisker.js.map"]},"metadata":{},"sourceType":"module"}