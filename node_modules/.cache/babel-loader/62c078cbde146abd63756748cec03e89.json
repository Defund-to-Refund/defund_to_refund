{"ast":null,"code":"import { InputWidget, InputWidgetView } from \"./input_widget\";\nimport { input } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nconst {\n  floor,\n  max,\n  min\n} = Math;\n\nfunction _get_sig_dig(num) {\n  if (floor(num) !== num) return num.toFixed(16).replace(/0+$/, '').split(\".\")[1].length;\n  return 0;\n}\n\nexport class SpinnerView extends InputWidgetView {\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.low.change, () => {\n      const {\n        low\n      } = this.model;\n      if (low != null) this.input_el.min = low.toFixed(16);\n    });\n    this.connect(this.model.properties.high.change, () => {\n      const {\n        high\n      } = this.model;\n      if (high != null) this.input_el.max = high.toFixed(16);\n    });\n    this.connect(this.model.properties.step.change, () => {\n      const {\n        step\n      } = this.model;\n      this.input_el.step = step.toFixed(16);\n    });\n    this.connect(this.model.properties.value.change, () => {\n      const {\n        value,\n        step\n      } = this.model;\n      this.input_el.value = value.toFixed(_get_sig_dig(step)).replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1'); //trim last 0\n    });\n    this.connect(this.model.properties.disabled.change, () => {\n      this.input_el.disabled = this.model.disabled;\n    });\n  }\n\n  render() {\n    super.render();\n    this.input_el = input({\n      type: \"number\",\n      class: bk_input,\n      name: this.model.name,\n      min: this.model.low,\n      max: this.model.high,\n      value: this.model.value,\n      step: this.model.step,\n      disabled: this.model.disabled\n    });\n    this.input_el.addEventListener(\"change\", () => this.change_input()); //this.input_el.addEventListener(\"input\", () => this.change_input())\n\n    this.group_el.appendChild(this.input_el);\n  }\n\n  change_input() {\n    if (this.input_el.value) {\n      //if input is empty skip update\n      const {\n        step\n      } = this.model;\n      let new_value = Number(this.input_el.value);\n      if (this.model.low != null) new_value = max(new_value, this.model.low);\n      if (this.model.high != null) new_value = min(new_value, this.model.high);\n      this.model.value = Number(new_value.toFixed(_get_sig_dig(step)));\n      super.change_input();\n    }\n  }\n\n}\nSpinnerView.__name__ = \"SpinnerView\";\nexport class Spinner extends InputWidget {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Spinner() {\n    this.prototype.default_view = SpinnerView;\n    this.define({\n      value: [p.Number, 0],\n      low: [p.Number, null],\n      high: [p.Number, null],\n      step: [p.Number, 1]\n    });\n  }\n\n}\nSpinner.__name__ = \"Spinner\";\nSpinner.init_Spinner();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/spinner.js"],"names":["InputWidget","InputWidgetView","input","p","bk_input","floor","max","min","Math","_get_sig_dig","num","toFixed","replace","split","length","SpinnerView","connect_signals","connect","model","properties","low","change","input_el","high","step","value","disabled","render","type","class","name","addEventListener","change_input","group_el","appendChild","new_value","Number","__name__","Spinner","constructor","attrs","init_Spinner","prototype","default_view","define"],"mappings":"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","sourcesContent":["import { InputWidget, InputWidgetView } from \"./input_widget\";\nimport { input } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nconst { floor, max, min } = Math;\nfunction _get_sig_dig(num) {\n    if (floor(num) !== num)\n        return num.toFixed(16).replace(/0+$/, '').split(\".\")[1].length;\n    return 0;\n}\nexport class SpinnerView extends InputWidgetView {\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.low.change, () => {\n            const { low } = this.model;\n            if (low != null)\n                this.input_el.min = low.toFixed(16);\n        });\n        this.connect(this.model.properties.high.change, () => {\n            const { high } = this.model;\n            if (high != null)\n                this.input_el.max = high.toFixed(16);\n        });\n        this.connect(this.model.properties.step.change, () => {\n            const { step } = this.model;\n            this.input_el.step = step.toFixed(16);\n        });\n        this.connect(this.model.properties.value.change, () => {\n            const { value, step } = this.model;\n            this.input_el.value = value.toFixed(_get_sig_dig(step)).replace(/(\\.[0-9]*[1-9])0+$|\\.0*$/, '$1'); //trim last 0\n        });\n        this.connect(this.model.properties.disabled.change, () => {\n            this.input_el.disabled = this.model.disabled;\n        });\n    }\n    render() {\n        super.render();\n        this.input_el = input({\n            type: \"number\",\n            class: bk_input,\n            name: this.model.name,\n            min: this.model.low,\n            max: this.model.high,\n            value: this.model.value,\n            step: this.model.step,\n            disabled: this.model.disabled,\n        });\n        this.input_el.addEventListener(\"change\", () => this.change_input());\n        //this.input_el.addEventListener(\"input\", () => this.change_input())\n        this.group_el.appendChild(this.input_el);\n    }\n    change_input() {\n        if (this.input_el.value) { //if input is empty skip update\n            const { step } = this.model;\n            let new_value = Number(this.input_el.value);\n            if (this.model.low != null)\n                new_value = max(new_value, this.model.low);\n            if (this.model.high != null)\n                new_value = min(new_value, this.model.high);\n            this.model.value = Number(new_value.toFixed(_get_sig_dig(step)));\n            super.change_input();\n        }\n    }\n}\nSpinnerView.__name__ = \"SpinnerView\";\nexport class Spinner extends InputWidget {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Spinner() {\n        this.prototype.default_view = SpinnerView;\n        this.define({\n            value: [p.Number, 0],\n            low: [p.Number, null],\n            high: [p.Number, null],\n            step: [p.Number, 1],\n        });\n    }\n}\nSpinner.__name__ = \"Spinner\";\nSpinner.init_Spinner();\n//# sourceMappingURL=spinner.js.map"]},"metadata":{},"sourceType":"module"}