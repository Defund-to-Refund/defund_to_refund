{"ast":null,"code":"import { Sizeable } from \"./types\";\nimport { BBox } from \"../util/bbox\";\nconst {\n  min,\n  max,\n  round\n} = Math;\nexport class Layoutable {\n  constructor() {\n    this._bbox = new BBox();\n    this._inner_bbox = new BBox();\n    const layout = this;\n    this._top = {\n      get value() {\n        return layout.bbox.top;\n      }\n\n    };\n    this._left = {\n      get value() {\n        return layout.bbox.left;\n      }\n\n    };\n    this._width = {\n      get value() {\n        return layout.bbox.width;\n      }\n\n    };\n    this._height = {\n      get value() {\n        return layout.bbox.height;\n      }\n\n    };\n    this._right = {\n      get value() {\n        return layout.bbox.right;\n      }\n\n    };\n    this._bottom = {\n      get value() {\n        return layout.bbox.bottom;\n      }\n\n    };\n    this._hcenter = {\n      get value() {\n        return layout.bbox.hcenter;\n      }\n\n    };\n    this._vcenter = {\n      get value() {\n        return layout.bbox.vcenter;\n      }\n\n    };\n  }\n\n  get bbox() {\n    return this._bbox;\n  }\n\n  get inner_bbox() {\n    return this._inner_bbox;\n  }\n\n  get sizing() {\n    return this._sizing;\n  }\n\n  set_sizing(sizing) {\n    const width_policy = sizing.width_policy || \"fit\";\n    const width = sizing.width;\n    const min_width = sizing.min_width != null ? sizing.min_width : 0;\n    const max_width = sizing.max_width != null ? sizing.max_width : Infinity;\n    const height_policy = sizing.height_policy || \"fit\";\n    const height = sizing.height;\n    const min_height = sizing.min_height != null ? sizing.min_height : 0;\n    const max_height = sizing.max_height != null ? sizing.max_height : Infinity;\n    const aspect = sizing.aspect;\n    const margin = sizing.margin || {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0\n    };\n    const visible = sizing.visible !== false;\n    const halign = sizing.halign || \"start\";\n    const valign = sizing.valign || \"start\";\n    this._sizing = {\n      width_policy,\n      min_width,\n      width,\n      max_width,\n      height_policy,\n      min_height,\n      height,\n      max_height,\n      aspect,\n      margin,\n      visible,\n      halign,\n      valign,\n      size: {\n        width,\n        height\n      },\n      min_size: {\n        width: min_width,\n        height: min_height\n      },\n      max_size: {\n        width: max_width,\n        height: max_height\n      }\n    };\n\n    this._init();\n  }\n\n  _init() {}\n\n  _set_geometry(outer, inner) {\n    this._bbox = outer;\n    this._inner_bbox = inner;\n  }\n\n  set_geometry(outer, inner) {\n    this._set_geometry(outer, inner || outer);\n  }\n\n  is_width_expanding() {\n    return this.sizing.width_policy == \"max\";\n  }\n\n  is_height_expanding() {\n    return this.sizing.height_policy == \"max\";\n  }\n\n  apply_aspect(viewport, {\n    width,\n    height\n  }) {\n    const {\n      aspect\n    } = this.sizing;\n\n    if (aspect != null) {\n      const {\n        width_policy,\n        height_policy\n      } = this.sizing;\n\n      const gt = (width, height) => {\n        const policies = {\n          max: 4,\n          fit: 3,\n          min: 2,\n          fixed: 1\n        };\n        return policies[width] > policies[height];\n      };\n\n      if (width_policy != \"fixed\" && height_policy != \"fixed\") {\n        if (width_policy == height_policy) {\n          const w_width = width;\n          const w_height = round(width / aspect);\n          const h_width = round(height * aspect);\n          const h_height = height;\n          const w_diff = Math.abs(viewport.width - w_width) + Math.abs(viewport.height - w_height);\n          const h_diff = Math.abs(viewport.width - h_width) + Math.abs(viewport.height - h_height);\n\n          if (w_diff <= h_diff) {\n            width = w_width;\n            height = w_height;\n          } else {\n            width = h_width;\n            height = h_height;\n          }\n        } else if (gt(width_policy, height_policy)) {\n          height = round(width / aspect);\n        } else {\n          width = round(height * aspect);\n        }\n      } else if (width_policy == \"fixed\") {\n        height = round(width / aspect);\n      } else if (height_policy == \"fixed\") {\n        width = round(height * aspect);\n      }\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n  measure(viewport_size) {\n    if (!this.sizing.visible) return {\n      width: 0,\n      height: 0\n    };\n\n    const exact_width = width => {\n      return this.sizing.width_policy == \"fixed\" && this.sizing.width != null ? this.sizing.width : width;\n    };\n\n    const exact_height = height => {\n      return this.sizing.height_policy == \"fixed\" && this.sizing.height != null ? this.sizing.height : height;\n    };\n\n    const viewport = new Sizeable(viewport_size).shrink_by(this.sizing.margin).map(exact_width, exact_height);\n\n    const computed = this._measure(viewport);\n\n    const clipped = this.clip_size(computed);\n    const width = exact_width(clipped.width);\n    const height = exact_height(clipped.height);\n    const size = this.apply_aspect(viewport, {\n      width,\n      height\n    });\n    return Object.assign(Object.assign({}, computed), size);\n  }\n\n  compute(viewport = {}) {\n    const size_hint = this.measure({\n      width: viewport.width != null && this.is_width_expanding() ? viewport.width : Infinity,\n      height: viewport.height != null && this.is_height_expanding() ? viewport.height : Infinity\n    });\n    const {\n      width,\n      height\n    } = size_hint;\n    const outer = new BBox({\n      left: 0,\n      top: 0,\n      width,\n      height\n    });\n    let inner = undefined;\n\n    if (size_hint.inner != null) {\n      const {\n        left,\n        top,\n        right,\n        bottom\n      } = size_hint.inner;\n      inner = new BBox({\n        left,\n        top,\n        right: width - right,\n        bottom: height - bottom\n      });\n    }\n\n    this.set_geometry(outer, inner);\n  }\n\n  get xview() {\n    return this.bbox.xview;\n  }\n\n  get yview() {\n    return this.bbox.yview;\n  }\n\n  clip_width(width) {\n    return max(this.sizing.min_width, min(width, this.sizing.max_width));\n  }\n\n  clip_height(height) {\n    return max(this.sizing.min_height, min(height, this.sizing.max_height));\n  }\n\n  clip_size({\n    width,\n    height\n  }) {\n    return {\n      width: this.clip_width(width),\n      height: this.clip_height(height)\n    };\n  }\n\n}\nLayoutable.__name__ = \"Layoutable\";\nexport class LayoutItem extends Layoutable {\n  /*\n  constructor(readonly measure_fn: (viewport: Size) => Size) {\n    super()\n  }\n  protected _measure(viewport: Size): SizeHint {\n    return this.measure_fn(viewport)\n  }\n  protected _measure(viewport: Size): SizeHint {\n    return {\n      width: viewport.width != Infinity ? viewport.width : this.sizing.min_width,\n      height: viewport.height != Infinity ? viewport.height : this.sizing.min_width,\n    }\n  }\n  */\n  _measure(viewport) {\n    const {\n      width_policy,\n      height_policy\n    } = this.sizing;\n    let width;\n\n    if (viewport.width == Infinity) {\n      width = this.sizing.width != null ? this.sizing.width : 0;\n    } else {\n      switch (width_policy) {\n        case \"fixed\":\n          {\n            width = this.sizing.width != null ? this.sizing.width : 0;\n            break;\n          }\n\n        case \"min\":\n          {\n            width = this.sizing.width != null ? min(viewport.width, this.sizing.width) : 0;\n            break;\n          }\n\n        case \"fit\":\n          {\n            width = this.sizing.width != null ? min(viewport.width, this.sizing.width) : viewport.width;\n            break;\n          }\n\n        case \"max\":\n          {\n            width = this.sizing.width != null ? max(viewport.width, this.sizing.width) : viewport.width;\n            break;\n          }\n      }\n    }\n\n    let height;\n\n    if (viewport.height == Infinity) {\n      height = this.sizing.height != null ? this.sizing.height : 0;\n    } else {\n      switch (height_policy) {\n        case \"fixed\":\n          {\n            height = this.sizing.height != null ? this.sizing.height : 0;\n            break;\n          }\n\n        case \"min\":\n          {\n            height = this.sizing.height != null ? min(viewport.height, this.sizing.height) : 0;\n            break;\n          }\n\n        case \"fit\":\n          {\n            height = this.sizing.height != null ? min(viewport.height, this.sizing.height) : viewport.height;\n            break;\n          }\n\n        case \"max\":\n          {\n            height = this.sizing.height != null ? max(viewport.height, this.sizing.height) : viewport.height;\n            break;\n          }\n      }\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n}\nLayoutItem.__name__ = \"LayoutItem\";\nexport class ContentLayoutable extends Layoutable {\n  _measure(viewport) {\n    const content_size = this._content_size();\n\n    const bounds = viewport.bounded_to(this.sizing.size).bounded_to(content_size);\n\n    const width = (() => {\n      switch (this.sizing.width_policy) {\n        case \"fixed\":\n          return this.sizing.width != null ? this.sizing.width : content_size.width;\n\n        case \"min\":\n          return content_size.width;\n\n        case \"fit\":\n          return bounds.width;\n\n        case \"max\":\n          return Math.max(content_size.width, bounds.width);\n      }\n    })();\n\n    const height = (() => {\n      switch (this.sizing.height_policy) {\n        case \"fixed\":\n          return this.sizing.height != null ? this.sizing.height : content_size.height;\n\n        case \"min\":\n          return content_size.height;\n\n        case \"fit\":\n          return bounds.height;\n\n        case \"max\":\n          return Math.max(content_size.height, bounds.height);\n      }\n    })();\n\n    return {\n      width,\n      height\n    };\n  }\n\n}\nContentLayoutable.__name__ = \"ContentLayoutable\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/layout/layoutable.js"],"names":["Sizeable","BBox","min","max","round","Math","Layoutable","constructor","_bbox","_inner_bbox","layout","_top","value","bbox","top","_left","left","_width","width","_height","height","_right","right","_bottom","bottom","_hcenter","hcenter","_vcenter","vcenter","inner_bbox","sizing","_sizing","set_sizing","width_policy","min_width","max_width","Infinity","height_policy","min_height","max_height","aspect","margin","visible","halign","valign","size","min_size","max_size","_init","_set_geometry","outer","inner","set_geometry","is_width_expanding","is_height_expanding","apply_aspect","viewport","gt","policies","fit","fixed","w_width","w_height","h_width","h_height","w_diff","abs","h_diff","measure","viewport_size","exact_width","exact_height","shrink_by","map","computed","_measure","clipped","clip_size","Object","assign","compute","size_hint","undefined","xview","yview","clip_width","clip_height","__name__","LayoutItem","ContentLayoutable","content_size","_content_size","bounds","bounded_to"],"mappings":"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","sourcesContent":["import { Sizeable } from \"./types\";\nimport { BBox } from \"../util/bbox\";\nconst { min, max, round } = Math;\nexport class Layoutable {\n    constructor() {\n        this._bbox = new BBox();\n        this._inner_bbox = new BBox();\n        const layout = this;\n        this._top = { get value() { return layout.bbox.top; } };\n        this._left = { get value() { return layout.bbox.left; } };\n        this._width = { get value() { return layout.bbox.width; } };\n        this._height = { get value() { return layout.bbox.height; } };\n        this._right = { get value() { return layout.bbox.right; } };\n        this._bottom = { get value() { return layout.bbox.bottom; } };\n        this._hcenter = { get value() { return layout.bbox.hcenter; } };\n        this._vcenter = { get value() { return layout.bbox.vcenter; } };\n    }\n    get bbox() {\n        return this._bbox;\n    }\n    get inner_bbox() {\n        return this._inner_bbox;\n    }\n    get sizing() {\n        return this._sizing;\n    }\n    set_sizing(sizing) {\n        const width_policy = sizing.width_policy || \"fit\";\n        const width = sizing.width;\n        const min_width = sizing.min_width != null ? sizing.min_width : 0;\n        const max_width = sizing.max_width != null ? sizing.max_width : Infinity;\n        const height_policy = sizing.height_policy || \"fit\";\n        const height = sizing.height;\n        const min_height = sizing.min_height != null ? sizing.min_height : 0;\n        const max_height = sizing.max_height != null ? sizing.max_height : Infinity;\n        const aspect = sizing.aspect;\n        const margin = sizing.margin || { top: 0, right: 0, bottom: 0, left: 0 };\n        const visible = sizing.visible !== false;\n        const halign = sizing.halign || \"start\";\n        const valign = sizing.valign || \"start\";\n        this._sizing = {\n            width_policy, min_width, width, max_width,\n            height_policy, min_height, height, max_height,\n            aspect,\n            margin,\n            visible,\n            halign,\n            valign,\n            size: { width, height },\n            min_size: { width: min_width, height: min_height },\n            max_size: { width: max_width, height: max_height },\n        };\n        this._init();\n    }\n    _init() { }\n    _set_geometry(outer, inner) {\n        this._bbox = outer;\n        this._inner_bbox = inner;\n    }\n    set_geometry(outer, inner) {\n        this._set_geometry(outer, inner || outer);\n    }\n    is_width_expanding() {\n        return this.sizing.width_policy == \"max\";\n    }\n    is_height_expanding() {\n        return this.sizing.height_policy == \"max\";\n    }\n    apply_aspect(viewport, { width, height }) {\n        const { aspect } = this.sizing;\n        if (aspect != null) {\n            const { width_policy, height_policy } = this.sizing;\n            const gt = (width, height) => {\n                const policies = { max: 4, fit: 3, min: 2, fixed: 1 };\n                return policies[width] > policies[height];\n            };\n            if (width_policy != \"fixed\" && height_policy != \"fixed\") {\n                if (width_policy == height_policy) {\n                    const w_width = width;\n                    const w_height = round(width / aspect);\n                    const h_width = round(height * aspect);\n                    const h_height = height;\n                    const w_diff = Math.abs(viewport.width - w_width) + Math.abs(viewport.height - w_height);\n                    const h_diff = Math.abs(viewport.width - h_width) + Math.abs(viewport.height - h_height);\n                    if (w_diff <= h_diff) {\n                        width = w_width;\n                        height = w_height;\n                    }\n                    else {\n                        width = h_width;\n                        height = h_height;\n                    }\n                }\n                else if (gt(width_policy, height_policy)) {\n                    height = round(width / aspect);\n                }\n                else {\n                    width = round(height * aspect);\n                }\n            }\n            else if (width_policy == \"fixed\") {\n                height = round(width / aspect);\n            }\n            else if (height_policy == \"fixed\") {\n                width = round(height * aspect);\n            }\n        }\n        return { width, height };\n    }\n    measure(viewport_size) {\n        if (!this.sizing.visible)\n            return { width: 0, height: 0 };\n        const exact_width = (width) => {\n            return this.sizing.width_policy == \"fixed\" && this.sizing.width != null ? this.sizing.width : width;\n        };\n        const exact_height = (height) => {\n            return this.sizing.height_policy == \"fixed\" && this.sizing.height != null ? this.sizing.height : height;\n        };\n        const viewport = new Sizeable(viewport_size)\n            .shrink_by(this.sizing.margin)\n            .map(exact_width, exact_height);\n        const computed = this._measure(viewport);\n        const clipped = this.clip_size(computed);\n        const width = exact_width(clipped.width);\n        const height = exact_height(clipped.height);\n        const size = this.apply_aspect(viewport, { width, height });\n        return Object.assign(Object.assign({}, computed), size);\n    }\n    compute(viewport = {}) {\n        const size_hint = this.measure({\n            width: viewport.width != null && this.is_width_expanding() ? viewport.width : Infinity,\n            height: viewport.height != null && this.is_height_expanding() ? viewport.height : Infinity,\n        });\n        const { width, height } = size_hint;\n        const outer = new BBox({ left: 0, top: 0, width, height });\n        let inner = undefined;\n        if (size_hint.inner != null) {\n            const { left, top, right, bottom } = size_hint.inner;\n            inner = new BBox({ left, top, right: width - right, bottom: height - bottom });\n        }\n        this.set_geometry(outer, inner);\n    }\n    get xview() {\n        return this.bbox.xview;\n    }\n    get yview() {\n        return this.bbox.yview;\n    }\n    clip_width(width) {\n        return max(this.sizing.min_width, min(width, this.sizing.max_width));\n    }\n    clip_height(height) {\n        return max(this.sizing.min_height, min(height, this.sizing.max_height));\n    }\n    clip_size({ width, height }) {\n        return {\n            width: this.clip_width(width),\n            height: this.clip_height(height),\n        };\n    }\n}\nLayoutable.__name__ = \"Layoutable\";\nexport class LayoutItem extends Layoutable {\n    /*\n    constructor(readonly measure_fn: (viewport: Size) => Size) {\n      super()\n    }\n    protected _measure(viewport: Size): SizeHint {\n      return this.measure_fn(viewport)\n    }\n    protected _measure(viewport: Size): SizeHint {\n      return {\n        width: viewport.width != Infinity ? viewport.width : this.sizing.min_width,\n        height: viewport.height != Infinity ? viewport.height : this.sizing.min_width,\n      }\n    }\n    */\n    _measure(viewport) {\n        const { width_policy, height_policy } = this.sizing;\n        let width;\n        if (viewport.width == Infinity) {\n            width = this.sizing.width != null ? this.sizing.width : 0;\n        }\n        else {\n            switch (width_policy) {\n                case \"fixed\": {\n                    width = this.sizing.width != null ? this.sizing.width : 0;\n                    break;\n                }\n                case \"min\": {\n                    width = this.sizing.width != null ? min(viewport.width, this.sizing.width) : 0;\n                    break;\n                }\n                case \"fit\": {\n                    width = this.sizing.width != null ? min(viewport.width, this.sizing.width) : viewport.width;\n                    break;\n                }\n                case \"max\": {\n                    width = this.sizing.width != null ? max(viewport.width, this.sizing.width) : viewport.width;\n                    break;\n                }\n            }\n        }\n        let height;\n        if (viewport.height == Infinity) {\n            height = this.sizing.height != null ? this.sizing.height : 0;\n        }\n        else {\n            switch (height_policy) {\n                case \"fixed\": {\n                    height = this.sizing.height != null ? this.sizing.height : 0;\n                    break;\n                }\n                case \"min\": {\n                    height = this.sizing.height != null ? min(viewport.height, this.sizing.height) : 0;\n                    break;\n                }\n                case \"fit\": {\n                    height = this.sizing.height != null ? min(viewport.height, this.sizing.height) : viewport.height;\n                    break;\n                }\n                case \"max\": {\n                    height = this.sizing.height != null ? max(viewport.height, this.sizing.height) : viewport.height;\n                    break;\n                }\n            }\n        }\n        return { width, height };\n    }\n}\nLayoutItem.__name__ = \"LayoutItem\";\nexport class ContentLayoutable extends Layoutable {\n    _measure(viewport) {\n        const content_size = this._content_size();\n        const bounds = viewport\n            .bounded_to(this.sizing.size)\n            .bounded_to(content_size);\n        const width = (() => {\n            switch (this.sizing.width_policy) {\n                case \"fixed\":\n                    return this.sizing.width != null ? this.sizing.width : content_size.width;\n                case \"min\":\n                    return content_size.width;\n                case \"fit\":\n                    return bounds.width;\n                case \"max\":\n                    return Math.max(content_size.width, bounds.width);\n            }\n        })();\n        const height = (() => {\n            switch (this.sizing.height_policy) {\n                case \"fixed\":\n                    return this.sizing.height != null ? this.sizing.height : content_size.height;\n                case \"min\":\n                    return content_size.height;\n                case \"fit\":\n                    return bounds.height;\n                case \"max\":\n                    return Math.max(content_size.height, bounds.height);\n            }\n        })();\n        return { width, height };\n    }\n}\nContentLayoutable.__name__ = \"ContentLayoutable\";\n//# sourceMappingURL=layoutable.js.map"]},"metadata":{},"sourceType":"module"}