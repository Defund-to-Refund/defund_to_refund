{"ast":null,"code":"import { Keys } from \"../../../core/dom\";\nimport { isArray } from \"../../../core/util/types\";\nimport { PolyTool, PolyToolView } from \"./poly_tool\";\nimport { bk_tool_icon_poly_edit } from \"../../../styles/icons\";\nexport class PolyEditToolView extends PolyToolView {\n  constructor() {\n    super(...arguments);\n    this._drawing = false;\n  }\n\n  _doubletap(ev) {\n    if (!this.model.active) return;\n\n    const point = this._map_drag(ev.sx, ev.sy, this.model.vertex_renderer);\n\n    if (point == null) return;\n    const [x, y] = point; // Perform hit testing\n\n    const vertex_selected = this._select_event(ev, false, [this.model.vertex_renderer]);\n\n    const point_cds = this.model.vertex_renderer.data_source; // Type once dataspecs are typed\n\n    const point_glyph = this.model.vertex_renderer.glyph;\n    const [pxkey, pykey] = [point_glyph.x.field, point_glyph.y.field];\n\n    if (vertex_selected.length && this._selected_renderer != null) {\n      // Insert a new point after the selected vertex and enter draw mode\n      const index = point_cds.selected.indices[0];\n\n      if (this._drawing) {\n        this._drawing = false;\n        point_cds.selection_manager.clear();\n      } else {\n        point_cds.selected.indices = [index + 1];\n        if (pxkey) point_cds.get_array(pxkey).splice(index + 1, 0, x);\n        if (pykey) point_cds.get_array(pykey).splice(index + 1, 0, y);\n        this._drawing = true;\n      }\n\n      point_cds.change.emit();\n\n      this._emit_cds_changes(this._selected_renderer.data_source);\n    } else {\n      this._show_vertices(ev);\n    }\n  }\n\n  _show_vertices(ev) {\n    if (!this.model.active) return;\n\n    const renderers = this._select_event(ev, false, this.model.renderers);\n\n    if (!renderers.length) {\n      this._set_vertices([], []);\n\n      this._selected_renderer = null;\n      this._drawing = false;\n      return;\n    }\n\n    const renderer = renderers[0];\n    const glyph = renderer.glyph;\n    const cds = renderer.data_source;\n    const index = cds.selected.indices[0];\n    const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n    let xs;\n    let ys;\n\n    if (xkey) {\n      xs = cds.data[xkey][index];\n      if (!isArray(xs)) cds.data[xkey][index] = xs = Array.from(xs);\n    } else {\n      xs = glyph.xs.value;\n    }\n\n    if (ykey) {\n      ys = cds.data[ykey][index];\n      if (!isArray(ys)) cds.data[ykey][index] = ys = Array.from(ys);\n    } else {\n      ys = glyph.ys.value;\n    }\n\n    this._selected_renderer = renderer;\n\n    this._set_vertices(xs, ys);\n  }\n\n  _move(ev) {\n    if (this._drawing && this._selected_renderer != null) {\n      const renderer = this.model.vertex_renderer;\n      const cds = renderer.data_source;\n      const glyph = renderer.glyph;\n\n      const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n      if (point == null) return;\n      let [x, y] = point;\n      const indices = cds.selected.indices;\n      [x, y] = this._snap_to_vertex(ev, x, y);\n      cds.selected.indices = indices;\n      const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n      const index = indices[0];\n      if (xkey) cds.data[xkey][index] = x;\n      if (ykey) cds.data[ykey][index] = y;\n      cds.change.emit();\n\n      this._selected_renderer.data_source.change.emit();\n    }\n  }\n\n  _tap(ev) {\n    const renderer = this.model.vertex_renderer;\n\n    const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n    if (point == null) return;else if (this._drawing && this._selected_renderer) {\n      let [x, y] = point;\n      const cds = renderer.data_source; // Type once dataspecs are typed\n\n      const glyph = renderer.glyph;\n      const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n      const indices = cds.selected.indices;\n      [x, y] = this._snap_to_vertex(ev, x, y);\n      const index = indices[0];\n      cds.selected.indices = [index + 1];\n\n      if (xkey) {\n        const xs = cds.get_array(xkey);\n        const nx = xs[index];\n        xs[index] = x;\n        xs.splice(index + 1, 0, nx);\n      }\n\n      if (ykey) {\n        const ys = cds.get_array(ykey);\n        const ny = ys[index];\n        ys[index] = y;\n        ys.splice(index + 1, 0, ny);\n      }\n\n      cds.change.emit();\n\n      this._emit_cds_changes(this._selected_renderer.data_source, true, false, true);\n\n      return;\n    }\n    const append = ev.shiftKey;\n\n    this._select_event(ev, append, [renderer]);\n\n    this._select_event(ev, append, this.model.renderers);\n  }\n\n  _remove_vertex() {\n    if (!this._drawing || !this._selected_renderer) return;\n    const renderer = this.model.vertex_renderer;\n    const cds = renderer.data_source; // Type once dataspecs are typed\n\n    const glyph = renderer.glyph;\n    const index = cds.selected.indices[0];\n    const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n    if (xkey) cds.get_array(xkey).splice(index, 1);\n    if (ykey) cds.get_array(ykey).splice(index, 1);\n    cds.change.emit();\n\n    this._emit_cds_changes(this._selected_renderer.data_source);\n  }\n\n  _pan_start(ev) {\n    this._select_event(ev, true, [this.model.vertex_renderer]);\n\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pan(ev) {\n    if (this._basepoint == null) return;\n\n    this._drag_points(ev, [this.model.vertex_renderer]);\n\n    if (this._selected_renderer) this._selected_renderer.data_source.change.emit();\n  }\n\n  _pan_end(ev) {\n    if (this._basepoint == null) return;\n\n    this._drag_points(ev, [this.model.vertex_renderer]);\n\n    this._emit_cds_changes(this.model.vertex_renderer.data_source, false, true, true);\n\n    if (this._selected_renderer) {\n      this._emit_cds_changes(this._selected_renderer.data_source);\n    }\n\n    this._basepoint = null;\n  }\n\n  _keyup(ev) {\n    if (!this.model.active || !this._mouse_in_frame) return;\n    let renderers;\n\n    if (this._selected_renderer) {\n      renderers = [this.model.vertex_renderer];\n    } else {\n      renderers = this.model.renderers;\n    }\n\n    for (const renderer of renderers) {\n      if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n\n        if (this._selected_renderer) {\n          this._emit_cds_changes(this._selected_renderer.data_source);\n        }\n      } else if (ev.keyCode == Keys.Esc) {\n        if (this._drawing) {\n          this._remove_vertex();\n\n          this._drawing = false;\n        } else if (this._selected_renderer) {\n          this._hide_vertices();\n        }\n\n        renderer.data_source.selection_manager.clear();\n      }\n    }\n  }\n\n  deactivate() {\n    if (!this._selected_renderer) {\n      return;\n    } else if (this._drawing) {\n      this._remove_vertex();\n\n      this._drawing = false;\n    }\n\n    this._hide_vertices();\n  }\n\n}\nPolyEditToolView.__name__ = \"PolyEditToolView\";\nexport class PolyEditTool extends PolyTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Poly Edit Tool\";\n    this.icon = bk_tool_icon_poly_edit;\n    this.event_type = [\"tap\", \"pan\", \"move\"];\n    this.default_order = 4;\n  }\n\n  static init_PolyEditTool() {\n    this.prototype.default_view = PolyEditToolView;\n  }\n\n}\nPolyEditTool.__name__ = \"PolyEditTool\";\nPolyEditTool.init_PolyEditTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/edit/poly_edit_tool.js"],"names":["Keys","isArray","PolyTool","PolyToolView","bk_tool_icon_poly_edit","PolyEditToolView","constructor","arguments","_drawing","_doubletap","ev","model","active","point","_map_drag","sx","sy","vertex_renderer","x","y","vertex_selected","_select_event","point_cds","data_source","point_glyph","glyph","pxkey","pykey","field","length","_selected_renderer","index","selected","indices","selection_manager","clear","get_array","splice","change","emit","_emit_cds_changes","_show_vertices","renderers","_set_vertices","renderer","cds","xkey","ykey","xs","ys","data","Array","from","value","_move","_snap_to_vertex","_tap","nx","ny","append","shiftKey","_remove_vertex","_pan_start","_basepoint","_pan","_drag_points","_pan_end","_keyup","_mouse_in_frame","keyCode","Backspace","_delete_selected","Esc","_hide_vertices","deactivate","__name__","PolyEditTool","attrs","tool_name","icon","event_type","default_order","init_PolyEditTool","prototype","default_view"],"mappings":"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","sourcesContent":["import { Keys } from \"../../../core/dom\";\nimport { isArray } from \"../../../core/util/types\";\nimport { PolyTool, PolyToolView } from \"./poly_tool\";\nimport { bk_tool_icon_poly_edit } from \"../../../styles/icons\";\nexport class PolyEditToolView extends PolyToolView {\n    constructor() {\n        super(...arguments);\n        this._drawing = false;\n    }\n    _doubletap(ev) {\n        if (!this.model.active)\n            return;\n        const point = this._map_drag(ev.sx, ev.sy, this.model.vertex_renderer);\n        if (point == null)\n            return;\n        const [x, y] = point;\n        // Perform hit testing\n        const vertex_selected = this._select_event(ev, false, [this.model.vertex_renderer]);\n        const point_cds = this.model.vertex_renderer.data_source;\n        // Type once dataspecs are typed\n        const point_glyph = this.model.vertex_renderer.glyph;\n        const [pxkey, pykey] = [point_glyph.x.field, point_glyph.y.field];\n        if (vertex_selected.length && this._selected_renderer != null) {\n            // Insert a new point after the selected vertex and enter draw mode\n            const index = point_cds.selected.indices[0];\n            if (this._drawing) {\n                this._drawing = false;\n                point_cds.selection_manager.clear();\n            }\n            else {\n                point_cds.selected.indices = [index + 1];\n                if (pxkey)\n                    point_cds.get_array(pxkey).splice(index + 1, 0, x);\n                if (pykey)\n                    point_cds.get_array(pykey).splice(index + 1, 0, y);\n                this._drawing = true;\n            }\n            point_cds.change.emit();\n            this._emit_cds_changes(this._selected_renderer.data_source);\n        }\n        else {\n            this._show_vertices(ev);\n        }\n    }\n    _show_vertices(ev) {\n        if (!this.model.active)\n            return;\n        const renderers = this._select_event(ev, false, this.model.renderers);\n        if (!renderers.length) {\n            this._set_vertices([], []);\n            this._selected_renderer = null;\n            this._drawing = false;\n            return;\n        }\n        const renderer = renderers[0];\n        const glyph = renderer.glyph;\n        const cds = renderer.data_source;\n        const index = cds.selected.indices[0];\n        const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n        let xs;\n        let ys;\n        if (xkey) {\n            xs = cds.data[xkey][index];\n            if (!isArray(xs))\n                cds.data[xkey][index] = xs = Array.from(xs);\n        }\n        else {\n            xs = glyph.xs.value;\n        }\n        if (ykey) {\n            ys = cds.data[ykey][index];\n            if (!isArray(ys))\n                cds.data[ykey][index] = ys = Array.from(ys);\n        }\n        else {\n            ys = glyph.ys.value;\n        }\n        this._selected_renderer = renderer;\n        this._set_vertices(xs, ys);\n    }\n    _move(ev) {\n        if (this._drawing && this._selected_renderer != null) {\n            const renderer = this.model.vertex_renderer;\n            const cds = renderer.data_source;\n            const glyph = renderer.glyph;\n            const point = this._map_drag(ev.sx, ev.sy, renderer);\n            if (point == null)\n                return;\n            let [x, y] = point;\n            const indices = cds.selected.indices;\n            [x, y] = this._snap_to_vertex(ev, x, y);\n            cds.selected.indices = indices;\n            const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n            const index = indices[0];\n            if (xkey)\n                cds.data[xkey][index] = x;\n            if (ykey)\n                cds.data[ykey][index] = y;\n            cds.change.emit();\n            this._selected_renderer.data_source.change.emit();\n        }\n    }\n    _tap(ev) {\n        const renderer = this.model.vertex_renderer;\n        const point = this._map_drag(ev.sx, ev.sy, renderer);\n        if (point == null)\n            return;\n        else if (this._drawing && this._selected_renderer) {\n            let [x, y] = point;\n            const cds = renderer.data_source;\n            // Type once dataspecs are typed\n            const glyph = renderer.glyph;\n            const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n            const indices = cds.selected.indices;\n            [x, y] = this._snap_to_vertex(ev, x, y);\n            const index = indices[0];\n            cds.selected.indices = [index + 1];\n            if (xkey) {\n                const xs = cds.get_array(xkey);\n                const nx = xs[index];\n                xs[index] = x;\n                xs.splice(index + 1, 0, nx);\n            }\n            if (ykey) {\n                const ys = cds.get_array(ykey);\n                const ny = ys[index];\n                ys[index] = y;\n                ys.splice(index + 1, 0, ny);\n            }\n            cds.change.emit();\n            this._emit_cds_changes(this._selected_renderer.data_source, true, false, true);\n            return;\n        }\n        const append = ev.shiftKey;\n        this._select_event(ev, append, [renderer]);\n        this._select_event(ev, append, this.model.renderers);\n    }\n    _remove_vertex() {\n        if (!this._drawing || !this._selected_renderer)\n            return;\n        const renderer = this.model.vertex_renderer;\n        const cds = renderer.data_source;\n        // Type once dataspecs are typed\n        const glyph = renderer.glyph;\n        const index = cds.selected.indices[0];\n        const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n        if (xkey)\n            cds.get_array(xkey).splice(index, 1);\n        if (ykey)\n            cds.get_array(ykey).splice(index, 1);\n        cds.change.emit();\n        this._emit_cds_changes(this._selected_renderer.data_source);\n    }\n    _pan_start(ev) {\n        this._select_event(ev, true, [this.model.vertex_renderer]);\n        this._basepoint = [ev.sx, ev.sy];\n    }\n    _pan(ev) {\n        if (this._basepoint == null)\n            return;\n        this._drag_points(ev, [this.model.vertex_renderer]);\n        if (this._selected_renderer)\n            this._selected_renderer.data_source.change.emit();\n    }\n    _pan_end(ev) {\n        if (this._basepoint == null)\n            return;\n        this._drag_points(ev, [this.model.vertex_renderer]);\n        this._emit_cds_changes(this.model.vertex_renderer.data_source, false, true, true);\n        if (this._selected_renderer) {\n            this._emit_cds_changes(this._selected_renderer.data_source);\n        }\n        this._basepoint = null;\n    }\n    _keyup(ev) {\n        if (!this.model.active || !this._mouse_in_frame)\n            return;\n        let renderers;\n        if (this._selected_renderer) {\n            renderers = [this.model.vertex_renderer];\n        }\n        else {\n            renderers = this.model.renderers;\n        }\n        for (const renderer of renderers) {\n            if (ev.keyCode === Keys.Backspace) {\n                this._delete_selected(renderer);\n                if (this._selected_renderer) {\n                    this._emit_cds_changes(this._selected_renderer.data_source);\n                }\n            }\n            else if (ev.keyCode == Keys.Esc) {\n                if (this._drawing) {\n                    this._remove_vertex();\n                    this._drawing = false;\n                }\n                else if (this._selected_renderer) {\n                    this._hide_vertices();\n                }\n                renderer.data_source.selection_manager.clear();\n            }\n        }\n    }\n    deactivate() {\n        if (!this._selected_renderer) {\n            return;\n        }\n        else if (this._drawing) {\n            this._remove_vertex();\n            this._drawing = false;\n        }\n        this._hide_vertices();\n    }\n}\nPolyEditToolView.__name__ = \"PolyEditToolView\";\nexport class PolyEditTool extends PolyTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Poly Edit Tool\";\n        this.icon = bk_tool_icon_poly_edit;\n        this.event_type = [\"tap\", \"pan\", \"move\"];\n        this.default_order = 4;\n    }\n    static init_PolyEditTool() {\n        this.prototype.default_view = PolyEditToolView;\n    }\n}\nPolyEditTool.__name__ = \"PolyEditTool\";\nPolyEditTool.init_PolyEditTool();\n//# sourceMappingURL=poly_edit_tool.js.map"]},"metadata":{},"sourceType":"module"}