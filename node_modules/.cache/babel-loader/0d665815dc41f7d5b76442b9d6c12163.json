{"ast":null,"code":"import { parse_token, pull_session } from \"../client/connection\";\nimport { logger } from \"../core/logging\";\nimport { add_document_standalone } from \"./standalone\"; // @internal\n\nexport function _get_ws_url(app_path, absolute_url) {\n  let protocol = 'ws:';\n  if (window.location.protocol == 'https:') protocol = 'wss:';\n  let loc;\n\n  if (absolute_url != null) {\n    loc = document.createElement('a');\n    loc.href = absolute_url;\n  } else loc = window.location;\n\n  if (app_path != null) {\n    if (app_path == \"/\") app_path = \"\";\n  } else app_path = loc.pathname.replace(/\\/+$/, '');\n\n  return protocol + '//' + loc.host + app_path + '/ws';\n} // map { websocket url to map { session id to promise of ClientSession } }\n\nconst _sessions = {};\n\nfunction _get_session(websocket_url, token, args_string) {\n  const session_id = parse_token(token).session_id;\n  if (!(websocket_url in _sessions)) _sessions[websocket_url] = {};\n  const subsessions = _sessions[websocket_url];\n  if (!(session_id in subsessions)) subsessions[session_id] = pull_session(websocket_url, token, args_string);\n  return subsessions[session_id];\n} // Fill element with the roots from token\n\n\nexport async function add_document_from_session(websocket_url, token, element, roots = [], use_for_title = false) {\n  const args_string = window.location.search.substr(1);\n  let session;\n\n  try {\n    session = await _get_session(websocket_url, token, args_string);\n  } catch (error) {\n    const session_id = parse_token(token).session_id;\n    logger.error(`Failed to load Bokeh session ${session_id}: ${error}`);\n    throw error;\n  }\n\n  return add_document_standalone(session.document, element, roots, use_for_title);\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/embed/server.js"],"names":["parse_token","pull_session","logger","add_document_standalone","_get_ws_url","app_path","absolute_url","protocol","window","location","loc","document","createElement","href","pathname","replace","host","_sessions","_get_session","websocket_url","token","args_string","session_id","subsessions","add_document_from_session","element","roots","use_for_title","search","substr","session","error"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,sBAA1C;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,uBAAT,QAAwC,cAAxC,C,CACA;;AACA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAA+BC,YAA/B,EAA6C;AAChD,MAAIC,QAAQ,GAAG,KAAf;AACA,MAAIC,MAAM,CAACC,QAAP,CAAgBF,QAAhB,IAA4B,QAAhC,EACIA,QAAQ,GAAG,MAAX;AACJ,MAAIG,GAAJ;;AACA,MAAIJ,YAAY,IAAI,IAApB,EAA0B;AACtBI,IAAAA,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,GAAvB,CAAN;AACAF,IAAAA,GAAG,CAACG,IAAJ,GAAWP,YAAX;AACH,GAHD,MAKII,GAAG,GAAGF,MAAM,CAACC,QAAb;;AACJ,MAAIJ,QAAQ,IAAI,IAAhB,EAAsB;AAClB,QAAIA,QAAQ,IAAI,GAAhB,EACIA,QAAQ,GAAG,EAAX;AACP,GAHD,MAKIA,QAAQ,GAAGK,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqB,MAArB,EAA6B,EAA7B,CAAX;;AACJ,SAAOR,QAAQ,GAAG,IAAX,GAAkBG,GAAG,CAACM,IAAtB,GAA6BX,QAA7B,GAAwC,KAA/C;AACH,C,CACD;;AACA,MAAMY,SAAS,GAAG,EAAlB;;AACA,SAASC,YAAT,CAAsBC,aAAtB,EAAqCC,KAArC,EAA4CC,WAA5C,EAAyD;AACrD,QAAMC,UAAU,GAAGtB,WAAW,CAACoB,KAAD,CAAX,CAAmBE,UAAtC;AACA,MAAI,EAAEH,aAAa,IAAIF,SAAnB,CAAJ,EACIA,SAAS,CAACE,aAAD,CAAT,GAA2B,EAA3B;AACJ,QAAMI,WAAW,GAAGN,SAAS,CAACE,aAAD,CAA7B;AACA,MAAI,EAAEG,UAAU,IAAIC,WAAhB,CAAJ,EACIA,WAAW,CAACD,UAAD,CAAX,GAA0BrB,YAAY,CAACkB,aAAD,EAAgBC,KAAhB,EAAuBC,WAAvB,CAAtC;AACJ,SAAOE,WAAW,CAACD,UAAD,CAAlB;AACH,C,CACD;;;AACA,OAAO,eAAeE,yBAAf,CAAyCL,aAAzC,EAAwDC,KAAxD,EAA+DK,OAA/D,EAAwEC,KAAK,GAAG,EAAhF,EAAoFC,aAAa,GAAG,KAApG,EAA2G;AAC9G,QAAMN,WAAW,GAAGb,MAAM,CAACC,QAAP,CAAgBmB,MAAhB,CAAuBC,MAAvB,CAA8B,CAA9B,CAApB;AACA,MAAIC,OAAJ;;AACA,MAAI;AACAA,IAAAA,OAAO,GAAG,MAAMZ,YAAY,CAACC,aAAD,EAAgBC,KAAhB,EAAuBC,WAAvB,CAA5B;AACH,GAFD,CAGA,OAAOU,KAAP,EAAc;AACV,UAAMT,UAAU,GAAGtB,WAAW,CAACoB,KAAD,CAAX,CAAmBE,UAAtC;AACApB,IAAAA,MAAM,CAAC6B,KAAP,CAAc,gCAA+BT,UAAW,KAAIS,KAAM,EAAlE;AACA,UAAMA,KAAN;AACH;;AACD,SAAO5B,uBAAuB,CAAC2B,OAAO,CAACnB,QAAT,EAAmBc,OAAnB,EAA4BC,KAA5B,EAAmCC,aAAnC,CAA9B;AACH","sourcesContent":["import { parse_token, pull_session } from \"../client/connection\";\nimport { logger } from \"../core/logging\";\nimport { add_document_standalone } from \"./standalone\";\n// @internal\nexport function _get_ws_url(app_path, absolute_url) {\n    let protocol = 'ws:';\n    if (window.location.protocol == 'https:')\n        protocol = 'wss:';\n    let loc;\n    if (absolute_url != null) {\n        loc = document.createElement('a');\n        loc.href = absolute_url;\n    }\n    else\n        loc = window.location;\n    if (app_path != null) {\n        if (app_path == \"/\")\n            app_path = \"\";\n    }\n    else\n        app_path = loc.pathname.replace(/\\/+$/, '');\n    return protocol + '//' + loc.host + app_path + '/ws';\n}\n// map { websocket url to map { session id to promise of ClientSession } }\nconst _sessions = {};\nfunction _get_session(websocket_url, token, args_string) {\n    const session_id = parse_token(token).session_id;\n    if (!(websocket_url in _sessions))\n        _sessions[websocket_url] = {};\n    const subsessions = _sessions[websocket_url];\n    if (!(session_id in subsessions))\n        subsessions[session_id] = pull_session(websocket_url, token, args_string);\n    return subsessions[session_id];\n}\n// Fill element with the roots from token\nexport async function add_document_from_session(websocket_url, token, element, roots = [], use_for_title = false) {\n    const args_string = window.location.search.substr(1);\n    let session;\n    try {\n        session = await _get_session(websocket_url, token, args_string);\n    }\n    catch (error) {\n        const session_id = parse_token(token).session_id;\n        logger.error(`Failed to load Bokeh session ${session_id}: ${error}`);\n        throw error;\n    }\n    return add_document_standalone(session.document, element, roots, use_for_title);\n}\n//# sourceMappingURL=server.js.map"]},"metadata":{},"sourceType":"module"}