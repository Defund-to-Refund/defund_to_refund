{"ast":null,"code":"import FlatBush from \"flatbush\";\nimport { empty } from \"./bbox\";\nexport class SpatialIndex {\n  constructor(points) {\n    this.points = points;\n    this.index = null;\n\n    if (points.length > 0) {\n      this.index = new FlatBush(points.length);\n\n      for (const p of points) {\n        const {\n          x0,\n          y0,\n          x1,\n          y1\n        } = p;\n        this.index.add(x0, y0, x1, y1);\n      }\n\n      this.index.finish();\n    }\n  }\n\n  _normalize(rect) {\n    let {\n      x0,\n      y0,\n      x1,\n      y1\n    } = rect;\n    if (x0 > x1) [x0, x1] = [x1, x0];\n    if (y0 > y1) [y0, y1] = [y1, y0];\n    return {\n      x0,\n      y0,\n      x1,\n      y1\n    };\n  }\n\n  get bbox() {\n    if (this.index == null) return empty();else {\n      const {\n        minX,\n        minY,\n        maxX,\n        maxY\n      } = this.index;\n      return {\n        x0: minX,\n        y0: minY,\n        x1: maxX,\n        y1: maxY\n      };\n    }\n  }\n\n  search(rect) {\n    if (this.index == null) return [];else {\n      const {\n        x0,\n        y0,\n        x1,\n        y1\n      } = this._normalize(rect);\n\n      const indices = this.index.search(x0, y0, x1, y1);\n      return indices.map(j => this.points[j]);\n    }\n  }\n\n  indices(rect) {\n    return this.search(rect).map(({\n      i\n    }) => i);\n  }\n\n}\nSpatialIndex.__name__ = \"SpatialIndex\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/util/spatial.js"],"names":["FlatBush","empty","SpatialIndex","constructor","points","index","length","p","x0","y0","x1","y1","add","finish","_normalize","rect","bbox","minX","minY","maxX","maxY","search","indices","map","j","i","__name__"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,UAArB;AACA,SAASC,KAAT,QAAsB,QAAtB;AACA,OAAO,MAAMC,YAAN,CAAmB;AACtBC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKC,KAAL,GAAa,IAAb;;AACA,QAAID,MAAM,CAACE,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKD,KAAL,GAAa,IAAIL,QAAJ,CAAaI,MAAM,CAACE,MAApB,CAAb;;AACA,WAAK,MAAMC,CAAX,IAAgBH,MAAhB,EAAwB;AACpB,cAAM;AAAEI,UAAAA,EAAF;AAAMC,UAAAA,EAAN;AAAUC,UAAAA,EAAV;AAAcC,UAAAA;AAAd,YAAqBJ,CAA3B;AACA,aAAKF,KAAL,CAAWO,GAAX,CAAeJ,EAAf,EAAmBC,EAAnB,EAAuBC,EAAvB,EAA2BC,EAA3B;AACH;;AACD,WAAKN,KAAL,CAAWQ,MAAX;AACH;AACJ;;AACDC,EAAAA,UAAU,CAACC,IAAD,EAAO;AACb,QAAI;AAAEP,MAAAA,EAAF;AAAMC,MAAAA,EAAN;AAAUC,MAAAA,EAAV;AAAcC,MAAAA;AAAd,QAAqBI,IAAzB;AACA,QAAIP,EAAE,GAAGE,EAAT,EACI,CAACF,EAAD,EAAKE,EAAL,IAAW,CAACA,EAAD,EAAKF,EAAL,CAAX;AACJ,QAAIC,EAAE,GAAGE,EAAT,EACI,CAACF,EAAD,EAAKE,EAAL,IAAW,CAACA,EAAD,EAAKF,EAAL,CAAX;AACJ,WAAO;AAAED,MAAAA,EAAF;AAAMC,MAAAA,EAAN;AAAUC,MAAAA,EAAV;AAAcC,MAAAA;AAAd,KAAP;AACH;;AACD,MAAIK,IAAJ,GAAW;AACP,QAAI,KAAKX,KAAL,IAAc,IAAlB,EACI,OAAOJ,KAAK,EAAZ,CADJ,KAEK;AACD,YAAM;AAAEgB,QAAAA,IAAF;AAAQC,QAAAA,IAAR;AAAcC,QAAAA,IAAd;AAAoBC,QAAAA;AAApB,UAA6B,KAAKf,KAAxC;AACA,aAAO;AAAEG,QAAAA,EAAE,EAAES,IAAN;AAAYR,QAAAA,EAAE,EAAES,IAAhB;AAAsBR,QAAAA,EAAE,EAAES,IAA1B;AAAgCR,QAAAA,EAAE,EAAES;AAApC,OAAP;AACH;AACJ;;AACDC,EAAAA,MAAM,CAACN,IAAD,EAAO;AACT,QAAI,KAAKV,KAAL,IAAc,IAAlB,EACI,OAAO,EAAP,CADJ,KAEK;AACD,YAAM;AAAEG,QAAAA,EAAF;AAAMC,QAAAA,EAAN;AAAUC,QAAAA,EAAV;AAAcC,QAAAA;AAAd,UAAqB,KAAKG,UAAL,CAAgBC,IAAhB,CAA3B;;AACA,YAAMO,OAAO,GAAG,KAAKjB,KAAL,CAAWgB,MAAX,CAAkBb,EAAlB,EAAsBC,EAAtB,EAA0BC,EAA1B,EAA8BC,EAA9B,CAAhB;AACA,aAAOW,OAAO,CAACC,GAAR,CAAaC,CAAD,IAAO,KAAKpB,MAAL,CAAYoB,CAAZ,CAAnB,CAAP;AACH;AACJ;;AACDF,EAAAA,OAAO,CAACP,IAAD,EAAO;AACV,WAAO,KAAKM,MAAL,CAAYN,IAAZ,EAAkBQ,GAAlB,CAAsB,CAAC;AAAEE,MAAAA;AAAF,KAAD,KAAWA,CAAjC,CAAP;AACH;;AAxCqB;AA0C1BvB,YAAY,CAACwB,QAAb,GAAwB,cAAxB","sourcesContent":["import FlatBush from \"flatbush\";\nimport { empty } from \"./bbox\";\nexport class SpatialIndex {\n    constructor(points) {\n        this.points = points;\n        this.index = null;\n        if (points.length > 0) {\n            this.index = new FlatBush(points.length);\n            for (const p of points) {\n                const { x0, y0, x1, y1 } = p;\n                this.index.add(x0, y0, x1, y1);\n            }\n            this.index.finish();\n        }\n    }\n    _normalize(rect) {\n        let { x0, y0, x1, y1 } = rect;\n        if (x0 > x1)\n            [x0, x1] = [x1, x0];\n        if (y0 > y1)\n            [y0, y1] = [y1, y0];\n        return { x0, y0, x1, y1 };\n    }\n    get bbox() {\n        if (this.index == null)\n            return empty();\n        else {\n            const { minX, minY, maxX, maxY } = this.index;\n            return { x0: minX, y0: minY, x1: maxX, y1: maxY };\n        }\n    }\n    search(rect) {\n        if (this.index == null)\n            return [];\n        else {\n            const { x0, y0, x1, y1 } = this._normalize(rect);\n            const indices = this.index.search(x0, y0, x1, y1);\n            return indices.map((j) => this.points[j]);\n        }\n    }\n    indices(rect) {\n        return this.search(rect).map(({ i }) => i);\n    }\n}\nSpatialIndex.__name__ = \"SpatialIndex\";\n//# sourceMappingURL=spatial.js.map"]},"metadata":{},"sourceType":"module"}