{"ast":null,"code":"import { WMTSTileSource } from \"./wmts_tile_source\";\nimport { DataRenderer, DataRendererView } from \"../renderers/data_renderer\";\nimport { Range1d } from \"../ranges/range1d\";\nimport { div, removeElement } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { ImageLoader } from \"../../core/util/image\";\nimport { includes } from \"../../core/util/array\";\nimport { isString } from \"../../core/util/types\";\nimport { SelectionManager } from \"../../core/selection_manager\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport { bk_tile_attribution } from \"../../styles/tiles\";\nexport class TileRendererView extends DataRendererView {\n  initialize() {\n    this._tiles = [];\n    super.initialize();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.change, () => this.request_render());\n    this.connect(this.model.tile_source.change, () => this.request_render());\n  }\n\n  get_extent() {\n    return [this.x_range.start, this.y_range.start, this.x_range.end, this.y_range.end];\n  }\n\n  get map_plot() {\n    return this.plot_model;\n  }\n\n  get map_canvas() {\n    return this.plot_view.canvas_view.ctx;\n  }\n\n  get map_frame() {\n    return this.plot_view.frame;\n  }\n\n  get x_range() {\n    return this.map_plot.x_range;\n  }\n\n  get y_range() {\n    return this.map_plot.y_range;\n  }\n\n  _set_data() {\n    this.extent = this.get_extent();\n    this._last_height = undefined;\n    this._last_width = undefined;\n  }\n\n  _update_attribution() {\n    if (this.attribution_el != null) removeElement(this.attribution_el);\n    const {\n      attribution\n    } = this.model.tile_source;\n\n    if (isString(attribution) && attribution.length > 0) {\n      const {\n        layout,\n        frame\n      } = this.plot_view;\n      const offset_right = layout._width.value - frame._right.value;\n      const offset_bottom = layout._height.value - frame._bottom.value;\n      const max_width = frame._width.value;\n      this.attribution_el = div({\n        class: bk_tile_attribution,\n        style: {\n          position: \"absolute\",\n          right: `${offset_right}px`,\n          bottom: `${offset_bottom}px`,\n          'max-width': `${max_width - 4\n          /*padding*/\n          }px`,\n          padding: \"2px\",\n          'background-color': 'rgba(255,255,255,0.5)',\n          'font-size': '9px',\n          'line-height': '1.05',\n          'white-space': 'nowrap',\n          overflow: 'hidden',\n          'text-overflow': 'ellipsis'\n        }\n      });\n      this.plot_view.canvas_view.add_event(this.attribution_el);\n      this.attribution_el.innerHTML = attribution;\n      this.attribution_el.title = this.attribution_el.textContent.replace(/\\s*\\n\\s*/g, \" \");\n    }\n  }\n\n  _map_data() {\n    this.initial_extent = this.get_extent();\n    const zoom_level = this.model.tile_source.get_level_by_extent(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value);\n    const new_extent = this.model.tile_source.snap_to_zoom_level(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n    this.x_range.start = new_extent[0];\n    this.y_range.start = new_extent[1];\n    this.x_range.end = new_extent[2];\n    this.y_range.end = new_extent[3];\n\n    if (this.x_range instanceof Range1d) {\n      this.x_range.reset_start = new_extent[0];\n      this.x_range.reset_end = new_extent[2];\n    }\n\n    if (this.y_range instanceof Range1d) {\n      this.y_range.reset_start = new_extent[1];\n      this.y_range.reset_end = new_extent[3];\n    }\n\n    this._update_attribution();\n  }\n\n  _create_tile(x, y, z, bounds, cache_only = false) {\n    const [nx, ny, nz] = this.model.tile_source.normalize_xyz(x, y, z);\n    const tile = {\n      img: undefined,\n      tile_coords: [x, y, z],\n      normalized_coords: [nx, ny, nz],\n      quadkey: this.model.tile_source.tile_xyz_to_quadkey(x, y, z),\n      cache_key: this.model.tile_source.tile_xyz_to_key(x, y, z),\n      bounds,\n      loaded: false,\n      finished: false,\n      x_coord: bounds[0],\n      y_coord: bounds[3]\n    };\n    const src = this.model.tile_source.get_image_url(nx, ny, nz);\n    new ImageLoader(src, {\n      loaded: img => {\n        Object.assign(tile, {\n          img,\n          loaded: true\n        });\n\n        if (cache_only) {\n          tile.finished = true;\n          this.notify_finished();\n        } else this.request_render();\n      },\n\n      failed() {\n        tile.finished = true;\n      }\n\n    });\n    this.model.tile_source.tiles.set(tile.cache_key, tile);\n\n    this._tiles.push(tile);\n  }\n\n  _enforce_aspect_ratio() {\n    // brute force way of handling resize or sizing_mode event -------------------------------------------------------------\n    if (this._last_height !== this.map_frame._height.value || this._last_width !== this.map_frame._width.value) {\n      const extent = this.get_extent();\n      const zoom_level = this.model.tile_source.get_level_by_extent(extent, this.map_frame._height.value, this.map_frame._width.value);\n      const new_extent = this.model.tile_source.snap_to_zoom_level(extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n      this.x_range.setv({\n        start: new_extent[0],\n        end: new_extent[2]\n      });\n      this.y_range.setv({\n        start: new_extent[1],\n        end: new_extent[3]\n      });\n      this.extent = new_extent;\n      this._last_height = this.map_frame._height.value;\n      this._last_width = this.map_frame._width.value;\n    }\n  }\n\n  has_finished() {\n    if (!super.has_finished()) {\n      return false;\n    }\n\n    if (this._tiles.length === 0) {\n      return false;\n    }\n\n    for (const tile of this._tiles) {\n      if (!tile.finished) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  render() {\n    if (this.map_initialized == null) {\n      this._set_data();\n\n      this._map_data();\n\n      this.map_initialized = true;\n    }\n\n    this._enforce_aspect_ratio();\n\n    this._update();\n\n    if (this.prefetch_timer != null) {\n      clearTimeout(this.prefetch_timer);\n    }\n\n    this.prefetch_timer = setTimeout(this._prefetch_tiles.bind(this), 500);\n\n    if (this.has_finished()) {\n      this.notify_finished();\n    }\n  }\n\n  _draw_tile(tile_key) {\n    const tile_data = this.model.tile_source.tiles.get(tile_key);\n\n    if (tile_data != null && tile_data.loaded) {\n      const [[sxmin], [symin]] = this.plot_view.map_to_screen([tile_data.bounds[0]], [tile_data.bounds[3]]);\n      const [[sxmax], [symax]] = this.plot_view.map_to_screen([tile_data.bounds[2]], [tile_data.bounds[1]]);\n      const sw = sxmax - sxmin;\n      const sh = symax - symin;\n      const sx = sxmin;\n      const sy = symin;\n      const old_smoothing = this.map_canvas.getImageSmoothingEnabled();\n      this.map_canvas.setImageSmoothingEnabled(this.model.smoothing);\n      this.map_canvas.drawImage(tile_data.img, sx, sy, sw, sh);\n      this.map_canvas.setImageSmoothingEnabled(old_smoothing);\n      tile_data.finished = true;\n    }\n  }\n\n  _set_rect() {\n    const outline_width = this.plot_model.properties.outline_line_width.value();\n    const l = this.map_frame._left.value + outline_width / 2;\n    const t = this.map_frame._top.value + outline_width / 2;\n    const w = this.map_frame._width.value - outline_width;\n    const h = this.map_frame._height.value - outline_width;\n    this.map_canvas.rect(l, t, w, h);\n    this.map_canvas.clip();\n  }\n\n  _render_tiles(tile_keys) {\n    this.map_canvas.save();\n\n    this._set_rect();\n\n    this.map_canvas.globalAlpha = this.model.alpha;\n\n    for (const tile_key of tile_keys) {\n      this._draw_tile(tile_key);\n    }\n\n    this.map_canvas.restore();\n  }\n\n  _prefetch_tiles() {\n    const {\n      tile_source\n    } = this.model;\n    const extent = this.get_extent();\n    const h = this.map_frame._height.value;\n    const w = this.map_frame._width.value;\n    const zoom_level = this.model.tile_source.get_level_by_extent(extent, h, w);\n    const tiles = this.model.tile_source.get_tiles_by_extent(extent, zoom_level);\n\n    for (let t = 0, end = Math.min(10, tiles.length); t < end; t++) {\n      const [x, y, z] = tiles[t];\n      const children = this.model.tile_source.children_by_tile_xyz(x, y, z);\n\n      for (const c of children) {\n        const [cx, cy, cz, cbounds] = c;\n\n        if (tile_source.tiles.has(tile_source.tile_xyz_to_key(cx, cy, cz))) {\n          continue;\n        } else {\n          this._create_tile(cx, cy, cz, cbounds, true);\n        }\n      }\n    }\n  }\n\n  _fetch_tiles(tiles) {\n    for (const tile of tiles) {\n      const [x, y, z, bounds] = tile;\n\n      this._create_tile(x, y, z, bounds);\n    }\n  }\n\n  _update() {\n    const {\n      tile_source\n    } = this.model;\n    const {\n      min_zoom\n    } = tile_source;\n    const {\n      max_zoom\n    } = tile_source;\n    let extent = this.get_extent();\n    const zooming_out = this.extent[2] - this.extent[0] < extent[2] - extent[0];\n    const h = this.map_frame._height.value;\n    const w = this.map_frame._width.value;\n    let zoom_level = tile_source.get_level_by_extent(extent, h, w);\n    let snap_back = false;\n\n    if (zoom_level < min_zoom) {\n      extent = this.extent;\n      zoom_level = min_zoom;\n      snap_back = true;\n    } else if (zoom_level > max_zoom) {\n      extent = this.extent;\n      zoom_level = max_zoom;\n      snap_back = true;\n    }\n\n    if (snap_back) {\n      this.x_range.setv({\n        x_range: {\n          start: extent[0],\n          end: extent[2]\n        }\n      });\n      this.y_range.setv({\n        start: extent[1],\n        end: extent[3]\n      });\n    }\n\n    this.extent = extent;\n    const tiles = tile_source.get_tiles_by_extent(extent, zoom_level);\n    const need_load = [];\n    const cached = [];\n    const parents = [];\n    const children = [];\n\n    for (const t of tiles) {\n      const [x, y, z] = t;\n      const key = tile_source.tile_xyz_to_key(x, y, z);\n      const tile = tile_source.tiles.get(key);\n\n      if (tile != null && tile.loaded) {\n        cached.push(key);\n      } else {\n        if (this.model.render_parents) {\n          const [px, py, pz] = tile_source.get_closest_parent_by_tile_xyz(x, y, z);\n          const parent_key = tile_source.tile_xyz_to_key(px, py, pz);\n          const parent_tile = tile_source.tiles.get(parent_key);\n\n          if (parent_tile != null && parent_tile.loaded && !includes(parents, parent_key)) {\n            parents.push(parent_key);\n          }\n\n          if (zooming_out) {\n            const child_tiles = tile_source.children_by_tile_xyz(x, y, z);\n\n            for (const [cx, cy, cz] of child_tiles) {\n              const child_key = tile_source.tile_xyz_to_key(cx, cy, cz);\n              if (tile_source.tiles.has(child_key)) children.push(child_key);\n            }\n          }\n        }\n      }\n\n      if (tile == null) need_load.push(t);\n    } // draw stand-in parents ----------\n\n\n    this._render_tiles(parents);\n\n    this._render_tiles(children); // draw cached ----------\n\n\n    this._render_tiles(cached); // fetch missing -------\n\n\n    if (this.render_timer != null) {\n      clearTimeout(this.render_timer);\n    }\n\n    this.render_timer = setTimeout(() => this._fetch_tiles(need_load), 65);\n  }\n\n}\nTileRendererView.__name__ = \"TileRendererView\";\nexport class TileRenderer extends DataRenderer {\n  constructor(attrs) {\n    super(attrs); // XXX: tile renderer doesn't allow selection, but needs to fulfil the APIs\n\n    this._selection_manager = new SelectionManager({\n      source: new ColumnDataSource()\n    });\n  }\n\n  static init_TileRenderer() {\n    this.prototype.default_view = TileRendererView;\n    this.define({\n      alpha: [p.Number, 1.0],\n      smoothing: [p.Boolean, true],\n      tile_source: [p.Instance, () => new WMTSTileSource()],\n      render_parents: [p.Boolean, true]\n    });\n  }\n\n  get_selection_manager() {\n    return this._selection_manager;\n  }\n\n}\nTileRenderer.__name__ = \"TileRenderer\";\nTileRenderer.init_TileRenderer();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tiles/tile_renderer.js"],"names":["WMTSTileSource","DataRenderer","DataRendererView","Range1d","div","removeElement","p","ImageLoader","includes","isString","SelectionManager","ColumnDataSource","bk_tile_attribution","TileRendererView","initialize","_tiles","connect_signals","connect","model","change","request_render","tile_source","get_extent","x_range","start","y_range","end","map_plot","plot_model","map_canvas","plot_view","canvas_view","ctx","map_frame","frame","_set_data","extent","_last_height","undefined","_last_width","_update_attribution","attribution_el","attribution","length","layout","offset_right","_width","value","_right","offset_bottom","_height","_bottom","max_width","class","style","position","right","bottom","padding","overflow","add_event","innerHTML","title","textContent","replace","_map_data","initial_extent","zoom_level","get_level_by_extent","new_extent","snap_to_zoom_level","reset_start","reset_end","_create_tile","x","y","z","bounds","cache_only","nx","ny","nz","normalize_xyz","tile","img","tile_coords","normalized_coords","quadkey","tile_xyz_to_quadkey","cache_key","tile_xyz_to_key","loaded","finished","x_coord","y_coord","src","get_image_url","Object","assign","notify_finished","failed","tiles","set","push","_enforce_aspect_ratio","setv","has_finished","render","map_initialized","_update","prefetch_timer","clearTimeout","setTimeout","_prefetch_tiles","bind","_draw_tile","tile_key","tile_data","get","sxmin","symin","map_to_screen","sxmax","symax","sw","sh","sx","sy","old_smoothing","getImageSmoothingEnabled","setImageSmoothingEnabled","smoothing","drawImage","_set_rect","outline_width","properties","outline_line_width","l","_left","t","_top","w","h","rect","clip","_render_tiles","tile_keys","save","globalAlpha","alpha","restore","get_tiles_by_extent","Math","min","children","children_by_tile_xyz","c","cx","cy","cz","cbounds","has","_fetch_tiles","min_zoom","max_zoom","zooming_out","snap_back","need_load","cached","parents","key","render_parents","px","py","pz","get_closest_parent_by_tile_xyz","parent_key","parent_tile","child_tiles","child_key","render_timer","__name__","TileRenderer","constructor","attrs","_selection_manager","source","init_TileRenderer","prototype","default_view","define","Number","Boolean","Instance","get_selection_manager"],"mappings":"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","sourcesContent":["import { WMTSTileSource } from \"./wmts_tile_source\";\nimport { DataRenderer, DataRendererView } from \"../renderers/data_renderer\";\nimport { Range1d } from \"../ranges/range1d\";\nimport { div, removeElement } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { ImageLoader } from \"../../core/util/image\";\nimport { includes } from \"../../core/util/array\";\nimport { isString } from \"../../core/util/types\";\nimport { SelectionManager } from \"../../core/selection_manager\";\nimport { ColumnDataSource } from \"../sources/column_data_source\";\nimport { bk_tile_attribution } from \"../../styles/tiles\";\nexport class TileRendererView extends DataRendererView {\n    initialize() {\n        this._tiles = [];\n        super.initialize();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.change, () => this.request_render());\n        this.connect(this.model.tile_source.change, () => this.request_render());\n    }\n    get_extent() {\n        return [this.x_range.start, this.y_range.start, this.x_range.end, this.y_range.end];\n    }\n    get map_plot() {\n        return this.plot_model;\n    }\n    get map_canvas() {\n        return this.plot_view.canvas_view.ctx;\n    }\n    get map_frame() {\n        return this.plot_view.frame;\n    }\n    get x_range() {\n        return this.map_plot.x_range;\n    }\n    get y_range() {\n        return this.map_plot.y_range;\n    }\n    _set_data() {\n        this.extent = this.get_extent();\n        this._last_height = undefined;\n        this._last_width = undefined;\n    }\n    _update_attribution() {\n        if (this.attribution_el != null)\n            removeElement(this.attribution_el);\n        const { attribution } = this.model.tile_source;\n        if (isString(attribution) && attribution.length > 0) {\n            const { layout, frame } = this.plot_view;\n            const offset_right = layout._width.value - frame._right.value;\n            const offset_bottom = layout._height.value - frame._bottom.value;\n            const max_width = frame._width.value;\n            this.attribution_el = div({\n                class: bk_tile_attribution,\n                style: {\n                    position: \"absolute\",\n                    right: `${offset_right}px`,\n                    bottom: `${offset_bottom}px`,\n                    'max-width': `${max_width - 4 /*padding*/}px`,\n                    padding: \"2px\",\n                    'background-color': 'rgba(255,255,255,0.5)',\n                    'font-size': '9px',\n                    'line-height': '1.05',\n                    'white-space': 'nowrap',\n                    overflow: 'hidden',\n                    'text-overflow': 'ellipsis',\n                },\n            });\n            this.plot_view.canvas_view.add_event(this.attribution_el);\n            this.attribution_el.innerHTML = attribution;\n            this.attribution_el.title = this.attribution_el.textContent.replace(/\\s*\\n\\s*/g, \" \");\n        }\n    }\n    _map_data() {\n        this.initial_extent = this.get_extent();\n        const zoom_level = this.model.tile_source.get_level_by_extent(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value);\n        const new_extent = this.model.tile_source.snap_to_zoom_level(this.initial_extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n        this.x_range.start = new_extent[0];\n        this.y_range.start = new_extent[1];\n        this.x_range.end = new_extent[2];\n        this.y_range.end = new_extent[3];\n        if (this.x_range instanceof Range1d) {\n            this.x_range.reset_start = new_extent[0];\n            this.x_range.reset_end = new_extent[2];\n        }\n        if (this.y_range instanceof Range1d) {\n            this.y_range.reset_start = new_extent[1];\n            this.y_range.reset_end = new_extent[3];\n        }\n        this._update_attribution();\n    }\n    _create_tile(x, y, z, bounds, cache_only = false) {\n        const [nx, ny, nz] = this.model.tile_source.normalize_xyz(x, y, z);\n        const tile = {\n            img: undefined,\n            tile_coords: [x, y, z],\n            normalized_coords: [nx, ny, nz],\n            quadkey: this.model.tile_source.tile_xyz_to_quadkey(x, y, z),\n            cache_key: this.model.tile_source.tile_xyz_to_key(x, y, z),\n            bounds,\n            loaded: false,\n            finished: false,\n            x_coord: bounds[0],\n            y_coord: bounds[3],\n        };\n        const src = this.model.tile_source.get_image_url(nx, ny, nz);\n        new ImageLoader(src, {\n            loaded: (img) => {\n                Object.assign(tile, { img, loaded: true });\n                if (cache_only) {\n                    tile.finished = true;\n                    this.notify_finished();\n                }\n                else\n                    this.request_render();\n            },\n            failed() {\n                tile.finished = true;\n            },\n        });\n        this.model.tile_source.tiles.set(tile.cache_key, tile);\n        this._tiles.push(tile);\n    }\n    _enforce_aspect_ratio() {\n        // brute force way of handling resize or sizing_mode event -------------------------------------------------------------\n        if ((this._last_height !== this.map_frame._height.value) || (this._last_width !== this.map_frame._width.value)) {\n            const extent = this.get_extent();\n            const zoom_level = this.model.tile_source.get_level_by_extent(extent, this.map_frame._height.value, this.map_frame._width.value);\n            const new_extent = this.model.tile_source.snap_to_zoom_level(extent, this.map_frame._height.value, this.map_frame._width.value, zoom_level);\n            this.x_range.setv({ start: new_extent[0], end: new_extent[2] });\n            this.y_range.setv({ start: new_extent[1], end: new_extent[3] });\n            this.extent = new_extent;\n            this._last_height = this.map_frame._height.value;\n            this._last_width = this.map_frame._width.value;\n        }\n    }\n    has_finished() {\n        if (!super.has_finished()) {\n            return false;\n        }\n        if (this._tiles.length === 0) {\n            return false;\n        }\n        for (const tile of this._tiles) {\n            if (!tile.finished) {\n                return false;\n            }\n        }\n        return true;\n    }\n    render() {\n        if (this.map_initialized == null) {\n            this._set_data();\n            this._map_data();\n            this.map_initialized = true;\n        }\n        this._enforce_aspect_ratio();\n        this._update();\n        if (this.prefetch_timer != null) {\n            clearTimeout(this.prefetch_timer);\n        }\n        this.prefetch_timer = setTimeout(this._prefetch_tiles.bind(this), 500);\n        if (this.has_finished()) {\n            this.notify_finished();\n        }\n    }\n    _draw_tile(tile_key) {\n        const tile_data = this.model.tile_source.tiles.get(tile_key);\n        if (tile_data != null && tile_data.loaded) {\n            const [[sxmin], [symin]] = this.plot_view.map_to_screen([tile_data.bounds[0]], [tile_data.bounds[3]]);\n            const [[sxmax], [symax]] = this.plot_view.map_to_screen([tile_data.bounds[2]], [tile_data.bounds[1]]);\n            const sw = sxmax - sxmin;\n            const sh = symax - symin;\n            const sx = sxmin;\n            const sy = symin;\n            const old_smoothing = this.map_canvas.getImageSmoothingEnabled();\n            this.map_canvas.setImageSmoothingEnabled(this.model.smoothing);\n            this.map_canvas.drawImage(tile_data.img, sx, sy, sw, sh);\n            this.map_canvas.setImageSmoothingEnabled(old_smoothing);\n            tile_data.finished = true;\n        }\n    }\n    _set_rect() {\n        const outline_width = this.plot_model.properties.outline_line_width.value();\n        const l = this.map_frame._left.value + (outline_width / 2);\n        const t = this.map_frame._top.value + (outline_width / 2);\n        const w = this.map_frame._width.value - outline_width;\n        const h = this.map_frame._height.value - outline_width;\n        this.map_canvas.rect(l, t, w, h);\n        this.map_canvas.clip();\n    }\n    _render_tiles(tile_keys) {\n        this.map_canvas.save();\n        this._set_rect();\n        this.map_canvas.globalAlpha = this.model.alpha;\n        for (const tile_key of tile_keys) {\n            this._draw_tile(tile_key);\n        }\n        this.map_canvas.restore();\n    }\n    _prefetch_tiles() {\n        const { tile_source } = this.model;\n        const extent = this.get_extent();\n        const h = this.map_frame._height.value;\n        const w = this.map_frame._width.value;\n        const zoom_level = this.model.tile_source.get_level_by_extent(extent, h, w);\n        const tiles = this.model.tile_source.get_tiles_by_extent(extent, zoom_level);\n        for (let t = 0, end = Math.min(10, tiles.length); t < end; t++) {\n            const [x, y, z] = tiles[t];\n            const children = this.model.tile_source.children_by_tile_xyz(x, y, z);\n            for (const c of children) {\n                const [cx, cy, cz, cbounds] = c;\n                if (tile_source.tiles.has(tile_source.tile_xyz_to_key(cx, cy, cz))) {\n                    continue;\n                }\n                else {\n                    this._create_tile(cx, cy, cz, cbounds, true);\n                }\n            }\n        }\n    }\n    _fetch_tiles(tiles) {\n        for (const tile of tiles) {\n            const [x, y, z, bounds] = tile;\n            this._create_tile(x, y, z, bounds);\n        }\n    }\n    _update() {\n        const { tile_source } = this.model;\n        const { min_zoom } = tile_source;\n        const { max_zoom } = tile_source;\n        let extent = this.get_extent();\n        const zooming_out = (this.extent[2] - this.extent[0]) < (extent[2] - extent[0]);\n        const h = this.map_frame._height.value;\n        const w = this.map_frame._width.value;\n        let zoom_level = tile_source.get_level_by_extent(extent, h, w);\n        let snap_back = false;\n        if (zoom_level < min_zoom) {\n            extent = this.extent;\n            zoom_level = min_zoom;\n            snap_back = true;\n        }\n        else if (zoom_level > max_zoom) {\n            extent = this.extent;\n            zoom_level = max_zoom;\n            snap_back = true;\n        }\n        if (snap_back) {\n            this.x_range.setv({ x_range: { start: extent[0], end: extent[2] } });\n            this.y_range.setv({ start: extent[1], end: extent[3] });\n        }\n        this.extent = extent;\n        const tiles = tile_source.get_tiles_by_extent(extent, zoom_level);\n        const need_load = [];\n        const cached = [];\n        const parents = [];\n        const children = [];\n        for (const t of tiles) {\n            const [x, y, z] = t;\n            const key = tile_source.tile_xyz_to_key(x, y, z);\n            const tile = tile_source.tiles.get(key);\n            if (tile != null && tile.loaded) {\n                cached.push(key);\n            }\n            else {\n                if (this.model.render_parents) {\n                    const [px, py, pz] = tile_source.get_closest_parent_by_tile_xyz(x, y, z);\n                    const parent_key = tile_source.tile_xyz_to_key(px, py, pz);\n                    const parent_tile = tile_source.tiles.get(parent_key);\n                    if ((parent_tile != null) && parent_tile.loaded && !includes(parents, parent_key)) {\n                        parents.push(parent_key);\n                    }\n                    if (zooming_out) {\n                        const child_tiles = tile_source.children_by_tile_xyz(x, y, z);\n                        for (const [cx, cy, cz] of child_tiles) {\n                            const child_key = tile_source.tile_xyz_to_key(cx, cy, cz);\n                            if (tile_source.tiles.has(child_key))\n                                children.push(child_key);\n                        }\n                    }\n                }\n            }\n            if (tile == null)\n                need_load.push(t);\n        }\n        // draw stand-in parents ----------\n        this._render_tiles(parents);\n        this._render_tiles(children);\n        // draw cached ----------\n        this._render_tiles(cached);\n        // fetch missing -------\n        if (this.render_timer != null) {\n            clearTimeout(this.render_timer);\n        }\n        this.render_timer = setTimeout((() => this._fetch_tiles(need_load)), 65);\n    }\n}\nTileRendererView.__name__ = \"TileRendererView\";\nexport class TileRenderer extends DataRenderer {\n    constructor(attrs) {\n        super(attrs);\n        // XXX: tile renderer doesn't allow selection, but needs to fulfil the APIs\n        this._selection_manager = new SelectionManager({\n            source: new ColumnDataSource(),\n        });\n    }\n    static init_TileRenderer() {\n        this.prototype.default_view = TileRendererView;\n        this.define({\n            alpha: [p.Number, 1.0],\n            smoothing: [p.Boolean, true],\n            tile_source: [p.Instance, () => new WMTSTileSource()],\n            render_parents: [p.Boolean, true],\n        });\n    }\n    get_selection_manager() {\n        return this._selection_manager;\n    }\n}\nTileRenderer.__name__ = \"TileRenderer\";\nTileRenderer.init_TileRenderer();\n//# sourceMappingURL=tile_renderer.js.map"]},"metadata":{},"sourceType":"module"}