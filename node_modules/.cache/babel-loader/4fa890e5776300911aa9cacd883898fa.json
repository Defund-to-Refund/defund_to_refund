{"ast":null,"code":"import { logger } from \"../../core/logging\";\nimport { Plot } from \"./plot\";\nimport * as p from \"../../core/properties\";\nimport { Model } from \"../../model\";\nimport { Range1d } from '../ranges/range1d';\nimport { GMapPlotView } from \"./gmap_plot_canvas\";\nexport { GMapPlotView };\nexport class MapOptions extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_MapOptions() {\n    this.define({\n      lat: [p.Number],\n      lng: [p.Number],\n      zoom: [p.Number, 12]\n    });\n  }\n\n}\nMapOptions.__name__ = \"MapOptions\";\nMapOptions.init_MapOptions();\nexport class GMapOptions extends MapOptions {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_GMapOptions() {\n    this.define({\n      map_type: [p.String, \"roadmap\"],\n      scale_control: [p.Boolean, false],\n      styles: [p.String],\n      tilt: [p.Int, 45]\n    });\n  }\n\n}\nGMapOptions.__name__ = \"GMapOptions\";\nGMapOptions.init_GMapOptions();\nexport class GMapPlot extends Plot {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_GMapPlot() {\n    this.prototype.default_view = GMapPlotView; // This seems to be necessary so that everything can initialize.\n    // Feels very clumsy, but I'm not sure how the properties system wants\n    // to handle something like this situation.\n\n    this.define({\n      map_options: [p.Instance],\n      api_key: [p.String]\n    });\n    this.override({\n      x_range: () => new Range1d(),\n      y_range: () => new Range1d()\n    });\n  }\n\n  initialize() {\n    super.initialize();\n    this.use_map = true;\n    if (!this.api_key) logger.error(\"api_key is required. See https://developers.google.com/maps/documentation/javascript/get-api-key for more information on how to obtain your own.\");\n  }\n\n}\nGMapPlot.__name__ = \"GMapPlot\";\nGMapPlot.init_GMapPlot();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/plots/gmap_plot.js"],"names":["logger","Plot","p","Model","Range1d","GMapPlotView","MapOptions","constructor","attrs","init_MapOptions","define","lat","Number","lng","zoom","__name__","GMapOptions","init_GMapOptions","map_type","String","scale_control","Boolean","styles","tilt","Int","GMapPlot","init_GMapPlot","prototype","default_view","map_options","Instance","api_key","override","x_range","y_range","initialize","use_map","error"],"mappings":"AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,OAAT,QAAwB,mBAAxB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,SAASA,YAAT;AACA,OAAO,MAAMC,UAAN,SAAyBH,KAAzB,CAA+B;AAClCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,eAAP,GAAyB;AACrB,SAAKC,MAAL,CAAY;AACRC,MAAAA,GAAG,EAAE,CAACT,CAAC,CAACU,MAAH,CADG;AAERC,MAAAA,GAAG,EAAE,CAACX,CAAC,CAACU,MAAH,CAFG;AAGRE,MAAAA,IAAI,EAAE,CAACZ,CAAC,CAACU,MAAH,EAAW,EAAX;AAHE,KAAZ;AAKH;;AAViC;AAYtCN,UAAU,CAACS,QAAX,GAAsB,YAAtB;AACAT,UAAU,CAACG,eAAX;AACA,OAAO,MAAMO,WAAN,SAA0BV,UAA1B,CAAqC;AACxCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOS,gBAAP,GAA0B;AACtB,SAAKP,MAAL,CAAY;AACRQ,MAAAA,QAAQ,EAAE,CAAChB,CAAC,CAACiB,MAAH,EAAW,SAAX,CADF;AAERC,MAAAA,aAAa,EAAE,CAAClB,CAAC,CAACmB,OAAH,EAAY,KAAZ,CAFP;AAGRC,MAAAA,MAAM,EAAE,CAACpB,CAAC,CAACiB,MAAH,CAHA;AAIRI,MAAAA,IAAI,EAAE,CAACrB,CAAC,CAACsB,GAAH,EAAQ,EAAR;AAJE,KAAZ;AAMH;;AAXuC;AAa5CR,WAAW,CAACD,QAAZ,GAAuB,aAAvB;AACAC,WAAW,CAACC,gBAAZ;AACA,OAAO,MAAMQ,QAAN,SAAuBxB,IAAvB,CAA4B;AAC/BM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOkB,aAAP,GAAuB;AACnB,SAAKC,SAAL,CAAeC,YAAf,GAA8BvB,YAA9B,CADmB,CAEnB;AACA;AACA;;AACA,SAAKK,MAAL,CAAY;AACRmB,MAAAA,WAAW,EAAE,CAAC3B,CAAC,CAAC4B,QAAH,CADL;AAERC,MAAAA,OAAO,EAAE,CAAC7B,CAAC,CAACiB,MAAH;AAFD,KAAZ;AAIA,SAAKa,QAAL,CAAc;AACVC,MAAAA,OAAO,EAAE,MAAM,IAAI7B,OAAJ,EADL;AAEV8B,MAAAA,OAAO,EAAE,MAAM,IAAI9B,OAAJ;AAFL,KAAd;AAIH;;AACD+B,EAAAA,UAAU,GAAG;AACT,UAAMA,UAAN;AACA,SAAKC,OAAL,GAAe,IAAf;AACA,QAAI,CAAC,KAAKL,OAAV,EACI/B,MAAM,CAACqC,KAAP,CAAa,kJAAb;AACP;;AAvB8B;AAyBnCZ,QAAQ,CAACV,QAAT,GAAoB,UAApB;AACAU,QAAQ,CAACC,aAAT","sourcesContent":["import { logger } from \"../../core/logging\";\nimport { Plot } from \"./plot\";\nimport * as p from \"../../core/properties\";\nimport { Model } from \"../../model\";\nimport { Range1d } from '../ranges/range1d';\nimport { GMapPlotView } from \"./gmap_plot_canvas\";\nexport { GMapPlotView };\nexport class MapOptions extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_MapOptions() {\n        this.define({\n            lat: [p.Number],\n            lng: [p.Number],\n            zoom: [p.Number, 12],\n        });\n    }\n}\nMapOptions.__name__ = \"MapOptions\";\nMapOptions.init_MapOptions();\nexport class GMapOptions extends MapOptions {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_GMapOptions() {\n        this.define({\n            map_type: [p.String, \"roadmap\"],\n            scale_control: [p.Boolean, false],\n            styles: [p.String],\n            tilt: [p.Int, 45],\n        });\n    }\n}\nGMapOptions.__name__ = \"GMapOptions\";\nGMapOptions.init_GMapOptions();\nexport class GMapPlot extends Plot {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_GMapPlot() {\n        this.prototype.default_view = GMapPlotView;\n        // This seems to be necessary so that everything can initialize.\n        // Feels very clumsy, but I'm not sure how the properties system wants\n        // to handle something like this situation.\n        this.define({\n            map_options: [p.Instance],\n            api_key: [p.String],\n        });\n        this.override({\n            x_range: () => new Range1d(),\n            y_range: () => new Range1d(),\n        });\n    }\n    initialize() {\n        super.initialize();\n        this.use_map = true;\n        if (!this.api_key)\n            logger.error(\"api_key is required. See https://developers.google.com/maps/documentation/javascript/get-api-key for more information on how to obtain your own.\");\n    }\n}\nGMapPlot.__name__ = \"GMapPlot\";\nGMapPlot.init_GMapPlot();\n//# sourceMappingURL=gmap_plot.js.map"]},"metadata":{},"sourceType":"module"}