{"ast":null,"code":"import { SelectTool, SelectToolView } from \"./select_tool\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_tap_select } from \"../../../styles/icons\";\nexport class TapToolView extends SelectToolView {\n  _tap(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    const geometry = {\n      type: 'point',\n      sx,\n      sy\n    };\n    const append = ev.shiftKey;\n\n    this._select(geometry, true, append);\n  }\n\n  _select(geometry, final, append) {\n    const callback = this.model.callback;\n\n    if (this.model.behavior == \"select\") {\n      const renderers_by_source = this._computed_renderers_by_data_source();\n\n      for (const id in renderers_by_source) {\n        const renderers = renderers_by_source[id];\n        const sm = renderers[0].get_selection_manager();\n        const r_views = renderers.map(r => this.plot_view.renderer_views[r.id]);\n        const did_hit = sm.select(r_views, geometry, final, append);\n\n        if (did_hit && callback != null) {\n          const {\n            frame\n          } = this.plot_view;\n          const xscale = frame.xscales[renderers[0].x_range_name];\n          const yscale = frame.yscales[renderers[0].y_range_name];\n          const x = xscale.invert(geometry.sx);\n          const y = yscale.invert(geometry.sy);\n          const data = {\n            geometries: Object.assign(Object.assign({}, geometry), {\n              x,\n              y\n            }),\n            source: sm.source\n          };\n          callback.execute(this.model, data);\n        }\n      }\n\n      this._emit_selection_event(geometry);\n\n      this.plot_view.push_state('tap', {\n        selection: this.plot_view.get_selection()\n      });\n    } else {\n      for (const r of this.computed_renderers) {\n        const sm = r.get_selection_manager();\n        const did_hit = sm.inspect(this.plot_view.renderer_views[r.id], geometry);\n\n        if (did_hit && callback != null) {\n          const {\n            frame\n          } = this.plot_view;\n          const xscale = frame.xscales[r.x_range_name];\n          const yscale = frame.yscales[r.y_range_name];\n          const x = xscale.invert(geometry.sx);\n          const y = yscale.invert(geometry.sy);\n          const data = {\n            geometries: Object.assign(Object.assign({}, geometry), {\n              x,\n              y\n            }),\n            source: sm.source\n          };\n          callback.execute(this.model, data);\n        }\n      }\n    }\n  }\n\n}\nTapToolView.__name__ = \"TapToolView\";\nexport class TapTool extends SelectTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Tap\";\n    this.icon = bk_tool_icon_tap_select;\n    this.event_type = \"tap\";\n    this.default_order = 10;\n  }\n\n  static init_TapTool() {\n    this.prototype.default_view = TapToolView;\n    this.define({\n      behavior: [p.TapBehavior, \"select\"],\n      callback: [p.Any]\n    });\n    this.register_alias(\"click\", () => new TapTool({\n      behavior: \"inspect\"\n    }));\n    this.register_alias(\"tap\", () => new TapTool());\n  }\n\n}\nTapTool.__name__ = \"TapTool\";\nTapTool.init_TapTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/tap_tool.js"],"names":["SelectTool","SelectToolView","p","bk_tool_icon_tap_select","TapToolView","_tap","ev","sx","sy","geometry","type","append","shiftKey","_select","final","callback","model","behavior","renderers_by_source","_computed_renderers_by_data_source","id","renderers","sm","get_selection_manager","r_views","map","r","plot_view","renderer_views","did_hit","select","frame","xscale","xscales","x_range_name","yscale","yscales","y_range_name","x","invert","y","data","geometries","Object","assign","source","execute","_emit_selection_event","push_state","selection","get_selection","computed_renderers","inspect","__name__","TapTool","constructor","attrs","tool_name","icon","event_type","default_order","init_TapTool","prototype","default_view","define","TapBehavior","Any","register_alias"],"mappings":"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","sourcesContent":["import { SelectTool, SelectToolView } from \"./select_tool\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_tap_select } from \"../../../styles/icons\";\nexport class TapToolView extends SelectToolView {\n    _tap(ev) {\n        const { sx, sy } = ev;\n        const geometry = { type: 'point', sx, sy };\n        const append = ev.shiftKey;\n        this._select(geometry, true, append);\n    }\n    _select(geometry, final, append) {\n        const callback = this.model.callback;\n        if (this.model.behavior == \"select\") {\n            const renderers_by_source = this._computed_renderers_by_data_source();\n            for (const id in renderers_by_source) {\n                const renderers = renderers_by_source[id];\n                const sm = renderers[0].get_selection_manager();\n                const r_views = renderers.map((r) => this.plot_view.renderer_views[r.id]);\n                const did_hit = sm.select(r_views, geometry, final, append);\n                if (did_hit && callback != null) {\n                    const { frame } = this.plot_view;\n                    const xscale = frame.xscales[renderers[0].x_range_name];\n                    const yscale = frame.yscales[renderers[0].y_range_name];\n                    const x = xscale.invert(geometry.sx);\n                    const y = yscale.invert(geometry.sy);\n                    const data = { geometries: Object.assign(Object.assign({}, geometry), { x, y }), source: sm.source };\n                    callback.execute(this.model, data);\n                }\n            }\n            this._emit_selection_event(geometry);\n            this.plot_view.push_state('tap', { selection: this.plot_view.get_selection() });\n        }\n        else {\n            for (const r of this.computed_renderers) {\n                const sm = r.get_selection_manager();\n                const did_hit = sm.inspect(this.plot_view.renderer_views[r.id], geometry);\n                if (did_hit && callback != null) {\n                    const { frame } = this.plot_view;\n                    const xscale = frame.xscales[r.x_range_name];\n                    const yscale = frame.yscales[r.y_range_name];\n                    const x = xscale.invert(geometry.sx);\n                    const y = yscale.invert(geometry.sy);\n                    const data = { geometries: Object.assign(Object.assign({}, geometry), { x, y }), source: sm.source };\n                    callback.execute(this.model, data);\n                }\n            }\n        }\n    }\n}\nTapToolView.__name__ = \"TapToolView\";\nexport class TapTool extends SelectTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Tap\";\n        this.icon = bk_tool_icon_tap_select;\n        this.event_type = \"tap\";\n        this.default_order = 10;\n    }\n    static init_TapTool() {\n        this.prototype.default_view = TapToolView;\n        this.define({\n            behavior: [p.TapBehavior, \"select\"],\n            callback: [p.Any],\n        });\n        this.register_alias(\"click\", () => new TapTool({ behavior: \"inspect\" }));\n        this.register_alias(\"tap\", () => new TapTool());\n    }\n}\nTapTool.__name__ = \"TapTool\";\nTapTool.init_TapTool();\n//# sourceMappingURL=tap_tool.js.map"]},"metadata":{},"sourceType":"module"}