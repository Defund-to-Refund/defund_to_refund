{"ast":null,"code":"import { SingleIntervalTicker } from \"./single_interval_ticker\";\nimport { copy_date, last_year_no_later_than, ONE_MONTH } from \"./util\";\nimport * as p from \"../../core/properties\";\nimport { concat } from \"../../core/util/array\"; // Given a start and end time in millis, returns the shortest array of\n// consecutive years (as Dates) that surrounds both times.\n\nfunction date_range_by_year(start_time, end_time) {\n  const start_date = last_year_no_later_than(new Date(start_time));\n  const end_date = last_year_no_later_than(new Date(end_time));\n  end_date.setUTCFullYear(end_date.getUTCFullYear() + 1);\n  const dates = [];\n  const date = start_date;\n\n  while (true) {\n    dates.push(copy_date(date));\n    date.setUTCFullYear(date.getUTCFullYear() + 1);\n    if (date > end_date) break;\n  }\n\n  return dates;\n}\n\nexport class MonthsTicker extends SingleIntervalTicker {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_MonthsTicker() {\n    this.define({\n      months: [p.Array, []]\n    });\n  }\n\n  initialize() {\n    super.initialize();\n    const months = this.months;\n    if (months.length > 1) this.interval = (months[1] - months[0]) * ONE_MONTH;else this.interval = 12 * ONE_MONTH;\n  }\n\n  get_ticks_no_defaults(data_low, data_high, _cross_loc, _desired_n_ticks) {\n    const year_dates = date_range_by_year(data_low, data_high);\n    const months = this.months;\n\n    const months_of_year = year_date => {\n      return months.map(month => {\n        const month_date = copy_date(year_date);\n        month_date.setUTCMonth(month);\n        return month_date;\n      });\n    };\n\n    const month_dates = concat(year_dates.map(months_of_year));\n    const all_ticks = month_dates.map(month_date => month_date.getTime());\n    const ticks_in_range = all_ticks.filter(tick => data_low <= tick && tick <= data_high);\n    return {\n      major: ticks_in_range,\n      minor: []\n    };\n  }\n\n}\nMonthsTicker.__name__ = \"MonthsTicker\";\nMonthsTicker.init_MonthsTicker();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tickers/months_ticker.js"],"names":["SingleIntervalTicker","copy_date","last_year_no_later_than","ONE_MONTH","p","concat","date_range_by_year","start_time","end_time","start_date","Date","end_date","setUTCFullYear","getUTCFullYear","dates","date","push","MonthsTicker","constructor","attrs","init_MonthsTicker","define","months","Array","initialize","length","interval","get_ticks_no_defaults","data_low","data_high","_cross_loc","_desired_n_ticks","year_dates","months_of_year","year_date","map","month","month_date","setUTCMonth","month_dates","all_ticks","getTime","ticks_in_range","filter","tick","major","minor","__name__"],"mappings":"AAAA,SAASA,oBAAT,QAAqC,0BAArC;AACA,SAASC,SAAT,EAAoBC,uBAApB,EAA6CC,SAA7C,QAA8D,QAA9D;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,MAAT,QAAuB,uBAAvB,C,CACA;AACA;;AACA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwCC,QAAxC,EAAkD;AAC9C,QAAMC,UAAU,GAAGP,uBAAuB,CAAC,IAAIQ,IAAJ,CAASH,UAAT,CAAD,CAA1C;AACA,QAAMI,QAAQ,GAAGT,uBAAuB,CAAC,IAAIQ,IAAJ,CAASF,QAAT,CAAD,CAAxC;AACAG,EAAAA,QAAQ,CAACC,cAAT,CAAwBD,QAAQ,CAACE,cAAT,KAA4B,CAApD;AACA,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,IAAI,GAAGN,UAAb;;AACA,SAAO,IAAP,EAAa;AACTK,IAAAA,KAAK,CAACE,IAAN,CAAWf,SAAS,CAACc,IAAD,CAApB;AACAA,IAAAA,IAAI,CAACH,cAAL,CAAoBG,IAAI,CAACF,cAAL,KAAwB,CAA5C;AACA,QAAIE,IAAI,GAAGJ,QAAX,EACI;AACP;;AACD,SAAOG,KAAP;AACH;;AACD,OAAO,MAAMG,YAAN,SAA2BjB,oBAA3B,CAAgD;AACnDkB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,iBAAP,GAA2B;AACvB,SAAKC,MAAL,CAAY;AACRC,MAAAA,MAAM,EAAE,CAAClB,CAAC,CAACmB,KAAH,EAAU,EAAV;AADA,KAAZ;AAGH;;AACDC,EAAAA,UAAU,GAAG;AACT,UAAMA,UAAN;AACA,UAAMF,MAAM,GAAG,KAAKA,MAApB;AACA,QAAIA,MAAM,CAACG,MAAP,GAAgB,CAApB,EACI,KAAKC,QAAL,GAAgB,CAACJ,MAAM,CAAC,CAAD,CAAN,GAAYA,MAAM,CAAC,CAAD,CAAnB,IAA0BnB,SAA1C,CADJ,KAGI,KAAKuB,QAAL,GAAgB,KAAKvB,SAArB;AACP;;AACDwB,EAAAA,qBAAqB,CAACC,QAAD,EAAWC,SAAX,EAAsBC,UAAtB,EAAkCC,gBAAlC,EAAoD;AACrE,UAAMC,UAAU,GAAG1B,kBAAkB,CAACsB,QAAD,EAAWC,SAAX,CAArC;AACA,UAAMP,MAAM,GAAG,KAAKA,MAApB;;AACA,UAAMW,cAAc,GAAIC,SAAD,IAAe;AAClC,aAAOZ,MAAM,CAACa,GAAP,CAAYC,KAAD,IAAW;AACzB,cAAMC,UAAU,GAAGpC,SAAS,CAACiC,SAAD,CAA5B;AACAG,QAAAA,UAAU,CAACC,WAAX,CAAuBF,KAAvB;AACA,eAAOC,UAAP;AACH,OAJM,CAAP;AAKH,KAND;;AAOA,UAAME,WAAW,GAAGlC,MAAM,CAAC2B,UAAU,CAACG,GAAX,CAAeF,cAAf,CAAD,CAA1B;AACA,UAAMO,SAAS,GAAGD,WAAW,CAACJ,GAAZ,CAAiBE,UAAD,IAAgBA,UAAU,CAACI,OAAX,EAAhC,CAAlB;AACA,UAAMC,cAAc,GAAGF,SAAS,CAACG,MAAV,CAAkBC,IAAD,IAAUhB,QAAQ,IAAIgB,IAAZ,IAAoBA,IAAI,IAAIf,SAAvD,CAAvB;AACA,WAAO;AACHgB,MAAAA,KAAK,EAAEH,cADJ;AAEHI,MAAAA,KAAK,EAAE;AAFJ,KAAP;AAIH;;AAlCkD;AAoCvD7B,YAAY,CAAC8B,QAAb,GAAwB,cAAxB;AACA9B,YAAY,CAACG,iBAAb","sourcesContent":["import { SingleIntervalTicker } from \"./single_interval_ticker\";\nimport { copy_date, last_year_no_later_than, ONE_MONTH } from \"./util\";\nimport * as p from \"../../core/properties\";\nimport { concat } from \"../../core/util/array\";\n// Given a start and end time in millis, returns the shortest array of\n// consecutive years (as Dates) that surrounds both times.\nfunction date_range_by_year(start_time, end_time) {\n    const start_date = last_year_no_later_than(new Date(start_time));\n    const end_date = last_year_no_later_than(new Date(end_time));\n    end_date.setUTCFullYear(end_date.getUTCFullYear() + 1);\n    const dates = [];\n    const date = start_date;\n    while (true) {\n        dates.push(copy_date(date));\n        date.setUTCFullYear(date.getUTCFullYear() + 1);\n        if (date > end_date)\n            break;\n    }\n    return dates;\n}\nexport class MonthsTicker extends SingleIntervalTicker {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_MonthsTicker() {\n        this.define({\n            months: [p.Array, []],\n        });\n    }\n    initialize() {\n        super.initialize();\n        const months = this.months;\n        if (months.length > 1)\n            this.interval = (months[1] - months[0]) * ONE_MONTH;\n        else\n            this.interval = 12 * ONE_MONTH;\n    }\n    get_ticks_no_defaults(data_low, data_high, _cross_loc, _desired_n_ticks) {\n        const year_dates = date_range_by_year(data_low, data_high);\n        const months = this.months;\n        const months_of_year = (year_date) => {\n            return months.map((month) => {\n                const month_date = copy_date(year_date);\n                month_date.setUTCMonth(month);\n                return month_date;\n            });\n        };\n        const month_dates = concat(year_dates.map(months_of_year));\n        const all_ticks = month_dates.map((month_date) => month_date.getTime());\n        const ticks_in_range = all_ticks.filter((tick) => data_low <= tick && tick <= data_high);\n        return {\n            major: ticks_in_range,\n            minor: [],\n        };\n    }\n}\nMonthsTicker.__name__ = \"MonthsTicker\";\nMonthsTicker.init_MonthsTicker();\n//# sourceMappingURL=months_ticker.js.map"]},"metadata":{},"sourceType":"module"}