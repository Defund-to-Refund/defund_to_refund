{"ast":null,"code":"import { Transform } from \"./transform\";\nimport { FactorRange } from \"../ranges/factor_range\";\nimport * as p from \"../../core/properties\";\nimport { isNumber, isArrayableOf } from \"../../core/util/types\";\nexport class Dodge extends Transform {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Dodge() {\n    this.define({\n      value: [p.Number, 0],\n      range: [p.Instance]\n    });\n  } // XXX: this is repeated in ./jitter.ts\n\n\n  v_compute(xs0) {\n    let xs;\n    if (this.range instanceof FactorRange) xs = this.range.v_synthetic(xs0);else if (isArrayableOf(xs0, isNumber)) xs = xs0;else throw new Error(\"unexpected\");\n    const result = new Float64Array(xs.length);\n\n    for (let i = 0; i < xs.length; i++) {\n      const x = xs[i];\n      result[i] = this._compute(x);\n    }\n\n    return result;\n  }\n\n  compute(x) {\n    if (this.range instanceof FactorRange) return this._compute(this.range.synthetic(x));else if (isNumber(x)) return this._compute(x);else throw new Error(\"unexpected\");\n  }\n\n  _compute(x) {\n    return x + this.value;\n  }\n\n}\nDodge.__name__ = \"Dodge\";\nDodge.init_Dodge();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/transforms/dodge.js"],"names":["Transform","FactorRange","p","isNumber","isArrayableOf","Dodge","constructor","attrs","init_Dodge","define","value","Number","range","Instance","v_compute","xs0","xs","v_synthetic","Error","result","Float64Array","length","i","x","_compute","compute","synthetic","__name__"],"mappings":"AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,QAAT,EAAmBC,aAAnB,QAAwC,uBAAxC;AACA,OAAO,MAAMC,KAAN,SAAoBL,SAApB,CAA8B;AACjCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,UAAP,GAAoB;AAChB,SAAKC,MAAL,CAAY;AACRC,MAAAA,KAAK,EAAE,CAACR,CAAC,CAACS,MAAH,EAAW,CAAX,CADC;AAERC,MAAAA,KAAK,EAAE,CAACV,CAAC,CAACW,QAAH;AAFC,KAAZ;AAIH,GATgC,CAUjC;;;AACAC,EAAAA,SAAS,CAACC,GAAD,EAAM;AACX,QAAIC,EAAJ;AACA,QAAI,KAAKJ,KAAL,YAAsBX,WAA1B,EACIe,EAAE,GAAG,KAAKJ,KAAL,CAAWK,WAAX,CAAuBF,GAAvB,CAAL,CADJ,KAEK,IAAIX,aAAa,CAACW,GAAD,EAAMZ,QAAN,CAAjB,EACDa,EAAE,GAAGD,GAAL,CADC,KAGD,MAAM,IAAIG,KAAJ,CAAU,YAAV,CAAN;AACJ,UAAMC,MAAM,GAAG,IAAIC,YAAJ,CAAiBJ,EAAE,CAACK,MAApB,CAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,EAAE,CAACK,MAAvB,EAA+BC,CAAC,EAAhC,EAAoC;AAChC,YAAMC,CAAC,GAAGP,EAAE,CAACM,CAAD,CAAZ;AACAH,MAAAA,MAAM,CAACG,CAAD,CAAN,GAAY,KAAKE,QAAL,CAAcD,CAAd,CAAZ;AACH;;AACD,WAAOJ,MAAP;AACH;;AACDM,EAAAA,OAAO,CAACF,CAAD,EAAI;AACP,QAAI,KAAKX,KAAL,YAAsBX,WAA1B,EACI,OAAO,KAAKuB,QAAL,CAAc,KAAKZ,KAAL,CAAWc,SAAX,CAAqBH,CAArB,CAAd,CAAP,CADJ,KAEK,IAAIpB,QAAQ,CAACoB,CAAD,CAAZ,EACD,OAAO,KAAKC,QAAL,CAAcD,CAAd,CAAP,CADC,KAGD,MAAM,IAAIL,KAAJ,CAAU,YAAV,CAAN;AACP;;AACDM,EAAAA,QAAQ,CAACD,CAAD,EAAI;AACR,WAAOA,CAAC,GAAG,KAAKb,KAAhB;AACH;;AApCgC;AAsCrCL,KAAK,CAACsB,QAAN,GAAiB,OAAjB;AACAtB,KAAK,CAACG,UAAN","sourcesContent":["import { Transform } from \"./transform\";\nimport { FactorRange } from \"../ranges/factor_range\";\nimport * as p from \"../../core/properties\";\nimport { isNumber, isArrayableOf } from \"../../core/util/types\";\nexport class Dodge extends Transform {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Dodge() {\n        this.define({\n            value: [p.Number, 0],\n            range: [p.Instance],\n        });\n    }\n    // XXX: this is repeated in ./jitter.ts\n    v_compute(xs0) {\n        let xs;\n        if (this.range instanceof FactorRange)\n            xs = this.range.v_synthetic(xs0);\n        else if (isArrayableOf(xs0, isNumber))\n            xs = xs0;\n        else\n            throw new Error(\"unexpected\");\n        const result = new Float64Array(xs.length);\n        for (let i = 0; i < xs.length; i++) {\n            const x = xs[i];\n            result[i] = this._compute(x);\n        }\n        return result;\n    }\n    compute(x) {\n        if (this.range instanceof FactorRange)\n            return this._compute(this.range.synthetic(x));\n        else if (isNumber(x))\n            return this._compute(x);\n        else\n            throw new Error(\"unexpected\");\n    }\n    _compute(x) {\n        return x + this.value;\n    }\n}\nDodge.__name__ = \"Dodge\";\nDodge.init_Dodge();\n//# sourceMappingURL=dodge.js.map"]},"metadata":{},"sourceType":"module"}