{"ast":null,"code":"import tz from \"timezone\";\nimport * as Numbro from \"@bokeh/numbro\";\nimport { _ } from \"underscore.template\";\nimport * as p from \"../../../core/properties\";\nimport { div, i } from \"../../../core/dom\";\nimport { isString } from \"../../../core/util/types\";\nimport { Model } from \"../../../model\";\nexport class CellFormatter extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  doFormat(_row, _cell, value, _columnDef, _dataContext) {\n    if (value == null) return \"\";else return (value + \"\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n  }\n\n}\nCellFormatter.__name__ = \"CellFormatter\";\nexport class StringFormatter extends CellFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_StringFormatter() {\n    this.define({\n      font_style: [p.FontStyle, \"normal\"],\n      text_align: [p.TextAlign, \"left\"],\n      text_color: [p.Color]\n    });\n  }\n\n  doFormat(_row, _cell, value, _columnDef, _dataContext) {\n    const {\n      font_style,\n      text_align,\n      text_color\n    } = this;\n    const text = div({}, value == null ? \"\" : `${value}`);\n\n    switch (font_style) {\n      case \"bold\":\n        text.style.fontWeight = \"bold\";\n        break;\n\n      case \"italic\":\n        text.style.fontStyle = \"italic\";\n        break;\n    }\n\n    if (text_align != null) text.style.textAlign = text_align;\n    if (text_color != null) text.style.color = text_color;\n    return text.outerHTML;\n  }\n\n}\nStringFormatter.__name__ = \"StringFormatter\";\nStringFormatter.init_StringFormatter();\nexport class ScientificFormatter extends StringFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ScientificFormatter() {\n    this.define({\n      precision: [p.Number, 10],\n      power_limit_high: [p.Number, 5],\n      power_limit_low: [p.Number, -3]\n    });\n  }\n\n  get scientific_limit_low() {\n    return 10.0 ** this.power_limit_low;\n  }\n\n  get scientific_limit_high() {\n    return 10.0 ** this.power_limit_high;\n  }\n\n  doFormat(row, cell, value, columnDef, dataContext) {\n    const need_sci = value <= this.scientific_limit_low || value >= this.scientific_limit_high;\n    let precision = this.precision; // toExponential does not handle precision values < 0 correctly\n\n    if (precision < 1) {\n      precision = 1;\n    }\n\n    if (need_sci) {\n      value = value.toExponential(precision);\n    } else {\n      value = value.toFixed(precision).replace(/(\\.[0-9]*?)0+$/, \"$1\").replace(/\\.$/, \"\");\n    } // add StringFormatter formatting\n\n\n    return super.doFormat(row, cell, value, columnDef, dataContext);\n  }\n\n}\nScientificFormatter.__name__ = \"ScientificFormatter\";\nScientificFormatter.init_ScientificFormatter();\nexport class NumberFormatter extends StringFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_NumberFormatter() {\n    this.define({\n      format: [p.String, '0,0'],\n      language: [p.String, 'en'],\n      rounding: [p.RoundingFunction, 'round']\n    });\n  }\n\n  doFormat(row, cell, value, columnDef, dataContext) {\n    const {\n      format,\n      language\n    } = this;\n\n    const rounding = (() => {\n      switch (this.rounding) {\n        case \"round\":\n        case \"nearest\":\n          return Math.round;\n\n        case \"floor\":\n        case \"rounddown\":\n          return Math.floor;\n\n        case \"ceil\":\n        case \"roundup\":\n          return Math.ceil;\n      }\n    })();\n\n    value = Numbro.format(value, format, language, rounding);\n    return super.doFormat(row, cell, value, columnDef, dataContext);\n  }\n\n}\nNumberFormatter.__name__ = \"NumberFormatter\";\nNumberFormatter.init_NumberFormatter();\nexport class BooleanFormatter extends CellFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_BooleanFormatter() {\n    this.define({\n      icon: [p.String, 'check']\n    });\n  }\n\n  doFormat(_row, _cell, value, _columnDef, _dataContext) {\n    return !!value ? i({\n      class: this.icon\n    }).outerHTML : \"\";\n  }\n\n}\nBooleanFormatter.__name__ = \"BooleanFormatter\";\nBooleanFormatter.init_BooleanFormatter();\nexport class DateFormatter extends CellFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_DateFormatter() {\n    this.define({\n      format: [p.String, 'ISO-8601']\n    });\n  }\n\n  getFormat() {\n    // using definitions provided here: https://api.jqueryui.com/datepicker/\n    // except not implementing TICKS\n    switch (this.format) {\n      case \"ATOM\":\n      case \"W3C\":\n      case \"RFC-3339\":\n      case \"ISO-8601\":\n        return \"%Y-%m-%d\";\n\n      case \"COOKIE\":\n        return \"%a, %d %b %Y\";\n\n      case \"RFC-850\":\n        return \"%A, %d-%b-%y\";\n\n      case \"RFC-1123\":\n      case \"RFC-2822\":\n        return \"%a, %e %b %Y\";\n\n      case \"RSS\":\n      case \"RFC-822\":\n      case \"RFC-1036\":\n        return \"%a, %e %b %y\";\n\n      case \"TIMESTAMP\":\n        return undefined;\n\n      default:\n        return this.format;\n    }\n  }\n\n  doFormat(row, cell, value, columnDef, dataContext) {\n    value = isString(value) ? parseInt(value, 10) : value;\n    const date = tz(value, this.getFormat());\n    return super.doFormat(row, cell, date, columnDef, dataContext);\n  }\n\n}\nDateFormatter.__name__ = \"DateFormatter\";\nDateFormatter.init_DateFormatter();\nexport class HTMLTemplateFormatter extends CellFormatter {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_HTMLTemplateFormatter() {\n    this.define({\n      template: [p.String, '<%= value %>']\n    });\n  }\n\n  doFormat(_row, _cell, value, _columnDef, dataContext) {\n    const {\n      template\n    } = this;\n    if (value == null) return \"\";else {\n      const compiled_template = _.template(template);\n\n      const context = Object.assign(Object.assign({}, dataContext), {\n        value\n      });\n      return compiled_template(context);\n    }\n  }\n\n}\nHTMLTemplateFormatter.__name__ = \"HTMLTemplateFormatter\";\nHTMLTemplateFormatter.init_HTMLTemplateFormatter();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/tables/cell_formatters.js"],"names":["tz","Numbro","_","p","div","i","isString","Model","CellFormatter","constructor","attrs","doFormat","_row","_cell","value","_columnDef","_dataContext","replace","__name__","StringFormatter","init_StringFormatter","define","font_style","FontStyle","text_align","TextAlign","text_color","Color","text","style","fontWeight","fontStyle","textAlign","color","outerHTML","ScientificFormatter","init_ScientificFormatter","precision","Number","power_limit_high","power_limit_low","scientific_limit_low","scientific_limit_high","row","cell","columnDef","dataContext","need_sci","toExponential","toFixed","NumberFormatter","init_NumberFormatter","format","String","language","rounding","RoundingFunction","Math","round","floor","ceil","BooleanFormatter","init_BooleanFormatter","icon","class","DateFormatter","init_DateFormatter","getFormat","undefined","parseInt","date","HTMLTemplateFormatter","init_HTMLTemplateFormatter","template","compiled_template","context","Object","assign"],"mappings":"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","sourcesContent":["import tz from \"timezone\";\nimport * as Numbro from \"@bokeh/numbro\";\nimport { _ } from \"underscore.template\";\nimport * as p from \"../../../core/properties\";\nimport { div, i } from \"../../../core/dom\";\nimport { isString } from \"../../../core/util/types\";\nimport { Model } from \"../../../model\";\nexport class CellFormatter extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    doFormat(_row, _cell, value, _columnDef, _dataContext) {\n        if (value == null)\n            return \"\";\n        else\n            return (value + \"\").replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\");\n    }\n}\nCellFormatter.__name__ = \"CellFormatter\";\nexport class StringFormatter extends CellFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_StringFormatter() {\n        this.define({\n            font_style: [p.FontStyle, \"normal\"],\n            text_align: [p.TextAlign, \"left\"],\n            text_color: [p.Color],\n        });\n    }\n    doFormat(_row, _cell, value, _columnDef, _dataContext) {\n        const { font_style, text_align, text_color } = this;\n        const text = div({}, value == null ? \"\" : `${value}`);\n        switch (font_style) {\n            case \"bold\":\n                text.style.fontWeight = \"bold\";\n                break;\n            case \"italic\":\n                text.style.fontStyle = \"italic\";\n                break;\n        }\n        if (text_align != null)\n            text.style.textAlign = text_align;\n        if (text_color != null)\n            text.style.color = text_color;\n        return text.outerHTML;\n    }\n}\nStringFormatter.__name__ = \"StringFormatter\";\nStringFormatter.init_StringFormatter();\nexport class ScientificFormatter extends StringFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ScientificFormatter() {\n        this.define({\n            precision: [p.Number, 10],\n            power_limit_high: [p.Number, 5],\n            power_limit_low: [p.Number, -3],\n        });\n    }\n    get scientific_limit_low() {\n        return 10.0 ** this.power_limit_low;\n    }\n    get scientific_limit_high() {\n        return 10.0 ** this.power_limit_high;\n    }\n    doFormat(row, cell, value, columnDef, dataContext) {\n        const need_sci = value <= this.scientific_limit_low || value >= this.scientific_limit_high;\n        let precision = this.precision;\n        // toExponential does not handle precision values < 0 correctly\n        if (precision < 1) {\n            precision = 1;\n        }\n        if (need_sci) {\n            value = value.toExponential(precision);\n        }\n        else {\n            value = value.toFixed(precision).replace(/(\\.[0-9]*?)0+$/, \"$1\").replace(/\\.$/, \"\");\n        }\n        // add StringFormatter formatting\n        return super.doFormat(row, cell, value, columnDef, dataContext);\n    }\n}\nScientificFormatter.__name__ = \"ScientificFormatter\";\nScientificFormatter.init_ScientificFormatter();\nexport class NumberFormatter extends StringFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_NumberFormatter() {\n        this.define({\n            format: [p.String, '0,0'],\n            language: [p.String, 'en'],\n            rounding: [p.RoundingFunction, 'round'],\n        });\n    }\n    doFormat(row, cell, value, columnDef, dataContext) {\n        const { format, language } = this;\n        const rounding = (() => {\n            switch (this.rounding) {\n                case \"round\":\n                case \"nearest\": return Math.round;\n                case \"floor\":\n                case \"rounddown\": return Math.floor;\n                case \"ceil\":\n                case \"roundup\": return Math.ceil;\n            }\n        })();\n        value = Numbro.format(value, format, language, rounding);\n        return super.doFormat(row, cell, value, columnDef, dataContext);\n    }\n}\nNumberFormatter.__name__ = \"NumberFormatter\";\nNumberFormatter.init_NumberFormatter();\nexport class BooleanFormatter extends CellFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_BooleanFormatter() {\n        this.define({\n            icon: [p.String, 'check'],\n        });\n    }\n    doFormat(_row, _cell, value, _columnDef, _dataContext) {\n        return !!value ? i({ class: this.icon }).outerHTML : \"\";\n    }\n}\nBooleanFormatter.__name__ = \"BooleanFormatter\";\nBooleanFormatter.init_BooleanFormatter();\nexport class DateFormatter extends CellFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_DateFormatter() {\n        this.define({\n            format: [p.String, 'ISO-8601'],\n        });\n    }\n    getFormat() {\n        // using definitions provided here: https://api.jqueryui.com/datepicker/\n        // except not implementing TICKS\n        switch (this.format) {\n            case \"ATOM\":\n            case \"W3C\":\n            case \"RFC-3339\":\n            case \"ISO-8601\":\n                return \"%Y-%m-%d\";\n            case \"COOKIE\":\n                return \"%a, %d %b %Y\";\n            case \"RFC-850\":\n                return \"%A, %d-%b-%y\";\n            case \"RFC-1123\":\n            case \"RFC-2822\":\n                return \"%a, %e %b %Y\";\n            case \"RSS\":\n            case \"RFC-822\":\n            case \"RFC-1036\":\n                return \"%a, %e %b %y\";\n            case \"TIMESTAMP\":\n                return undefined;\n            default:\n                return this.format;\n        }\n    }\n    doFormat(row, cell, value, columnDef, dataContext) {\n        value = isString(value) ? parseInt(value, 10) : value;\n        const date = tz(value, this.getFormat());\n        return super.doFormat(row, cell, date, columnDef, dataContext);\n    }\n}\nDateFormatter.__name__ = \"DateFormatter\";\nDateFormatter.init_DateFormatter();\nexport class HTMLTemplateFormatter extends CellFormatter {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_HTMLTemplateFormatter() {\n        this.define({\n            template: [p.String, '<%= value %>'],\n        });\n    }\n    doFormat(_row, _cell, value, _columnDef, dataContext) {\n        const { template } = this;\n        if (value == null)\n            return \"\";\n        else {\n            const compiled_template = _.template(template);\n            const context = Object.assign(Object.assign({}, dataContext), { value });\n            return compiled_template(context);\n        }\n    }\n}\nHTMLTemplateFormatter.__name__ = \"HTMLTemplateFormatter\";\nHTMLTemplateFormatter.init_HTMLTemplateFormatter();\n//# sourceMappingURL=cell_formatters.js.map"]},"metadata":{},"sourceType":"module"}