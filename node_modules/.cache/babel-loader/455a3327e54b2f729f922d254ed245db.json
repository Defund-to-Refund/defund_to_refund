{"ast":null,"code":"import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { PolyAnnotation } from \"../../annotations/poly_annotation\";\nimport { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_lasso_select } from \"../../../styles/icons\";\nexport class LassoSelectToolView extends SelectToolView {\n  initialize() {\n    super.initialize();\n    this.data = null;\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.active.change, () => this._active_change());\n  }\n\n  _active_change() {\n    if (!this.model.active) this._clear_overlay();\n  }\n\n  _keyup(ev) {\n    if (ev.keyCode == Keys.Enter) this._clear_overlay();\n  }\n\n  _pan_start(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    this.data = {\n      sx: [sx],\n      sy: [sy]\n    };\n  }\n\n  _pan(ev) {\n    const {\n      sx: _sx,\n      sy: _sy\n    } = ev;\n    const [sx, sy] = this.plot_view.frame.bbox.clip(_sx, _sy);\n    this.data.sx.push(sx);\n    this.data.sy.push(sy);\n    const overlay = this.model.overlay;\n    overlay.update({\n      xs: this.data.sx,\n      ys: this.data.sy\n    });\n\n    if (this.model.select_every_mousemove) {\n      const append = ev.shiftKey;\n\n      this._do_select(this.data.sx, this.data.sy, false, append);\n    }\n  }\n\n  _pan_end(ev) {\n    this._clear_overlay();\n\n    const append = ev.shiftKey;\n\n    this._do_select(this.data.sx, this.data.sy, true, append);\n\n    this.plot_view.push_state('lasso_select', {\n      selection: this.plot_view.get_selection()\n    });\n  }\n\n  _clear_overlay() {\n    this.model.overlay.update({\n      xs: [],\n      ys: []\n    });\n  }\n\n  _do_select(sx, sy, final, append) {\n    const geometry = {\n      type: 'poly',\n      sx,\n      sy\n    };\n\n    this._select(geometry, final, append);\n  }\n\n}\nLassoSelectToolView.__name__ = \"LassoSelectToolView\";\n\nconst DEFAULT_POLY_OVERLAY = () => {\n  return new PolyAnnotation({\n    level: \"overlay\",\n    xs_units: \"screen\",\n    ys_units: \"screen\",\n    fill_color: {\n      value: \"lightgrey\"\n    },\n    fill_alpha: {\n      value: 0.5\n    },\n    line_color: {\n      value: \"black\"\n    },\n    line_alpha: {\n      value: 1.0\n    },\n    line_width: {\n      value: 2\n    },\n    line_dash: {\n      value: [4, 4]\n    }\n  });\n};\n\nexport class LassoSelectTool extends SelectTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Lasso Select\";\n    this.icon = bk_tool_icon_lasso_select;\n    this.event_type = \"pan\";\n    this.default_order = 12;\n  }\n\n  static init_LassoSelectTool() {\n    this.prototype.default_view = LassoSelectToolView;\n    this.define({\n      select_every_mousemove: [p.Boolean, true],\n      overlay: [p.Instance, DEFAULT_POLY_OVERLAY]\n    });\n    this.register_alias(\"lasso_select\", () => new LassoSelectTool());\n  }\n\n}\nLassoSelectTool.__name__ = \"LassoSelectTool\";\nLassoSelectTool.init_LassoSelectTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/lasso_select_tool.js"],"names":["SelectTool","SelectToolView","PolyAnnotation","Keys","p","bk_tool_icon_lasso_select","LassoSelectToolView","initialize","data","connect_signals","connect","model","properties","active","change","_active_change","_clear_overlay","_keyup","ev","keyCode","Enter","_pan_start","sx","sy","_pan","_sx","_sy","plot_view","frame","bbox","clip","push","overlay","update","xs","ys","select_every_mousemove","append","shiftKey","_do_select","_pan_end","push_state","selection","get_selection","final","geometry","type","_select","__name__","DEFAULT_POLY_OVERLAY","level","xs_units","ys_units","fill_color","value","fill_alpha","line_color","line_alpha","line_width","line_dash","LassoSelectTool","constructor","attrs","tool_name","icon","event_type","default_order","init_LassoSelectTool","prototype","default_view","define","Boolean","Instance","register_alias"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,eAA3C;AACA,SAASC,cAAT,QAA+B,mCAA/B;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,0BAAnB;AACA,SAASC,yBAAT,QAA0C,uBAA1C;AACA,OAAO,MAAMC,mBAAN,SAAkCL,cAAlC,CAAiD;AACpDM,EAAAA,UAAU,GAAG;AACT,UAAMA,UAAN;AACA,SAAKC,IAAL,GAAY,IAAZ;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,UAAMA,eAAN;AACA,SAAKC,OAAL,CAAa,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,MAAtB,CAA6BC,MAA1C,EAAkD,MAAM,KAAKC,cAAL,EAAxD;AACH;;AACDA,EAAAA,cAAc,GAAG;AACb,QAAI,CAAC,KAAKJ,KAAL,CAAWE,MAAhB,EACI,KAAKG,cAAL;AACP;;AACDC,EAAAA,MAAM,CAACC,EAAD,EAAK;AACP,QAAIA,EAAE,CAACC,OAAH,IAAchB,IAAI,CAACiB,KAAvB,EACI,KAAKJ,cAAL;AACP;;AACDK,EAAAA,UAAU,CAACH,EAAD,EAAK;AACX,UAAM;AAAEI,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAaL,EAAnB;AACA,SAAKV,IAAL,GAAY;AAAEc,MAAAA,EAAE,EAAE,CAACA,EAAD,CAAN;AAAYC,MAAAA,EAAE,EAAE,CAACA,EAAD;AAAhB,KAAZ;AACH;;AACDC,EAAAA,IAAI,CAACN,EAAD,EAAK;AACL,UAAM;AAAEI,MAAAA,EAAE,EAAEG,GAAN;AAAWF,MAAAA,EAAE,EAAEG;AAAf,QAAuBR,EAA7B;AACA,UAAM,CAACI,EAAD,EAAKC,EAAL,IAAW,KAAKI,SAAL,CAAeC,KAAf,CAAqBC,IAArB,CAA0BC,IAA1B,CAA+BL,GAA/B,EAAoCC,GAApC,CAAjB;AACA,SAAKlB,IAAL,CAAUc,EAAV,CAAaS,IAAb,CAAkBT,EAAlB;AACA,SAAKd,IAAL,CAAUe,EAAV,CAAaQ,IAAb,CAAkBR,EAAlB;AACA,UAAMS,OAAO,GAAG,KAAKrB,KAAL,CAAWqB,OAA3B;AACAA,IAAAA,OAAO,CAACC,MAAR,CAAe;AAAEC,MAAAA,EAAE,EAAE,KAAK1B,IAAL,CAAUc,EAAhB;AAAoBa,MAAAA,EAAE,EAAE,KAAK3B,IAAL,CAAUe;AAAlC,KAAf;;AACA,QAAI,KAAKZ,KAAL,CAAWyB,sBAAf,EAAuC;AACnC,YAAMC,MAAM,GAAGnB,EAAE,CAACoB,QAAlB;;AACA,WAAKC,UAAL,CAAgB,KAAK/B,IAAL,CAAUc,EAA1B,EAA8B,KAAKd,IAAL,CAAUe,EAAxC,EAA4C,KAA5C,EAAmDc,MAAnD;AACH;AACJ;;AACDG,EAAAA,QAAQ,CAACtB,EAAD,EAAK;AACT,SAAKF,cAAL;;AACA,UAAMqB,MAAM,GAAGnB,EAAE,CAACoB,QAAlB;;AACA,SAAKC,UAAL,CAAgB,KAAK/B,IAAL,CAAUc,EAA1B,EAA8B,KAAKd,IAAL,CAAUe,EAAxC,EAA4C,IAA5C,EAAkDc,MAAlD;;AACA,SAAKV,SAAL,CAAec,UAAf,CAA0B,cAA1B,EAA0C;AAAEC,MAAAA,SAAS,EAAE,KAAKf,SAAL,CAAegB,aAAf;AAAb,KAA1C;AACH;;AACD3B,EAAAA,cAAc,GAAG;AACb,SAAKL,KAAL,CAAWqB,OAAX,CAAmBC,MAAnB,CAA0B;AAAEC,MAAAA,EAAE,EAAE,EAAN;AAAUC,MAAAA,EAAE,EAAE;AAAd,KAA1B;AACH;;AACDI,EAAAA,UAAU,CAACjB,EAAD,EAAKC,EAAL,EAASqB,KAAT,EAAgBP,MAAhB,EAAwB;AAC9B,UAAMQ,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,MAAR;AAAgBxB,MAAAA,EAAhB;AAAoBC,MAAAA;AAApB,KAAjB;;AACA,SAAKwB,OAAL,CAAaF,QAAb,EAAuBD,KAAvB,EAA8BP,MAA9B;AACH;;AA7CmD;AA+CxD/B,mBAAmB,CAAC0C,QAApB,GAA+B,qBAA/B;;AACA,MAAMC,oBAAoB,GAAG,MAAM;AAC/B,SAAO,IAAI/C,cAAJ,CAAmB;AACtBgD,IAAAA,KAAK,EAAE,SADe;AAEtBC,IAAAA,QAAQ,EAAE,QAFY;AAGtBC,IAAAA,QAAQ,EAAE,QAHY;AAItBC,IAAAA,UAAU,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJU;AAKtBC,IAAAA,UAAU,EAAE;AAAED,MAAAA,KAAK,EAAE;AAAT,KALU;AAMtBE,IAAAA,UAAU,EAAE;AAAEF,MAAAA,KAAK,EAAE;AAAT,KANU;AAOtBG,IAAAA,UAAU,EAAE;AAAEH,MAAAA,KAAK,EAAE;AAAT,KAPU;AAQtBI,IAAAA,UAAU,EAAE;AAAEJ,MAAAA,KAAK,EAAE;AAAT,KARU;AAStBK,IAAAA,SAAS,EAAE;AAAEL,MAAAA,KAAK,EAAE,CAAC,CAAD,EAAI,CAAJ;AAAT;AATW,GAAnB,CAAP;AAWH,CAZD;;AAaA,OAAO,MAAMM,eAAN,SAA8B5D,UAA9B,CAAyC;AAC5C6D,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,SAAL,GAAiB,cAAjB;AACA,SAAKC,IAAL,GAAY3D,yBAAZ;AACA,SAAK4D,UAAL,GAAkB,KAAlB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACH;;AACD,SAAOC,oBAAP,GAA8B;AAC1B,SAAKC,SAAL,CAAeC,YAAf,GAA8B/D,mBAA9B;AACA,SAAKgE,MAAL,CAAY;AACRlC,MAAAA,sBAAsB,EAAE,CAAChC,CAAC,CAACmE,OAAH,EAAY,IAAZ,CADhB;AAERvC,MAAAA,OAAO,EAAE,CAAC5B,CAAC,CAACoE,QAAH,EAAavB,oBAAb;AAFD,KAAZ;AAIA,SAAKwB,cAAL,CAAoB,cAApB,EAAoC,MAAM,IAAIb,eAAJ,EAA1C;AACH;;AAf2C;AAiBhDA,eAAe,CAACZ,QAAhB,GAA2B,iBAA3B;AACAY,eAAe,CAACO,oBAAhB","sourcesContent":["import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { PolyAnnotation } from \"../../annotations/poly_annotation\";\nimport { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_lasso_select } from \"../../../styles/icons\";\nexport class LassoSelectToolView extends SelectToolView {\n    initialize() {\n        super.initialize();\n        this.data = null;\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.active.change, () => this._active_change());\n    }\n    _active_change() {\n        if (!this.model.active)\n            this._clear_overlay();\n    }\n    _keyup(ev) {\n        if (ev.keyCode == Keys.Enter)\n            this._clear_overlay();\n    }\n    _pan_start(ev) {\n        const { sx, sy } = ev;\n        this.data = { sx: [sx], sy: [sy] };\n    }\n    _pan(ev) {\n        const { sx: _sx, sy: _sy } = ev;\n        const [sx, sy] = this.plot_view.frame.bbox.clip(_sx, _sy);\n        this.data.sx.push(sx);\n        this.data.sy.push(sy);\n        const overlay = this.model.overlay;\n        overlay.update({ xs: this.data.sx, ys: this.data.sy });\n        if (this.model.select_every_mousemove) {\n            const append = ev.shiftKey;\n            this._do_select(this.data.sx, this.data.sy, false, append);\n        }\n    }\n    _pan_end(ev) {\n        this._clear_overlay();\n        const append = ev.shiftKey;\n        this._do_select(this.data.sx, this.data.sy, true, append);\n        this.plot_view.push_state('lasso_select', { selection: this.plot_view.get_selection() });\n    }\n    _clear_overlay() {\n        this.model.overlay.update({ xs: [], ys: [] });\n    }\n    _do_select(sx, sy, final, append) {\n        const geometry = { type: 'poly', sx, sy };\n        this._select(geometry, final, append);\n    }\n}\nLassoSelectToolView.__name__ = \"LassoSelectToolView\";\nconst DEFAULT_POLY_OVERLAY = () => {\n    return new PolyAnnotation({\n        level: \"overlay\",\n        xs_units: \"screen\",\n        ys_units: \"screen\",\n        fill_color: { value: \"lightgrey\" },\n        fill_alpha: { value: 0.5 },\n        line_color: { value: \"black\" },\n        line_alpha: { value: 1.0 },\n        line_width: { value: 2 },\n        line_dash: { value: [4, 4] },\n    });\n};\nexport class LassoSelectTool extends SelectTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Lasso Select\";\n        this.icon = bk_tool_icon_lasso_select;\n        this.event_type = \"pan\";\n        this.default_order = 12;\n    }\n    static init_LassoSelectTool() {\n        this.prototype.default_view = LassoSelectToolView;\n        this.define({\n            select_every_mousemove: [p.Boolean, true],\n            overlay: [p.Instance, DEFAULT_POLY_OVERLAY],\n        });\n        this.register_alias(\"lasso_select\", () => new LassoSelectTool());\n    }\n}\nLassoSelectTool.__name__ = \"LassoSelectTool\";\nLassoSelectTool.init_LassoSelectTool();\n//# sourceMappingURL=lasso_select_tool.js.map"]},"metadata":{},"sourceType":"module"}