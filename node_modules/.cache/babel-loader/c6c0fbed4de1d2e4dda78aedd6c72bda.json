{"ast":null,"code":"\"use strict\";\n/***\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\n/***\n * An event object for passing data to event handlers and letting them control propagation.\n * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n * @class EventData\n * @constructor\n */\n\nfunction EventData() {\n  var isPropagationStopped = false;\n  var isImmediatePropagationStopped = false;\n  /***\n   * Stops event from propagating up the DOM tree.\n   * @method stopPropagation\n   */\n\n  this.stopPropagation = function () {\n    isPropagationStopped = true;\n  };\n  /***\n   * Returns whether stopPropagation was called on this event object.\n   * @method isPropagationStopped\n   * @return {Boolean}\n   */\n\n\n  this.isPropagationStopped = function () {\n    return isPropagationStopped;\n  };\n  /***\n   * Prevents the rest of the handlers from being executed.\n   * @method stopImmediatePropagation\n   */\n\n\n  this.stopImmediatePropagation = function () {\n    isImmediatePropagationStopped = true;\n  };\n  /***\n   * Returns whether stopImmediatePropagation was called on this event object.\\\n   * @method isImmediatePropagationStopped\n   * @return {Boolean}\n   */\n\n\n  this.isImmediatePropagationStopped = function () {\n    return isImmediatePropagationStopped;\n  };\n}\n/***\n * A simple publisher-subscriber implementation.\n * @class Event\n * @constructor\n */\n\n\nfunction Event() {\n  var handlers = [];\n  /***\n   * Adds an event handler to be called when the event is fired.\n   * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n   * object the event was fired with.<p>\n   * @method subscribe\n   * @param fn {Function} Event handler.\n   */\n\n  this.subscribe = function (fn) {\n    handlers.push(fn);\n  };\n  /***\n   * Removes an event handler added with <code>subscribe(fn)</code>.\n   * @method unsubscribe\n   * @param fn {Function} Event handler to be removed.\n   */\n\n\n  this.unsubscribe = function (fn) {\n    for (var i = handlers.length - 1; i >= 0; i--) {\n      if (handlers[i] === fn) {\n        handlers.splice(i, 1);\n      }\n    }\n  };\n  /***\n   * Fires an event notifying all subscribers.\n   * @method notify\n   * @param args {Object} Additional data object to be passed to all handlers.\n   * @param e {EventData}\n   *      Optional.\n   *      An <code>EventData</code> object to be passed to all handlers.\n   *      For DOM events, an existing W3C/jQuery event object can be passed in.\n   * @param scope {Object}\n   *      Optional.\n   *      The scope (\"this\") within which the handler will be executed.\n   *      If not specified, the scope will be set to the <code>Event</code> instance.\n   */\n\n\n  this.notify = function (args, e, scope) {\n    e = e || new EventData();\n    scope = scope || this;\n    var returnValue;\n\n    for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n      returnValue = handlers[i].call(scope, e, args);\n    }\n\n    return returnValue;\n  };\n}\n\nfunction EventHandler() {\n  var handlers = [];\n\n  this.subscribe = function (event, handler) {\n    handlers.push({\n      event: event,\n      handler: handler\n    });\n    event.subscribe(handler);\n    return this; // allow chaining\n  };\n\n  this.unsubscribe = function (event, handler) {\n    var i = handlers.length;\n\n    while (i--) {\n      if (handlers[i].event === event && handlers[i].handler === handler) {\n        handlers.splice(i, 1);\n        event.unsubscribe(handler);\n        return;\n      }\n    }\n\n    return this; // allow chaining\n  };\n\n  this.unsubscribeAll = function () {\n    var i = handlers.length;\n\n    while (i--) {\n      handlers[i].event.unsubscribe(handlers[i].handler);\n    }\n\n    handlers = [];\n    return this; // allow chaining\n  };\n}\n/***\n * A structure containing a range of cells.\n * @class Range\n * @constructor\n * @param fromRow {Integer} Starting row.\n * @param fromCell {Integer} Starting cell.\n * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n */\n\n\nfunction Range(fromRow, fromCell, toRow, toCell) {\n  if (toRow === undefined && toCell === undefined) {\n    toRow = fromRow;\n    toCell = fromCell;\n  }\n  /***\n   * @property fromRow\n   * @type {Integer}\n   */\n\n\n  this.fromRow = Math.min(fromRow, toRow);\n  /***\n   * @property fromCell\n   * @type {Integer}\n   */\n\n  this.fromCell = Math.min(fromCell, toCell);\n  /***\n   * @property toRow\n   * @type {Integer}\n   */\n\n  this.toRow = Math.max(fromRow, toRow);\n  /***\n   * @property toCell\n   * @type {Integer}\n   */\n\n  this.toCell = Math.max(fromCell, toCell);\n  /***\n   * Returns whether a range represents a single row.\n   * @method isSingleRow\n   * @return {Boolean}\n   */\n\n  this.isSingleRow = function () {\n    return this.fromRow == this.toRow;\n  };\n  /***\n   * Returns whether a range represents a single cell.\n   * @method isSingleCell\n   * @return {Boolean}\n   */\n\n\n  this.isSingleCell = function () {\n    return this.fromRow == this.toRow && this.fromCell == this.toCell;\n  };\n  /***\n   * Returns whether a range contains a given cell.\n   * @method contains\n   * @param row {Integer}\n   * @param cell {Integer}\n   * @return {Boolean}\n   */\n\n\n  this.contains = function (row, cell) {\n    return row >= this.fromRow && row <= this.toRow && cell >= this.fromCell && cell <= this.toCell;\n  };\n  /***\n   * Returns a readable representation of a range.\n   * @method toString\n   * @return {String}\n   */\n\n\n  this.toString = function () {\n    if (this.isSingleCell()) {\n      return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n    } else {\n      return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n    }\n  };\n}\n/***\n * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n * @class NonDataItem\n * @constructor\n */\n\n\nfunction NonDataItem() {\n  this.__nonDataRow = true;\n}\n/***\n * Information about a group of rows.\n * @class Group\n * @extends Slick.NonDataItem\n * @constructor\n */\n\n\nfunction Group() {\n  this.__group = true;\n  /**\n   * Grouping level, starting with 0.\n   * @property level\n   * @type {Number}\n   */\n\n  this.level = 0;\n  /***\n   * Number of rows in the group.\n   * @property count\n   * @type {Integer}\n   */\n\n  this.count = 0;\n  /***\n   * Grouping value.\n   * @property value\n   * @type {Object}\n   */\n\n  this.value = null;\n  /***\n   * Formatted display value of the group.\n   * @property title\n   * @type {String}\n   */\n\n  this.title = null;\n  /***\n   * Whether a group is collapsed.\n   * @property collapsed\n   * @type {Boolean}\n   */\n\n  this.collapsed = false;\n  /***\n   * Whether a group selection checkbox is checked.\n   * @property selectChecked\n   * @type {Boolean}\n   */\n\n  this.selectChecked = false;\n  /***\n   * GroupTotals, if any.\n   * @property totals\n   * @type {GroupTotals}\n   */\n\n  this.totals = null;\n  /**\n   * Rows that are part of the group.\n   * @property rows\n   * @type {Array}\n   */\n\n  this.rows = [];\n  /**\n   * Sub-groups that are part of the group.\n   * @property groups\n   * @type {Array}\n   */\n\n  this.groups = null;\n  /**\n   * A unique key used to identify the group.  This key can be used in calls to DataView\n   * collapseGroup() or expandGroup().\n   * @property groupingKey\n   * @type {Object}\n   */\n\n  this.groupingKey = null;\n}\n\nGroup.prototype = new NonDataItem();\n/***\n * Compares two Group instances.\n * @method equals\n * @return {Boolean}\n * @param group {Group} Group instance to compare to.\n */\n\nGroup.prototype.equals = function (group) {\n  return this.value === group.value && this.count === group.count && this.collapsed === group.collapsed && this.title === group.title;\n};\n/***\n * Information about group totals.\n * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n * formatters during the display.\n * @class GroupTotals\n * @extends Slick.NonDataItem\n * @constructor\n */\n\n\nfunction GroupTotals() {\n  this.__groupTotals = true;\n  /***\n   * Parent Group.\n   * @param group\n   * @type {Group}\n   */\n\n  this.group = null;\n  /***\n   * Whether the totals have been fully initialized / calculated.\n   * Will be set to false for lazy-calculated group totals.\n   * @param initialized\n   * @type {Boolean}\n   */\n\n  this.initialized = false;\n}\n\nGroupTotals.prototype = new NonDataItem();\n/***\n * A locking helper to track the active edit controller and ensure that only a single controller\n * can be active at a time.  This prevents a whole class of state and validation synchronization\n * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n * and attempt a commit or cancel before proceeding.\n * @class EditorLock\n * @constructor\n */\n\nfunction EditorLock() {\n  var activeEditController = null;\n  /***\n   * Returns true if a specified edit controller is active (has the edit lock).\n   * If the parameter is not specified, returns true if any edit controller is active.\n   * @method isActive\n   * @param editController {EditController}\n   * @return {Boolean}\n   */\n\n  this.isActive = function (editController) {\n    return editController ? activeEditController === editController : activeEditController !== null;\n  };\n  /***\n   * Sets the specified edit controller as the active edit controller (acquire edit lock).\n   * If another edit controller is already active, and exception will be throw new Error(.\n   * @method activate\n   * @param editController {EditController} edit controller acquiring the lock\n   */\n\n\n  this.activate = function (editController) {\n    if (editController === activeEditController) {\n      // already activated?\n      return;\n    }\n\n    if (activeEditController !== null) {\n      throw new Error(\"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\");\n    }\n\n    if (!editController.commitCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\");\n    }\n\n    if (!editController.cancelCurrentEdit) {\n      throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\");\n    }\n\n    activeEditController = editController;\n  };\n  /***\n   * Unsets the specified edit controller as the active edit controller (release edit lock).\n   * If the specified edit controller is not the active one, an exception will be throw new Error(.\n   * @method deactivate\n   * @param editController {EditController} edit controller releasing the lock\n   */\n\n\n  this.deactivate = function (editController) {\n    if (activeEditController !== editController) {\n      throw new Error(\"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\");\n    }\n\n    activeEditController = null;\n  };\n  /***\n   * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n   * controller and returns whether the commit attempt was successful (commit may fail due to validation\n   * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n   * and false otherwise.  If no edit controller is active, returns true.\n   * @method commitCurrentEdit\n   * @return {Boolean}\n   */\n\n\n  this.commitCurrentEdit = function () {\n    return activeEditController ? activeEditController.commitCurrentEdit() : true;\n  };\n  /***\n   * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n   * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n   * active, returns true.\n   * @method cancelCurrentEdit\n   * @return {Boolean}\n   */\n\n\n  this.cancelCurrentEdit = function cancelCurrentEdit() {\n    return activeEditController ? activeEditController.cancelCurrentEdit() : true;\n  };\n}\n\nmodule.exports = {\n  \"Event\": Event,\n  \"EventData\": EventData,\n  \"EventHandler\": EventHandler,\n  \"Range\": Range,\n  \"NonDataRow\": NonDataItem,\n  \"Group\": Group,\n  \"GroupTotals\": GroupTotals,\n  \"EditorLock\": EditorLock,\n\n  /***\n   * A global singleton editor lock.\n   * @class GlobalEditorLock\n   * @static\n   * @constructor\n   */\n  \"GlobalEditorLock\": new EditorLock(),\n  \"keyCode\": {\n    BACKSPACE: 8,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    ESC: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    RIGHT: 39,\n    TAB: 9,\n    UP: 38,\n    C: 67,\n    V: 86\n  },\n  \"preClickClassName\": \"slick-edit-preclick\"\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/slickgrid/slick.core.js"],"names":["EventData","isPropagationStopped","isImmediatePropagationStopped","stopPropagation","stopImmediatePropagation","Event","handlers","subscribe","fn","push","unsubscribe","i","length","splice","notify","args","e","scope","returnValue","call","EventHandler","event","handler","unsubscribeAll","Range","fromRow","fromCell","toRow","toCell","undefined","Math","min","max","isSingleRow","isSingleCell","contains","row","cell","toString","NonDataItem","__nonDataRow","Group","__group","level","count","value","title","collapsed","selectChecked","totals","rows","groups","groupingKey","prototype","equals","group","GroupTotals","__groupTotals","initialized","EditorLock","activeEditController","isActive","editController","activate","Error","commitCurrentEdit","cancelCurrentEdit","deactivate","module","exports","BACKSPACE","DELETE","DOWN","END","ENTER","ESCAPE","ESC","HOME","INSERT","LEFT","PAGE_DOWN","PAGE_UP","RIGHT","TAB","UP","C","V"],"mappings":"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","sourcesContent":["    \"use strict\";\n\n/***\n * Contains core SlickGrid classes.\n * @module Core\n * @namespace Slick\n */\n\n  /***\n   * An event object for passing data to event handlers and letting them control propagation.\n   * <p>This is pretty much identical to how W3C and jQuery implement events.</p>\n   * @class EventData\n   * @constructor\n   */\n  function EventData() {\n    var isPropagationStopped = false;\n    var isImmediatePropagationStopped = false;\n\n    /***\n     * Stops event from propagating up the DOM tree.\n     * @method stopPropagation\n     */\n    this.stopPropagation = function () {\n      isPropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopPropagation was called on this event object.\n     * @method isPropagationStopped\n     * @return {Boolean}\n     */\n    this.isPropagationStopped = function () {\n      return isPropagationStopped;\n    };\n\n    /***\n     * Prevents the rest of the handlers from being executed.\n     * @method stopImmediatePropagation\n     */\n    this.stopImmediatePropagation = function () {\n      isImmediatePropagationStopped = true;\n    };\n\n    /***\n     * Returns whether stopImmediatePropagation was called on this event object.\\\n     * @method isImmediatePropagationStopped\n     * @return {Boolean}\n     */\n    this.isImmediatePropagationStopped = function () {\n      return isImmediatePropagationStopped;\n    };\n  }\n\n  /***\n   * A simple publisher-subscriber implementation.\n   * @class Event\n   * @constructor\n   */\n  function Event() {\n    var handlers = [];\n\n    /***\n     * Adds an event handler to be called when the event is fired.\n     * <p>Event handler will receive two arguments - an <code>EventData</code> and the <code>data</code>\n     * object the event was fired with.<p>\n     * @method subscribe\n     * @param fn {Function} Event handler.\n     */\n    this.subscribe = function (fn) {\n      handlers.push(fn);\n    };\n\n    /***\n     * Removes an event handler added with <code>subscribe(fn)</code>.\n     * @method unsubscribe\n     * @param fn {Function} Event handler to be removed.\n     */\n    this.unsubscribe = function (fn) {\n      for (var i = handlers.length - 1; i >= 0; i--) {\n        if (handlers[i] === fn) {\n          handlers.splice(i, 1);\n        }\n      }\n    };\n\n    /***\n     * Fires an event notifying all subscribers.\n     * @method notify\n     * @param args {Object} Additional data object to be passed to all handlers.\n     * @param e {EventData}\n     *      Optional.\n     *      An <code>EventData</code> object to be passed to all handlers.\n     *      For DOM events, an existing W3C/jQuery event object can be passed in.\n     * @param scope {Object}\n     *      Optional.\n     *      The scope (\"this\") within which the handler will be executed.\n     *      If not specified, the scope will be set to the <code>Event</code> instance.\n     */\n    this.notify = function (args, e, scope) {\n      e = e || new EventData();\n      scope = scope || this;\n\n      var returnValue;\n      for (var i = 0; i < handlers.length && !(e.isPropagationStopped() || e.isImmediatePropagationStopped()); i++) {\n        returnValue = handlers[i].call(scope, e, args);\n      }\n\n      return returnValue;\n    };\n  }\n\n  function EventHandler() {\n    var handlers = [];\n\n    this.subscribe = function (event, handler) {\n      handlers.push({\n        event: event,\n        handler: handler\n      });\n      event.subscribe(handler);\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribe = function (event, handler) {\n      var i = handlers.length;\n      while (i--) {\n        if (handlers[i].event === event &&\n            handlers[i].handler === handler) {\n          handlers.splice(i, 1);\n          event.unsubscribe(handler);\n          return;\n        }\n      }\n\n      return this;  // allow chaining\n    };\n\n    this.unsubscribeAll = function () {\n      var i = handlers.length;\n      while (i--) {\n        handlers[i].event.unsubscribe(handlers[i].handler);\n      }\n      handlers = [];\n\n      return this;  // allow chaining\n    };\n  }\n\n  /***\n   * A structure containing a range of cells.\n   * @class Range\n   * @constructor\n   * @param fromRow {Integer} Starting row.\n   * @param fromCell {Integer} Starting cell.\n   * @param toRow {Integer} Optional. Ending row. Defaults to <code>fromRow</code>.\n   * @param toCell {Integer} Optional. Ending cell. Defaults to <code>fromCell</code>.\n   */\n  function Range(fromRow, fromCell, toRow, toCell) {\n    if (toRow === undefined && toCell === undefined) {\n      toRow = fromRow;\n      toCell = fromCell;\n    }\n\n    /***\n     * @property fromRow\n     * @type {Integer}\n     */\n    this.fromRow = Math.min(fromRow, toRow);\n\n    /***\n     * @property fromCell\n     * @type {Integer}\n     */\n    this.fromCell = Math.min(fromCell, toCell);\n\n    /***\n     * @property toRow\n     * @type {Integer}\n     */\n    this.toRow = Math.max(fromRow, toRow);\n\n    /***\n     * @property toCell\n     * @type {Integer}\n     */\n    this.toCell = Math.max(fromCell, toCell);\n\n    /***\n     * Returns whether a range represents a single row.\n     * @method isSingleRow\n     * @return {Boolean}\n     */\n    this.isSingleRow = function () {\n      return this.fromRow == this.toRow;\n    };\n\n    /***\n     * Returns whether a range represents a single cell.\n     * @method isSingleCell\n     * @return {Boolean}\n     */\n    this.isSingleCell = function () {\n      return this.fromRow == this.toRow && this.fromCell == this.toCell;\n    };\n\n    /***\n     * Returns whether a range contains a given cell.\n     * @method contains\n     * @param row {Integer}\n     * @param cell {Integer}\n     * @return {Boolean}\n     */\n    this.contains = function (row, cell) {\n      return row >= this.fromRow && row <= this.toRow &&\n          cell >= this.fromCell && cell <= this.toCell;\n    };\n\n    /***\n     * Returns a readable representation of a range.\n     * @method toString\n     * @return {String}\n     */\n    this.toString = function () {\n      if (this.isSingleCell()) {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \")\";\n      }\n      else {\n        return \"(\" + this.fromRow + \":\" + this.fromCell + \" - \" + this.toRow + \":\" + this.toCell + \")\";\n      }\n    }\n  }\n\n\n  /***\n   * A base class that all special / non-data rows (like Group and GroupTotals) derive from.\n   * @class NonDataItem\n   * @constructor\n   */\n  function NonDataItem() {\n    this.__nonDataRow = true;\n  }\n\n\n  /***\n   * Information about a group of rows.\n   * @class Group\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function Group() {\n    this.__group = true;\n\n    /**\n     * Grouping level, starting with 0.\n     * @property level\n     * @type {Number}\n     */\n    this.level = 0;\n\n    /***\n     * Number of rows in the group.\n     * @property count\n     * @type {Integer}\n     */\n    this.count = 0;\n\n    /***\n     * Grouping value.\n     * @property value\n     * @type {Object}\n     */\n    this.value = null;\n\n    /***\n     * Formatted display value of the group.\n     * @property title\n     * @type {String}\n     */\n    this.title = null;\n\n    /***\n     * Whether a group is collapsed.\n     * @property collapsed\n     * @type {Boolean}\n     */\n    this.collapsed = false;\n\n    /***\n     * Whether a group selection checkbox is checked.\n     * @property selectChecked\n     * @type {Boolean}\n     */\n    this.selectChecked = false;\n\n    /***\n     * GroupTotals, if any.\n     * @property totals\n     * @type {GroupTotals}\n     */\n    this.totals = null;\n\n    /**\n     * Rows that are part of the group.\n     * @property rows\n     * @type {Array}\n     */\n    this.rows = [];\n\n    /**\n     * Sub-groups that are part of the group.\n     * @property groups\n     * @type {Array}\n     */\n    this.groups = null;\n\n    /**\n     * A unique key used to identify the group.  This key can be used in calls to DataView\n     * collapseGroup() or expandGroup().\n     * @property groupingKey\n     * @type {Object}\n     */\n    this.groupingKey = null;\n  }\n\n  Group.prototype = new NonDataItem();\n\n  /***\n   * Compares two Group instances.\n   * @method equals\n   * @return {Boolean}\n   * @param group {Group} Group instance to compare to.\n   */\n  Group.prototype.equals = function (group) {\n    return this.value === group.value &&\n        this.count === group.count &&\n        this.collapsed === group.collapsed &&\n        this.title === group.title;\n  };\n\n  /***\n   * Information about group totals.\n   * An instance of GroupTotals will be created for each totals row and passed to the aggregators\n   * so that they can store arbitrary data in it.  That data can later be accessed by group totals\n   * formatters during the display.\n   * @class GroupTotals\n   * @extends Slick.NonDataItem\n   * @constructor\n   */\n  function GroupTotals() {\n    this.__groupTotals = true;\n\n    /***\n     * Parent Group.\n     * @param group\n     * @type {Group}\n     */\n    this.group = null;\n\n    /***\n     * Whether the totals have been fully initialized / calculated.\n     * Will be set to false for lazy-calculated group totals.\n     * @param initialized\n     * @type {Boolean}\n     */\n    this.initialized = false;\n  }\n\n  GroupTotals.prototype = new NonDataItem();\n\n  /***\n   * A locking helper to track the active edit controller and ensure that only a single controller\n   * can be active at a time.  This prevents a whole class of state and validation synchronization\n   * issues.  An edit controller (such as SlickGrid) can query if an active edit is in progress\n   * and attempt a commit or cancel before proceeding.\n   * @class EditorLock\n   * @constructor\n   */\n  function EditorLock() {\n    var activeEditController = null;\n\n    /***\n     * Returns true if a specified edit controller is active (has the edit lock).\n     * If the parameter is not specified, returns true if any edit controller is active.\n     * @method isActive\n     * @param editController {EditController}\n     * @return {Boolean}\n     */\n    this.isActive = function (editController) {\n      return (editController ? activeEditController === editController : activeEditController !== null);\n    };\n\n    /***\n     * Sets the specified edit controller as the active edit controller (acquire edit lock).\n     * If another edit controller is already active, and exception will be throw new Error(.\n     * @method activate\n     * @param editController {EditController} edit controller acquiring the lock\n     */\n    this.activate = function (editController) {\n      if (editController === activeEditController) { // already activated?\n        return;\n      }\n      if (activeEditController !== null) {\n        throw new Error(\"SlickGrid.EditorLock.activate: an editController is still active, can't activate another editController\");\n      }\n      if (!editController.commitCurrentEdit) {\n        throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .commitCurrentEdit()\");\n      }\n      if (!editController.cancelCurrentEdit) {\n        throw new Error(\"SlickGrid.EditorLock.activate: editController must implement .cancelCurrentEdit()\");\n      }\n      activeEditController = editController;\n    };\n\n    /***\n     * Unsets the specified edit controller as the active edit controller (release edit lock).\n     * If the specified edit controller is not the active one, an exception will be throw new Error(.\n     * @method deactivate\n     * @param editController {EditController} edit controller releasing the lock\n     */\n    this.deactivate = function (editController) {\n      if (activeEditController !== editController) {\n        throw new Error(\"SlickGrid.EditorLock.deactivate: specified editController is not the currently active one\");\n      }\n      activeEditController = null;\n    };\n\n    /***\n     * Attempts to commit the current edit by calling \"commitCurrentEdit\" method on the active edit\n     * controller and returns whether the commit attempt was successful (commit may fail due to validation\n     * errors, etc.).  Edit controller's \"commitCurrentEdit\" must return true if the commit has succeeded\n     * and false otherwise.  If no edit controller is active, returns true.\n     * @method commitCurrentEdit\n     * @return {Boolean}\n     */\n    this.commitCurrentEdit = function () {\n      return (activeEditController ? activeEditController.commitCurrentEdit() : true);\n    };\n\n    /***\n     * Attempts to cancel the current edit by calling \"cancelCurrentEdit\" method on the active edit\n     * controller and returns whether the edit was successfully cancelled.  If no edit controller is\n     * active, returns true.\n     * @method cancelCurrentEdit\n     * @return {Boolean}\n     */\n    this.cancelCurrentEdit = function cancelCurrentEdit() {\n      return (activeEditController ? activeEditController.cancelCurrentEdit() : true);\n    };\n  }\n\n  module.exports = {\n    \"Event\": Event,\n    \"EventData\": EventData,\n    \"EventHandler\": EventHandler,\n    \"Range\": Range,\n    \"NonDataRow\": NonDataItem,\n    \"Group\": Group,\n    \"GroupTotals\": GroupTotals,\n    \"EditorLock\": EditorLock,\n\n    /***\n     * A global singleton editor lock.\n     * @class GlobalEditorLock\n     * @static\n     * @constructor\n     */\n    \"GlobalEditorLock\": new EditorLock(),\n\n    \"keyCode\": {\n      BACKSPACE: 8,\n      DELETE: 46,\n      DOWN: 40,\n      END: 35,\n      ENTER: 13,\n      ESCAPE: 27,\n      ESC: 27,\n      HOME: 36,\n      INSERT: 45,\n      LEFT: 37,\n      PAGE_DOWN: 34,\n      PAGE_UP: 33,\n      RIGHT: 39,\n      TAB: 9,\n      UP: 38,\n      C: 67,\n      V: 86\n    },\n    \"preClickClassName\" : \"slick-edit-preclick\"\n  }\n"]},"metadata":{},"sourceType":"script"}