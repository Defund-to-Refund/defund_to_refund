{"ast":null,"code":"import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { BoxAnnotation } from \"../../annotations/box_annotation\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_box_select } from \"../../../styles/icons\";\nexport class BoxSelectToolView extends SelectToolView {\n  _compute_limits(curpoint) {\n    const frame = this.plot_view.frame;\n    const dims = this.model.dimensions;\n    let base_point = this._base_point;\n\n    if (this.model.origin == \"center\") {\n      const [cx, cy] = base_point;\n      const [dx, dy] = curpoint;\n      base_point = [cx - (dx - cx), cy - (dy - cy)];\n    }\n\n    return this.model._get_dim_limits(base_point, curpoint, frame, dims);\n  }\n\n  _pan_start(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    this._base_point = [sx, sy];\n  }\n\n  _pan(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    const curpoint = [sx, sy];\n\n    const [sxlim, sylim] = this._compute_limits(curpoint);\n\n    this.model.overlay.update({\n      left: sxlim[0],\n      right: sxlim[1],\n      top: sylim[0],\n      bottom: sylim[1]\n    });\n\n    if (this.model.select_every_mousemove) {\n      const append = ev.shiftKey;\n\n      this._do_select(sxlim, sylim, false, append);\n    }\n  }\n\n  _pan_end(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    const curpoint = [sx, sy];\n\n    const [sxlim, sylim] = this._compute_limits(curpoint);\n\n    const append = ev.shiftKey;\n\n    this._do_select(sxlim, sylim, true, append);\n\n    this.model.overlay.update({\n      left: null,\n      right: null,\n      top: null,\n      bottom: null\n    });\n    this._base_point = null;\n    this.plot_view.push_state('box_select', {\n      selection: this.plot_view.get_selection()\n    });\n  }\n\n  _do_select([sx0, sx1], [sy0, sy1], final, append = false) {\n    const geometry = {\n      type: 'rect',\n      sx0,\n      sx1,\n      sy0,\n      sy1\n    };\n\n    this._select(geometry, final, append);\n  }\n\n}\nBoxSelectToolView.__name__ = \"BoxSelectToolView\";\n\nconst DEFAULT_BOX_OVERLAY = () => {\n  return new BoxAnnotation({\n    level: \"overlay\",\n    render_mode: \"css\",\n    top_units: \"screen\",\n    left_units: \"screen\",\n    bottom_units: \"screen\",\n    right_units: \"screen\",\n    fill_color: {\n      value: \"lightgrey\"\n    },\n    fill_alpha: {\n      value: 0.5\n    },\n    line_color: {\n      value: \"black\"\n    },\n    line_alpha: {\n      value: 1.0\n    },\n    line_width: {\n      value: 2\n    },\n    line_dash: {\n      value: [4, 4]\n    }\n  });\n};\n\nexport class BoxSelectTool extends SelectTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Box Select\";\n    this.icon = bk_tool_icon_box_select;\n    this.event_type = \"pan\";\n    this.default_order = 30;\n  }\n\n  static init_BoxSelectTool() {\n    this.prototype.default_view = BoxSelectToolView;\n    this.define({\n      dimensions: [p.Dimensions, \"both\"],\n      select_every_mousemove: [p.Boolean, false],\n      overlay: [p.Instance, DEFAULT_BOX_OVERLAY],\n      origin: [p.BoxOrigin, \"corner\"]\n    });\n    this.register_alias(\"box_select\", () => new BoxSelectTool());\n    this.register_alias(\"xbox_select\", () => new BoxSelectTool({\n      dimensions: 'width'\n    }));\n    this.register_alias(\"ybox_select\", () => new BoxSelectTool({\n      dimensions: 'height'\n    }));\n  }\n\n  get tooltip() {\n    return this._get_dim_tooltip(this.tool_name, this.dimensions);\n  }\n\n}\nBoxSelectTool.__name__ = \"BoxSelectTool\";\nBoxSelectTool.init_BoxSelectTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/box_select_tool.js"],"names":["SelectTool","SelectToolView","BoxAnnotation","p","bk_tool_icon_box_select","BoxSelectToolView","_compute_limits","curpoint","frame","plot_view","dims","model","dimensions","base_point","_base_point","origin","cx","cy","dx","dy","_get_dim_limits","_pan_start","ev","sx","sy","_pan","sxlim","sylim","overlay","update","left","right","top","bottom","select_every_mousemove","append","shiftKey","_do_select","_pan_end","push_state","selection","get_selection","sx0","sx1","sy0","sy1","final","geometry","type","_select","__name__","DEFAULT_BOX_OVERLAY","level","render_mode","top_units","left_units","bottom_units","right_units","fill_color","value","fill_alpha","line_color","line_alpha","line_width","line_dash","BoxSelectTool","constructor","attrs","tool_name","icon","event_type","default_order","init_BoxSelectTool","prototype","default_view","define","Dimensions","Boolean","Instance","BoxOrigin","register_alias","tooltip","_get_dim_tooltip"],"mappings":"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","sourcesContent":["import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { BoxAnnotation } from \"../../annotations/box_annotation\";\nimport * as p from \"../../../core/properties\";\nimport { bk_tool_icon_box_select } from \"../../../styles/icons\";\nexport class BoxSelectToolView extends SelectToolView {\n    _compute_limits(curpoint) {\n        const frame = this.plot_view.frame;\n        const dims = this.model.dimensions;\n        let base_point = this._base_point;\n        if (this.model.origin == \"center\") {\n            const [cx, cy] = base_point;\n            const [dx, dy] = curpoint;\n            base_point = [cx - (dx - cx), cy - (dy - cy)];\n        }\n        return this.model._get_dim_limits(base_point, curpoint, frame, dims);\n    }\n    _pan_start(ev) {\n        const { sx, sy } = ev;\n        this._base_point = [sx, sy];\n    }\n    _pan(ev) {\n        const { sx, sy } = ev;\n        const curpoint = [sx, sy];\n        const [sxlim, sylim] = this._compute_limits(curpoint);\n        this.model.overlay.update({ left: sxlim[0], right: sxlim[1], top: sylim[0], bottom: sylim[1] });\n        if (this.model.select_every_mousemove) {\n            const append = ev.shiftKey;\n            this._do_select(sxlim, sylim, false, append);\n        }\n    }\n    _pan_end(ev) {\n        const { sx, sy } = ev;\n        const curpoint = [sx, sy];\n        const [sxlim, sylim] = this._compute_limits(curpoint);\n        const append = ev.shiftKey;\n        this._do_select(sxlim, sylim, true, append);\n        this.model.overlay.update({ left: null, right: null, top: null, bottom: null });\n        this._base_point = null;\n        this.plot_view.push_state('box_select', { selection: this.plot_view.get_selection() });\n    }\n    _do_select([sx0, sx1], [sy0, sy1], final, append = false) {\n        const geometry = { type: 'rect', sx0, sx1, sy0, sy1 };\n        this._select(geometry, final, append);\n    }\n}\nBoxSelectToolView.__name__ = \"BoxSelectToolView\";\nconst DEFAULT_BOX_OVERLAY = () => {\n    return new BoxAnnotation({\n        level: \"overlay\",\n        render_mode: \"css\",\n        top_units: \"screen\",\n        left_units: \"screen\",\n        bottom_units: \"screen\",\n        right_units: \"screen\",\n        fill_color: { value: \"lightgrey\" },\n        fill_alpha: { value: 0.5 },\n        line_color: { value: \"black\" },\n        line_alpha: { value: 1.0 },\n        line_width: { value: 2 },\n        line_dash: { value: [4, 4] },\n    });\n};\nexport class BoxSelectTool extends SelectTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Box Select\";\n        this.icon = bk_tool_icon_box_select;\n        this.event_type = \"pan\";\n        this.default_order = 30;\n    }\n    static init_BoxSelectTool() {\n        this.prototype.default_view = BoxSelectToolView;\n        this.define({\n            dimensions: [p.Dimensions, \"both\"],\n            select_every_mousemove: [p.Boolean, false],\n            overlay: [p.Instance, DEFAULT_BOX_OVERLAY],\n            origin: [p.BoxOrigin, \"corner\"],\n        });\n        this.register_alias(\"box_select\", () => new BoxSelectTool());\n        this.register_alias(\"xbox_select\", () => new BoxSelectTool({ dimensions: 'width' }));\n        this.register_alias(\"ybox_select\", () => new BoxSelectTool({ dimensions: 'height' }));\n    }\n    get tooltip() {\n        return this._get_dim_tooltip(this.tool_name, this.dimensions);\n    }\n}\nBoxSelectTool.__name__ = \"BoxSelectTool\";\nBoxSelectTool.init_BoxSelectTool();\n//# sourceMappingURL=box_select_tool.js.map"]},"metadata":{},"sourceType":"module"}