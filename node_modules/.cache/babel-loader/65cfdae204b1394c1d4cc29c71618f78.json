{"ast":null,"code":"/* Do not edit, autogenerated by flexx.pyscript */\nvar _pyfunc_add = function (a, b) {\n  // nargs: 2\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return a.concat(b);\n  }\n\n  return a + b;\n};\n\nvar _pyfunc_all = function (x) {\n  // nargs: 1\n  for (var i = 0; i < x.length; i++) {\n    if (!_pyfunc_truthy(x[i])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nvar _pyfunc_contains = function contains(a, b) {\n  // nargs: 2\n  if (b == null) {} else if (Array.isArray(b)) {\n    for (var i = 0; i < b.length; i++) {\n      if (_pyfunc_equals(a, b[i])) return true;\n    }\n\n    return false;\n  } else if (b.constructor === Object) {\n    for (var k in b) {\n      if (a == k) return true;\n    }\n\n    return false;\n  } else if (b.constructor == String) {\n    return b.indexOf(a) >= 0;\n  }\n\n  var e = Error('Not a container: ' + b);\n  e.name = 'TypeError';\n  throw e;\n};\n\nvar _pyfunc_equals = function equals(a, b) {\n  // nargs: 2\n  if (a == null || b == null) {} else if (Array.isArray(a) && Array.isArray(b)) {\n    var i = 0,\n        iseq = a.length == b.length;\n\n    while (iseq && i < a.length) {\n      iseq = equals(a[i], b[i]);\n      i += 1;\n    }\n\n    return iseq;\n  } else if (a.constructor === Object && b.constructor === Object) {\n    var akeys = Object.keys(a),\n        bkeys = Object.keys(b);\n    akeys.sort();\n    bkeys.sort();\n    var i = 0,\n        k,\n        iseq = equals(akeys, bkeys);\n\n    while (iseq && i < akeys.length) {\n      k = akeys[i];\n      iseq = equals(a[k], b[k]);\n      i += 1;\n    }\n\n    return iseq;\n  }\n\n  return a == b;\n};\n\nvar _pyfunc_instantiate = function (ob, args) {\n  // nargs: 2\n  if (typeof ob === \"undefined\" || typeof window !== \"undefined\" && window === ob || typeof global !== \"undefined\" && global === ob) {\n    throw \"Class constructor is called as a function.\";\n  }\n\n  for (var name in ob) {\n    if (Object[name] === undefined && typeof ob[name] === 'function' && !ob[name].nobind) {\n      ob[name] = ob[name].bind(ob);\n    }\n  }\n\n  if (ob.__init__) {\n    ob.__init__.apply(ob, args);\n  }\n};\n\nvar _pyfunc_mult = function (a, b) {\n  // nargs: 2\n  if ((typeof a === 'number') + (typeof b === 'number') === 1) {\n    if (a.constructor === String) return _pymeth_repeat.call(a, b);\n    if (b.constructor === String) return _pymeth_repeat.call(b, a);\n\n    if (Array.isArray(b)) {\n      var t = a;\n      a = b;\n      b = t;\n    }\n\n    if (Array.isArray(a)) {\n      var res = [];\n\n      for (var i = 0; i < b; i++) res = res.concat(a);\n\n      return res;\n    }\n  }\n\n  return a * b;\n};\n\nvar _pyfunc_range = function (start, end, step) {\n  var i,\n      res = [];\n  var val = start;\n  var n = (end - start) / step;\n\n  for (i = 0; i < n; i++) {\n    res.push(val);\n    val += step;\n  }\n\n  return res;\n};\n\nvar _pyfunc_truthy = function (v) {\n  if (v === null || typeof v !== \"object\") {\n    return v;\n  } else if (v.length !== undefined) {\n    return v.length ? v : false;\n  } else if (v.byteLength !== undefined) {\n    return v.byteLength ? v : false;\n  } else if (v.constructor !== Object) {\n    return true;\n  } else {\n    return Object.getOwnPropertyNames(v).length ? v : false;\n  }\n};\n\nvar _pymeth_append = function (x) {\n  // nargs: 1\n  if (!Array.isArray(this)) return this.append.apply(this, arguments);\n  this.push(x);\n};\n\nvar _pymeth_get = function (key, d) {\n  // nargs: 1 2\n  if (this.constructor !== Object) return this.get.apply(this, arguments);\n\n  if (this[key] !== undefined) {\n    return this[key];\n  } else if (d !== undefined) {\n    return d;\n  } else {\n    return null;\n  }\n};\n\nvar _pymeth_keys = function () {\n  // nargs: 0\n  if (typeof this['keys'] === 'function') return this.keys.apply(this, arguments);\n  return Object.keys(this);\n};\n\nvar _pymeth_lstrip = function (chars) {\n  // nargs: 0 1\n  if (this.constructor !== String) return this.lstrip.apply(this, arguments);\n  chars = chars === undefined ? ' \\t\\r\\n' : chars;\n\n  for (var i = 0; i < this.length; i++) {\n    if (chars.indexOf(this[i]) < 0) return this.slice(i);\n  }\n\n  return '';\n};\n\nvar _pymeth_remove = function (x) {\n  // nargs: 1\n  if (!Array.isArray(this)) return this.remove.apply(this, arguments);\n\n  for (var i = 0; i < this.length; i++) {\n    if (_pyfunc_equals(this[i], x)) {\n      this.splice(i, 1);\n      return;\n    }\n  }\n\n  var e = Error(x);\n  e.name = 'ValueError';\n  throw e;\n};\n\nvar _pymeth_repeat = function (count) {\n  // nargs: 0\n  if (this.repeat) return this.repeat(count);\n  if (count < 1) return '';\n  var result = '',\n      pattern = this.valueOf();\n\n  while (count > 1) {\n    if (count & 1) result += pattern;\n    count >>= 1, pattern += pattern;\n  }\n\n  return result + pattern;\n};\n\nvar _pymeth_startswith = function (x) {\n  // nargs: 1\n  if (this.constructor !== String) return this.startswith.apply(this, arguments);\n  return this.indexOf(x) == 0;\n};\n\nvar Buffer, GlooObject, IndexBuffer, Program, Texture2D, Texture3DLike, VertexBuffer, __version__, check_error, console; // PyScript module for gloo2.js - lightweight object oriented GL.\n\n\n{\n  /* if this_is_js() */\n  console = window.console;\n}\n__version__ = \"0.3\";\n\ncheck_error = function (gl, when) {\n  var e, err, err_3, errors, msg, stub1_seq, stub2_itr;\n  when = when === undefined ? \"periodic check\" : when; // Check this from time to time to detect GL errors.\n  //\n  //     Parameters\n  //     ----------\n  //     when : str\n  //         Shown in the exception to help the developer determine when\n  //         this check was done.\n\n  errors = [];\n\n  while (true) {\n    err = gl.getError();\n\n    if (_pyfunc_equals(err, gl.NO_ERROR) || _pyfunc_truthy(errors) && _pyfunc_equals(err, errors[errors.length - 1])) {\n      break;\n    }\n\n    _pymeth_append.call(errors, err);\n  }\n\n  if (errors.length) {\n    msg = \"\";\n    stub1_seq = errors;\n\n    if (typeof stub1_seq === \"object\" && !Array.isArray(stub1_seq)) {\n      stub1_seq = Object.keys(stub1_seq);\n    }\n\n    for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {\n      e = stub1_seq[stub2_itr];\n      msg = _pyfunc_add(msg, e);\n    }\n\n    err_3 = new Error('RuntimeError:' + (\"OpenGL got errors (\" + when + \"): \" + msg + \"\"));\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  return null;\n};\n\nGlooObject = function () {\n  // Abstract base class for all Gloo classes.\n  _pyfunc_instantiate(this, arguments);\n};\n\nGlooObject.prototype._base_class = Object;\nGlooObject.prototype._class_name = \"GlooObject\";\n\nGlooObject.prototype.__init__ = function (gl) {\n  // Init by passing the webgl context object.\n  this._gl = gl;\n  this.handle = null;\n\n  this._create();\n\n  if (!(this.handle !== null)) {\n    throw \"AssertionError: \" + \"this.handle !== null\";\n  }\n\n  return null;\n};\n\nGlooObject.prototype._create = function () {\n  var err_2;\n  err_2 = new Error('NotImplementedError:' + \"\");\n  err_2.name = \"NotImplementedError\";\n  throw err_2;\n  return null;\n};\n\nProgram = function () {\n  // The program is the central component to connect gloo objects and shaders.\n  _pyfunc_instantiate(this, arguments);\n};\n\nProgram.prototype = Object.create(GlooObject.prototype);\nProgram.prototype._base_class = GlooObject.prototype;\nProgram.prototype._class_name = \"Program\";\nProgram.prototype.UTYPEMAP = {\n  \"float\": \"uniform1fv\",\n  \"vec2\": \"uniform2fv\",\n  \"vec3\": \"uniform3fv\",\n  \"vec4\": \"uniform4fv\",\n  \"int\": \"uniform1iv\",\n  \"ivec2\": \"uniform2iv\",\n  \"ivec3\": \"uniform3iv\",\n  \"ivec4\": \"uniform4iv\",\n  \"bool\": \"uniform1iv\",\n  \"bvec2\": \"uniform2iv\",\n  \"bvec3\": \"uniform3iv\",\n  \"bvec4\": \"uniform4iv\",\n  \"mat2\": \"uniformMatrix2fv\",\n  \"mat3\": \"uniformMatrix3fv\",\n  \"mat4\": \"uniformMatrix4fv\",\n  \"sampler1D\": \"uniform1i\",\n  \"sampler2D\": \"uniform1i\",\n  \"sampler3D\": \"uniform1i\"\n};\nProgram.prototype.ATYPEMAP = {\n  \"float\": \"vertexAttrib1f\",\n  \"vec2\": \"vertexAttrib2f\",\n  \"vec3\": \"vertexAttrib3f\",\n  \"vec4\": \"vertexAttrib4f\"\n};\nProgram.prototype.ATYPEINFO = {\n  \"float\": [1, 5126],\n  \"vec2\": [2, 5126],\n  \"vec3\": [3, 5126],\n  \"vec4\": [4, 5126]\n};\n\nProgram.prototype._create = function () {\n  this.handle = this._gl.createProgram();\n  this.locations = {};\n  this._unset_variables = [];\n  this._validated = false;\n  this._samplers = {};\n  this._attributes = {};\n  this._known_invalid = [];\n  return null;\n};\n\nProgram.prototype.delete = function () {\n  // Delete the program.\n  this._gl.deleteProgram(this.handle);\n\n  return null;\n};\n\nProgram.prototype.activate = function () {\n  // Activate the program.\n  this._gl.useProgram(this.handle);\n\n  return null;\n};\n\nProgram.prototype.deactivate = function () {\n  // Disable the program.\n  this._gl.useProgram(0);\n\n  return null;\n};\n\nProgram.prototype.set_shaders = function (vert, frag) {\n  var code, err_3, err_4, errors, frag_handle, gl, handle, i, status, stub3_, tmp, type_, vert_handle; // Set GLSL code for the vertex and fragment shader.\n  //\n  // This function takes care of setting the shading code and\n  // compiling+linking it into a working program object that is ready\n  // to use.\n  //\n  // Parameters\n  // ----------\n  // vert : str\n  //     GLSL code for the vertex shader.\n  // frag : str\n  //     GLSL code for the fragment shader.\n\n  gl = this._gl;\n  this._linked = false;\n  vert_handle = gl.createShader(gl.VERTEX_SHADER);\n  frag_handle = gl.createShader(gl.FRAGMENT_SHADER);\n  tmp = [[vert, vert_handle, \"vertex\"], [frag, frag_handle, \"fragment\"]];\n\n  for (i = 0; i < 2; i += 1) {\n    stub3_ = tmp[i];\n    code = stub3_[0];\n    handle = stub3_[1];\n    type_ = stub3_[2];\n    gl.shaderSource(handle, code);\n    gl.compileShader(handle);\n    status = gl.getShaderParameter(handle, gl.COMPILE_STATUS);\n\n    if (!_pyfunc_truthy(status)) {\n      errors = gl.getShaderInfoLog(handle);\n      err_4 = new Error('RuntimeError:' + _pyfunc_add(\"errors in \" + type_ + \" shader:\\n\", errors));\n      err_4.name = \"RuntimeError\";\n      throw err_4;\n    }\n  }\n\n  gl.attachShader(this.handle, vert_handle);\n  gl.attachShader(this.handle, frag_handle);\n  gl.linkProgram(this.handle);\n\n  if (!_pyfunc_truthy(gl.getProgramParameter(this.handle, gl.LINK_STATUS))) {\n    err_3 = new Error('RuntimeError:' + (\"Program link error:\\n\" + gl.getProgramInfoLog(this.handle)));\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  this._unset_variables = this._get_active_attributes_and_uniforms();\n  gl.detachShader(this.handle, vert_handle);\n  gl.detachShader(this.handle, frag_handle);\n  gl.deleteShader(vert_handle);\n  gl.deleteShader(frag_handle);\n  this._known_invalid = [];\n  this._linked = true;\n  return null;\n};\n\nProgram.prototype._get_active_attributes_and_uniforms = function () {\n  var attributes, ca, container, count, cu, getActive, getLocation, gl, i, info, j, m, name, regex, stub4_, stub5_seq, stub6_itr, uniforms, x; // Retrieve active attributes and uniforms to be able to check that\n  // all uniforms/attributes are set by the user.\n\n  gl = this._gl;\n  this.locations = {};\n  regex = new window.RegExp(\"(\\\\w+)\\\\s*(\\\\[(\\\\d+)\\\\])\\\\s*\");\n  cu = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n  ca = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n  attributes = [];\n  uniforms = [];\n  stub5_seq = [[attributes, ca, gl.getActiveAttrib, gl.getAttribLocation], [uniforms, cu, gl.getActiveUniform, gl.getUniformLocation]];\n\n  if (typeof stub5_seq === \"object\" && !Array.isArray(stub5_seq)) {\n    stub5_seq = Object.keys(stub5_seq);\n  }\n\n  for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {\n    x = stub5_seq[stub6_itr];\n    stub4_ = x;\n    container = stub4_[0];\n    count = stub4_[1];\n    getActive = stub4_[2];\n    getLocation = stub4_[3];\n\n    for (i = 0; i < count; i += 1) {\n      info = getActive.call(gl, this.handle, i);\n      name = info.name;\n      m = name.match(regex);\n\n      if (_pyfunc_truthy(m)) {\n        name = m[1];\n\n        for (j = 0; j < info.size; j += 1) {\n          _pymeth_append.call(container, [\"\" + name + \"[\" + j + \"]\", info.type]);\n        }\n      } else {\n        _pymeth_append.call(container, [name, info.type]);\n      }\n\n      this.locations[name] = getLocation.call(gl, this.handle, name);\n    }\n  }\n\n  return _pyfunc_add(function list_comprehenson() {\n    var res = [];\n    var v, iter0, i0;\n    iter0 = attributes;\n\n    if (typeof iter0 === \"object\" && !Array.isArray(iter0)) {\n      iter0 = Object.keys(iter0);\n    }\n\n    for (i0 = 0; i0 < iter0.length; i0++) {\n      v = iter0[i0];\n      {\n        res.push(v[0]);\n      }\n    }\n\n    return res;\n  }.apply(this), function list_comprehenson() {\n    var res = [];\n    var v, iter0, i0;\n    iter0 = uniforms;\n\n    if (typeof iter0 === \"object\" && !Array.isArray(iter0)) {\n      iter0 = Object.keys(iter0);\n    }\n\n    for (i0 = 0; i0 < iter0.length; i0++) {\n      v = iter0[i0];\n      {\n        res.push(v[0]);\n      }\n    }\n\n    return res;\n  }.apply(this));\n};\n\nProgram.prototype.set_texture = function (name, value) {\n  var err_3, handle, unit; // Set a texture sampler.\n  //\n  // A texture is a 2 dimensional grid of colors/intensities that\n  // can be applied to a face (or used for other means by providing\n  // a regular grid of data).\n  //\n  // Parameters\n  // ----------\n  // name : str\n  //     The name by which the texture is known in the GLSL code.\n  // value : Texture2D\n  //     The gloo Texture2D object to bind.\n\n  if (!_pyfunc_truthy(this._linked)) {\n    err_3 = new Error('RuntimeError:' + \"Cannot set uniform when program has no code\");\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  handle = _pymeth_get.call(this.locations, name, -1);\n\n  if (_pyfunc_truthy(handle < 0)) {\n    if (!_pyfunc_contains(name, this._known_invalid)) {\n      _pymeth_append.call(this._known_invalid, name);\n\n      console.log(\"Variable \" + name + \" is not an active texture\");\n    }\n\n    return null;\n  }\n\n  if (_pyfunc_contains(name, this._unset_variables)) {\n    _pymeth_remove.call(this._unset_variables, name);\n  }\n\n  this.activate();\n\n  if (true) {\n    unit = _pymeth_keys.call(this._samplers).length;\n\n    if (_pyfunc_contains(name, this._samplers)) {\n      unit = this._samplers[name][this._samplers[name].length - 1];\n    }\n\n    this._samplers[name] = [value._target, value.handle, unit];\n\n    this._gl.uniform1i(handle, unit);\n  }\n\n  return null;\n};\n\nProgram.prototype.set_uniform = function (name, type_, value) {\n  var a_type, count, err_3, funcname, handle, j, name_; // Set a uniform value.\n  //\n  // A uniform is a value that is global to both the vertex and\n  // fragment shader.\n  //\n  // Parameters\n  // ----------\n  // name : str\n  //     The name by which the uniform is known in the GLSL code.\n  // type_ : str\n  //     The type of the uniform, e.g. 'float', 'vec2', etc.\n  // value : list of scalars\n  //     The value for the uniform. Should be a list even for type float.\n\n  if (!_pyfunc_truthy(this._linked)) {\n    err_3 = new Error('RuntimeError:' + \"Cannot set uniform when program has no code\");\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  handle = _pymeth_get.call(this.locations, name, -1);\n\n  if (_pyfunc_truthy(handle < 0)) {\n    if (!_pyfunc_contains(name, this._known_invalid)) {\n      _pymeth_append.call(this._known_invalid, name);\n\n      console.log(\"Variable \" + name + \" is not an active uniform\");\n    }\n\n    return null;\n  }\n\n  if (_pyfunc_contains(name, this._unset_variables)) {\n    _pymeth_remove.call(this._unset_variables, name);\n  }\n\n  count = 1;\n\n  if (!_pymeth_startswith.call(type_, \"mat\")) {\n    a_type = _pymeth_get.call({\n      \"int\": \"float\",\n      \"bool\": \"float\"\n    }, type_, _pymeth_lstrip.call(type_, \"ib\"));\n    count = Math.floor(value.length / this.ATYPEINFO[a_type][0]);\n  }\n\n  if (_pyfunc_truthy(count > 1)) {\n    for (j = 0; j < count; j += 1) {\n      if (_pyfunc_contains(\"\" + name + \"[\" + j + \"]\", this._unset_variables)) {\n        name_ = \"\" + name + \"[\" + j + \"]\";\n\n        if (_pyfunc_contains(name_, this._unset_variables)) {\n          _pymeth_remove.call(this._unset_variables, name_);\n        }\n      }\n    }\n  }\n\n  funcname = this.UTYPEMAP[type_];\n  this.activate();\n\n  if (_pymeth_startswith.call(type_, \"mat\")) {\n    this._gl[funcname](handle, false, value);\n  } else {\n    this._gl[funcname](handle, value);\n  }\n\n  return null;\n};\n\nProgram.prototype.set_attribute = function (name, type_, value, stride, offset) {\n  var args, err_3, funcname, gtype, handle, is_vbo, size, stub7_;\n  stride = stride === undefined ? 0 : stride;\n  offset = offset === undefined ? 0 : offset; // Set an attribute value.\n  //\n  // An attribute represents per-vertex data and can only be used\n  // in the vertex shader.\n  //\n  // Parameters\n  // ----------\n  // name : str\n  //     The name by which the attribute is known in the GLSL code.\n  // type_ : str\n  //     The type of the attribute, e.g. 'float', 'vec2', etc.\n  // value : VertexBuffer, array\n  //     If value is a VertexBuffer, it is used (with stride and offset)\n  //     for the vertex data. If value is an array, its used to set\n  //     the value of all vertices (similar to a uniform).\n  // stide : int, default 0\n  //     The stride to \"sample\" the vertex data inside the buffer. Unless\n  //     multiple vertex data are packed into a single buffer, this should\n  //     be zero.\n  // offset : int, default 0\n  //     The offset to \"sample\" the vertex data inside the buffer. Unless\n  //     multiple vertex data are packed into a single buffer, or only\n  //     a part of the data must be used, this should probably be zero.\n\n  if (!_pyfunc_truthy(this._linked)) {\n    err_3 = new Error('RuntimeError:' + \"Cannot set attribute when program has no code\");\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  is_vbo = value instanceof VertexBuffer;\n  handle = _pymeth_get.call(this.locations, name, -1);\n\n  if (_pyfunc_truthy(handle < 0)) {\n    if (!_pyfunc_contains(name, this._known_invalid)) {\n      _pymeth_append.call(this._known_invalid, name);\n\n      if (_pyfunc_truthy(is_vbo) && _pyfunc_truthy(offset > 0)) {} else {\n        console.log(\"Variable \" + name + \" is not an active attribute\");\n      }\n    }\n\n    return null;\n  }\n\n  if (_pyfunc_contains(name, this._unset_variables)) {\n    _pymeth_remove.call(this._unset_variables, name);\n  }\n\n  this.activate();\n\n  if (!_pyfunc_truthy(is_vbo)) {\n    funcname = this.ATYPEMAP[type_];\n    this._attributes[name] = [0, handle, funcname, value];\n  } else {\n    stub7_ = this.ATYPEINFO[type_];\n    size = stub7_[0];\n    gtype = stub7_[1];\n    funcname = \"vertexAttribPointer\";\n    args = [size, gtype, this._gl.FALSE, stride, offset];\n    this._attributes[name] = [value.handle, handle, funcname, args];\n  }\n\n  return null;\n};\n\nProgram.prototype._pre_draw = function () {\n  var args, attr_handle, funcname, stub10_, stub11_seq, stub8_, stub9_seq, tex_handle, tex_target, unit, vbo_handle, x; // Prepare for drawing.\n\n  this.activate();\n  stub9_seq = this._samplers;\n\n  for (x in stub9_seq) {\n    if (!stub9_seq.hasOwnProperty(x)) {\n      continue;\n    }\n\n    x = stub9_seq[x];\n    stub8_ = x;\n    tex_target = stub8_[0];\n    tex_handle = stub8_[1];\n    unit = stub8_[2];\n\n    this._gl.activeTexture(_pyfunc_add(this._gl.TEXTURE0, unit));\n\n    this._gl.bindTexture(tex_target, tex_handle);\n  }\n\n  stub11_seq = this._attributes;\n\n  for (x in stub11_seq) {\n    if (!stub11_seq.hasOwnProperty(x)) {\n      continue;\n    }\n\n    x = stub11_seq[x];\n    stub10_ = x;\n    vbo_handle = stub10_[0];\n    attr_handle = stub10_[1];\n    funcname = stub10_[2];\n    args = stub10_[3];\n\n    if (_pyfunc_truthy(vbo_handle)) {\n      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, vbo_handle);\n\n      this._gl.enableVertexAttribArray(attr_handle);\n\n      this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n    } else {\n      this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);\n\n      this._gl.disableVertexAttribArray(attr_handle);\n\n      this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n    }\n  }\n\n  if (!_pyfunc_truthy(this._validated)) {\n    this._validated = true;\n\n    this._validate();\n  }\n\n  return null;\n};\n\nProgram.prototype._validate = function () {\n  var err_3;\n\n  if (this._unset_variables.length) {\n    console.log(\"Program has unset variables: \" + this._unset_variables + \"\");\n  }\n\n  this._gl.validateProgram(this.handle);\n\n  if (!_pyfunc_truthy(this._gl.getProgramParameter(this.handle, this._gl.VALIDATE_STATUS))) {\n    console.log(this._gl.getProgramInfoLog(this.handle));\n    err_3 = new Error('RuntimeError:' + \"Program validation error\");\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  return null;\n};\n\nProgram.prototype.draw = function (mode, selection) {\n  var count, err_3, first, gtype, stub12_; // Draw the current visualization defined by the program.\n  //\n  // Parameters\n  // ----------\n  // mode : GL enum\n  //     Can be POINTS, LINES, LINE_LOOP, LINE_STRIP, LINE_FAN, TRIANGLES\n  // selection : 2-element tuple or IndexBuffer\n  //     The selection to draw, specified either as (first, count) or an\n  //     IndexBuffer object.\n\n  if (!_pyfunc_truthy(this._linked)) {\n    err_3 = new Error('RuntimeError:' + \"Cannot draw program if code has not been set\");\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  check_error(this._gl, \"before draw\");\n\n  if (_pyfunc_truthy(selection instanceof IndexBuffer)) {\n    this._pre_draw();\n\n    selection.activate();\n    count = selection._buffer_size / 2;\n    gtype = this._gl.UNSIGNED_SHORT;\n\n    this._gl.drawElements(mode, count, gtype, 0);\n\n    selection.deactivate();\n  } else {\n    stub12_ = selection;\n    first = stub12_[0];\n    count = stub12_[1];\n\n    if (_pyfunc_truthy(count)) {\n      this._pre_draw();\n\n      this._gl.drawArrays(mode, first, count);\n    }\n  }\n\n  check_error(this._gl, \"after draw\");\n  return null;\n};\n\nBuffer = function () {\n  // Base buffer class for vertex data or index data.\n  _pyfunc_instantiate(this, arguments);\n};\n\nBuffer.prototype = Object.create(GlooObject.prototype);\nBuffer.prototype._base_class = GlooObject.prototype;\nBuffer.prototype._class_name = \"Buffer\";\nBuffer.prototype._target = null;\nBuffer.prototype._usage = 35048;\n\nBuffer.prototype._create = function () {\n  this.handle = this._gl.createBuffer();\n  this._buffer_size = 0;\n  return null;\n};\n\nBuffer.prototype.delete = function () {\n  // Delete the buffer.\n  this._gl.deleteBuffer(this.handle);\n\n  return null;\n};\n\nBuffer.prototype.activate = function () {\n  // Activete the buffer.\n  this._gl.bindBuffer(this._target, this.handle);\n\n  return null;\n};\n\nBuffer.prototype.deactivate = function () {\n  // Disable the buffer.\n  this._gl.bindBuffer(this._target, null);\n\n  return null;\n};\n\nBuffer.prototype.set_size = function (nbytes) {\n  // Set the size of the buffer in bytes.\n  //\n  // Parameters\n  // ----------\n  // nbytes : int\n  //     The number of bytes that the buffer needs to hold.\n  if (!_pyfunc_equals(nbytes, this._buffer_size)) {\n    this.activate();\n\n    this._gl.bufferData(this._target, nbytes, this._usage);\n\n    this._buffer_size = nbytes;\n  }\n\n  return null;\n};\n\nBuffer.prototype.set_data = function (offset, data) {\n  // Set the buffer data.\n  //\n  // Parameters\n  // ----------\n  // offset : int\n  //     The offset in bytes for the new data.\n  // data : typed array\n  //     The data to upload.\n  this.activate();\n\n  this._gl.bufferSubData(this._target, offset, data);\n\n  return null;\n};\n\nVertexBuffer = function () {\n  // A buffer for vertex data.\n  _pyfunc_instantiate(this, arguments);\n};\n\nVertexBuffer.prototype = Object.create(Buffer.prototype);\nVertexBuffer.prototype._base_class = Buffer.prototype;\nVertexBuffer.prototype._class_name = \"VertexBuffer\";\nVertexBuffer.prototype._target = 34962;\n\nIndexBuffer = function () {\n  // A buffer for index data.\n  _pyfunc_instantiate(this, arguments);\n};\n\nIndexBuffer.prototype = Object.create(Buffer.prototype);\nIndexBuffer.prototype._base_class = Buffer.prototype;\nIndexBuffer.prototype._class_name = \"IndexBuffer\";\nIndexBuffer.prototype._target = 34963;\n\nTexture2D = function () {\n  // A 2 dimensional regular grid.\n  _pyfunc_instantiate(this, arguments);\n};\n\nTexture2D.prototype = Object.create(GlooObject.prototype);\nTexture2D.prototype._base_class = GlooObject.prototype;\nTexture2D.prototype._class_name = \"Texture2D\";\nTexture2D.prototype._target = 3553;\nTexture2D.prototype._types = {\n  \"Int8Array\": 5120,\n  \"Uint8Array\": 5121,\n  \"Int16Array\": 5122,\n  \"Uint16Array\": 5123,\n  \"Int32Array\": 5124,\n  \"Uint32Array\": 5125,\n  \"Float32Array\": 5126\n};\n\nTexture2D.prototype._create = function () {\n  this.handle = this._gl.createTexture();\n  this._shape_format = null;\n  return null;\n};\n\nTexture2D.prototype.delete = function () {\n  // Delete the texture.\n  this._gl.deleteTexture(this.handle);\n\n  return null;\n};\n\nTexture2D.prototype.activate = function () {\n  // Activate the texture.\n  this._gl.bindTexture(this._target, this.handle);\n\n  return null;\n};\n\nTexture2D.prototype.deactivate = function () {\n  // Disable the texture.\n  this._gl.bindTexture(this._target, 0);\n\n  return null;\n};\n\nTexture2D.prototype._get_alignment = function (width) {\n  var alignment, alignments, stub13_seq, stub14_itr; // Determines a textures byte alignment. If the width isn't a\n  //         power of 2 we need to adjust the byte alignment of the image.\n  //         The image height is unimportant.\n  //\n  //         www.opengl.org/wiki/Common_Mistakes#Texture_upload_and_pixel_reads\n\n  alignments = [4, 8, 2, 1];\n  stub13_seq = alignments;\n\n  if (typeof stub13_seq === \"object\" && !Array.isArray(stub13_seq)) {\n    stub13_seq = Object.keys(stub13_seq);\n  }\n\n  for (stub14_itr = 0; stub14_itr < stub13_seq.length; stub14_itr += 1) {\n    alignment = stub13_seq[stub14_itr];\n\n    if (_pyfunc_equals(width % alignment, 0)) {\n      return alignment;\n    }\n  }\n\n  return null;\n};\n\nTexture2D.prototype.set_wrapping = function (wrap_s, wrap_t) {\n  // Set the texture wrapping mode.\n  //\n  // Parameters\n  // ----------\n  // wrap_s : GL enum\n  //     The mode to wrap the x dimension. Valid values are REPEAT\n  //     CLAMP_TO_EDGE MIRRORED_REPEAT\n  // wrap_t : GL enum\n  //     The mode to wrap the y dimension. Same options as for wrap_s.\n  this.activate();\n\n  this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_S, wrap_s);\n\n  this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_T, wrap_t);\n\n  return null;\n};\n\nTexture2D.prototype.set_interpolation = function (min, mag) {\n  // Set the texture interpolation mode\n  //\n  // Parameters\n  // ----------\n  // min : GL enum\n  //     The interpolation mode when minifying (i.e. zoomed out). Valid\n  //     values are LINEAR and NEAREST.\n  // max : GL enum\n  //     The interpolation mode when magnifying (i.e. zoomed in). Valid\n  //     values are LINEAR, NEAREST, NEAREST_MIPMAP_NEAREST,\n  //     LINEAR_MIPMAP_NEAREST, NEAREST_MIPMAP_LINEAR, LINEAR_MIPMAP_LINEAR.\n  this.activate();\n\n  this._gl.texParameterf(this._target, this._gl.TEXTURE_MIN_FILTER, min);\n\n  this._gl.texParameterf(this._target, this._gl.TEXTURE_MAG_FILTER, mag);\n\n  return null;\n};\n\nTexture2D.prototype.set_size = function (shape, format) {\n  var height, stub15_, width; // Set the size of the 2D texture.\n  //\n  // Parameters\n  // ----------\n  // shape : tuple of ints\n  //     The shape of the data to upload\n  // format : GL enum\n  //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n  //     RGB, and RGBA.\n\n  stub15_ = shape;\n  height = stub15_[0];\n  width = stub15_[1];\n\n  if (!_pyfunc_equals([height, width, format], this._shape_format)) {\n    this._shape_format = [height, width, format];\n    this.activate();\n\n    this._gl.texImage2D(this._target, 0, format, width, height, 0, format, this._gl.UNSIGNED_BYTE, null);\n  }\n\n  this.u_shape = [height, width];\n  return null;\n};\n\nTexture2D.prototype.set_data = function (offset, shape, data) {\n  var _, alignment, err_3, format, gtype, height, stub16_, stub17_, width, x, y; // Set the 2D texture data.\n  //\n  // Parameters\n  // ----------\n  // offset : tuple of ints\n  //     Offset in pixels for each dimension.\n  // shape : tuple of ints\n  //     The shape of the data to upload\n  // data : typed array\n  //     The actual pixel data. Can be of any type, but on the GPU the\n  //     dat is stored in 8 bit precision.\n\n\n  if (_pyfunc_equals(shape.length, 2)) {\n    shape = [shape[0], shape[1], 1];\n  }\n\n  this.activate();\n  format = this._shape_format[2];\n  stub16_ = shape;\n  height = stub16_[0];\n  width = stub16_[1];\n  _ = stub16_[2];\n  stub17_ = offset;\n  y = stub17_[0];\n  x = stub17_[1];\n  gtype = _pymeth_get.call(this._types, data.constructor.name, null);\n\n  if (gtype === null) {\n    err_3 = new Error('ValueError:' + (\"Type \" + data.constructor.name + \" not allowed for texture\"));\n    err_3.name = \"ValueError\";\n    throw err_3;\n  }\n\n  alignment = this._get_alignment(_pyfunc_mult(shape[shape.length - 2], shape[shape.length - 1]));\n\n  if (!_pyfunc_equals(alignment, 4)) {\n    this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, alignment);\n  }\n\n  this._gl.texSubImage2D(this._target, 0, x, y, width, height, format, gtype, data);\n\n  if (!_pyfunc_equals(alignment, 4)) {\n    this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 4);\n  }\n\n  return null;\n};\n\nTexture3DLike = function () {\n  // A 2D texture with support to simulate a 3D texture.\n  //\n  // To use this class, use set_size() and set_data() as if it was a 3D\n  // texture. Add the GLSL_SAMPLE_NEAREST or GLSL_SAMPLE_LINEAR to the\n  // shader to add the sample3D() function that can be used instead of\n  // texture2D(). This function needs ``shape`` and ``tiles`` arguments\n  // which can be set via uniforms, using the ``u_shape`` and ``u_tiles``\n  // attributes of this object.\n  _pyfunc_instantiate(this, arguments);\n};\n\nTexture3DLike.prototype = Object.create(Texture2D.prototype);\nTexture3DLike.prototype._base_class = Texture2D.prototype;\nTexture3DLike.prototype._class_name = \"Texture3DLike\";\nTexture3DLike.prototype.GLSL_SAMPLE_NEAREST = \"\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don't let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float zindex = floor(texcoord.z * shape.z);\\n\\n            // Do a lookup in the 2D texture\\n            float u = (mod(zindex, ncols) + texcoord.x) / ncols;\\n            float v = (floor(zindex / ncols) + texcoord.y) / nrows;\\n\\n            return texture2D(tex, vec2(u,v));\\n        }\\n    \";\nTexture3DLike.prototype.GLSL_SAMPLE_LINEAR = \"\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don't let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float z = texcoord.z * shape.z;\\n            float zindex1 = floor(z);\\n            float u1 = (mod(zindex1, ncols) + texcoord.x) / ncols;\\n            float v1 = (floor(zindex1 / ncols) + texcoord.y) / nrows;\\n\\n            float zindex2 = zindex1 + 1.0;\\n            float u2 = (mod(zindex2, ncols) + texcoord.x) / ncols;\\n            float v2 = (floor(zindex2 / ncols) + texcoord.y) / nrows;\\n\\n            vec4 s1 = texture2D(tex, vec2(u1, v1));\\n            vec4 s2 = texture2D(tex, vec2(u2, v2));\\n\\n            return s1 * (zindex2 - z) + s2 * (z - zindex1);\\n        }\\n    \";\n\nTexture3DLike.prototype._get_tile_info = function (shape) {\n  var err_3, max_size, ncols, nrows;\n  max_size = this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n  nrows = Math.floor(max_size / shape[1]);\n  nrows = Math.min(nrows, shape[0]);\n  ncols = window.Math.ceil(shape[0] / nrows);\n\n  if (_pyfunc_truthy(_pyfunc_mult(ncols, shape[2]) > max_size)) {\n    err_3 = new Error('RuntimeError:' + (\"Cannot fit 3D data with shape \" + shape + \" onto simulated 2D texture.\"));\n    err_3.name = \"RuntimeError\";\n    throw err_3;\n  }\n\n  return [nrows, ncols];\n};\n\nTexture3DLike.prototype.set_size = function (shape, format) {\n  var ncols, nrows, sim_shape, stub18_; // Set the size of the 3D texture.\n  //\n  // Parameters\n  // ----------\n  // shape : tuple of ints\n  //     The shape of the data to upload\n  // format : GL enum\n  //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n  //     RGB, and RGBA.\n\n  stub18_ = this._get_tile_info(shape);\n  nrows = stub18_[0];\n  ncols = stub18_[1];\n  sim_shape = [_pyfunc_mult(shape[1], nrows), _pyfunc_mult(shape[2], ncols)];\n\n  Texture3DLike.prototype._base_class.set_size.call(this, sim_shape, format);\n\n  this.u_shape = [shape[0], shape[1], shape[2]];\n  this.u_tiles = [ncols, nrows];\n  return null;\n};\n\nTexture3DLike.prototype.set_data = function (offset, shape, data) {\n  var Type, col, elements_per_tile, err_3, ncols, nrows, row, sim_shape, stub19_, stub20_, tile, z, zeros; // Set the 3D texture data.\n  //\n  // Parameters\n  // ----------\n  // offset : tuple of ints\n  //     Offset in pixels for each dimension.\n  // shape : tuple of ints\n  //     The shape of the data to upload\n  // data : typed array\n  //     The actual pixel data. Can be of any type, but on the GPU the\n  //     dat is stored in 8 bit precision.\n\n  if (_pyfunc_equals(shape.length, 3)) {\n    shape = [shape[0], shape[1], shape[2], 1];\n  }\n\n  if (!_pyfunc_all(function list_comprehenson() {\n    var res = [];\n    var i, iter0, i0;\n    iter0 = offset;\n\n    if (typeof iter0 === \"object\" && !Array.isArray(iter0)) {\n      iter0 = Object.keys(iter0);\n    }\n\n    for (i0 = 0; i0 < iter0.length; i0++) {\n      i = iter0[i0];\n      {\n        res.push(_pyfunc_equals(i, 0));\n      }\n    }\n\n    return res;\n  }.apply(this))) {\n    err_3 = new Error('ValueError:' + \"Texture3DLike does not support nonzero offset (for now)\");\n    err_3.name = \"ValueError\";\n    throw err_3;\n  }\n\n  stub19_ = this._get_tile_info(shape);\n  nrows = stub19_[0];\n  ncols = stub19_[1];\n  sim_shape = [_pyfunc_mult(shape[1], nrows), _pyfunc_mult(shape[2], ncols), shape[3]];\n\n  if (_pyfunc_equals(ncols, 1)) {\n    Texture3DLike.prototype._base_class.set_data.call(this, [0, 0], sim_shape, data);\n  } else {\n    Type = data.constructor;\n    zeros = new Type(_pyfunc_mult(_pyfunc_mult(sim_shape[0], sim_shape[1]), sim_shape[2]));\n\n    Texture3DLike.prototype._base_class.set_data.call(this, [0, 0], sim_shape, zeros);\n\n    for (z = 0; z < shape[0]; z += 1) {\n      stub20_ = [Math.floor(z / ncols), z % ncols];\n      row = stub20_[0];\n      col = stub20_[1];\n      elements_per_tile = Math.floor(data.length / shape[0]);\n      tile = data.slice(_pyfunc_mult(z, elements_per_tile), _pyfunc_mult(z + 1, elements_per_tile));\n\n      Texture3DLike.prototype._base_class.set_data.call(this, [_pyfunc_mult(row, shape[1]), _pyfunc_mult(col, shape[2])], shape.slice(1), tile);\n    }\n  }\n\n  return null;\n};\n\nmodule.exports = {\n  \"Buffer\": Buffer,\n  \"GlooObject\": GlooObject,\n  \"IndexBuffer\": IndexBuffer,\n  \"Program\": Program,\n  \"Texture2D\": Texture2D,\n  \"Texture3DLike\": Texture3DLike,\n  \"VertexBuffer\": VertexBuffer,\n  \"check_error\": check_error,\n  \"console\": console\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/gloo2/gloo2.js"],"names":["_pyfunc_add","a","b","Array","isArray","concat","_pyfunc_all","x","i","length","_pyfunc_truthy","_pyfunc_contains","contains","_pyfunc_equals","constructor","Object","k","String","indexOf","e","Error","name","equals","iseq","akeys","keys","bkeys","sort","_pyfunc_instantiate","ob","args","window","global","undefined","nobind","bind","__init__","apply","_pyfunc_mult","_pymeth_repeat","call","t","res","_pyfunc_range","start","end","step","val","n","push","v","byteLength","getOwnPropertyNames","_pymeth_append","append","arguments","_pymeth_get","key","d","get","_pymeth_keys","_pymeth_lstrip","chars","lstrip","slice","_pymeth_remove","remove","splice","count","repeat","result","pattern","valueOf","_pymeth_startswith","startswith","Buffer","GlooObject","IndexBuffer","Program","Texture2D","Texture3DLike","VertexBuffer","__version__","check_error","console","gl","when","err","err_3","errors","msg","stub1_seq","stub2_itr","getError","NO_ERROR","prototype","_base_class","_class_name","_gl","handle","_create","err_2","create","UTYPEMAP","ATYPEMAP","ATYPEINFO","createProgram","locations","_unset_variables","_validated","_samplers","_attributes","_known_invalid","delete","deleteProgram","activate","useProgram","deactivate","set_shaders","vert","frag","code","err_4","frag_handle","status","stub3_","tmp","type_","vert_handle","_linked","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","_get_active_attributes_and_uniforms","detachShader","deleteShader","attributes","ca","container","cu","getActive","getLocation","info","j","m","regex","stub4_","stub5_seq","stub6_itr","uniforms","RegExp","ACTIVE_UNIFORMS","ACTIVE_ATTRIBUTES","getActiveAttrib","getAttribLocation","getActiveUniform","getUniformLocation","match","size","type","list_comprehenson","iter0","i0","set_texture","value","unit","log","_target","uniform1i","set_uniform","a_type","funcname","name_","Math","floor","set_attribute","stride","offset","gtype","is_vbo","stub7_","FALSE","_pre_draw","attr_handle","stub10_","stub11_seq","stub8_","stub9_seq","tex_handle","tex_target","vbo_handle","hasOwnProperty","activeTexture","TEXTURE0","bindTexture","bindBuffer","ARRAY_BUFFER","enableVertexAttribArray","disableVertexAttribArray","_validate","validateProgram","VALIDATE_STATUS","draw","mode","selection","first","stub12_","_buffer_size","UNSIGNED_SHORT","drawElements","drawArrays","_usage","createBuffer","deleteBuffer","set_size","nbytes","bufferData","set_data","data","bufferSubData","_types","createTexture","_shape_format","deleteTexture","_get_alignment","width","alignment","alignments","stub13_seq","stub14_itr","set_wrapping","wrap_s","wrap_t","texParameterf","TEXTURE_WRAP_S","TEXTURE_WRAP_T","set_interpolation","min","mag","TEXTURE_MIN_FILTER","TEXTURE_MAG_FILTER","shape","format","height","stub15_","texImage2D","UNSIGNED_BYTE","u_shape","_","stub16_","stub17_","y","pixelStorei","UNPACK_ALIGNMENT","texSubImage2D","GLSL_SAMPLE_NEAREST","GLSL_SAMPLE_LINEAR","_get_tile_info","max_size","ncols","nrows","getParameter","MAX_TEXTURE_SIZE","ceil","sim_shape","stub18_","u_tiles","Type","col","elements_per_tile","row","stub19_","stub20_","tile","z","zeros","module","exports"],"mappings":"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","sourcesContent":["/* Do not edit, autogenerated by flexx.pyscript */\n\nvar _pyfunc_add = function (a, b) { // nargs: 2\n    if (Array.isArray(a) && Array.isArray(b)) {\n        return a.concat(b);\n    } return a + b;\n};\nvar _pyfunc_all = function (x) { // nargs: 1\n    for (var i=0; i<x.length; i++) {\n        if (!_pyfunc_truthy(x[i])){return false;}\n    } return true;\n};\nvar _pyfunc_contains = function contains (a, b) { // nargs: 2\n    if (b == null) {\n    } else if (Array.isArray(b)) {\n        for (var i=0; i<b.length; i++) {if (_pyfunc_equals(a, b[i]))\n                                           return true;}\n        return false;\n    } else if (b.constructor === Object) {\n        for (var k in b) {if (a == k) return true;}\n        return false;\n    } else if (b.constructor == String) {\n        return b.indexOf(a) >= 0;\n    } var e = Error('Not a container: ' + b); e.name='TypeError'; throw e;\n};\nvar _pyfunc_equals = function equals (a, b) { // nargs: 2\n    if (a == null || b == null) {\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n        var i = 0, iseq = a.length == b.length;\n        while (iseq && i < a.length) {iseq = equals(a[i], b[i]); i+=1;}\n        return iseq;\n    } else if (a.constructor === Object && b.constructor === Object) {\n        var akeys = Object.keys(a), bkeys = Object.keys(b);\n        akeys.sort(); bkeys.sort();\n        var i=0, k, iseq = equals(akeys, bkeys);\n        while (iseq && i < akeys.length) {k=akeys[i]; iseq = equals(a[k], b[k]); i+=1;}\n        return iseq;\n    } return a == b;\n};\nvar _pyfunc_instantiate = function (ob, args) { // nargs: 2\n    if ((typeof ob === \"undefined\") ||\n            (typeof window !== \"undefined\" && window === ob) ||\n            (typeof global !== \"undefined\" && global === ob))\n            {throw \"Class constructor is called as a function.\";}\n    for (var name in ob) {\n        if (Object[name] === undefined &&\n            typeof ob[name] === 'function' && !ob[name].nobind) {\n            ob[name] = ob[name].bind(ob);\n        }\n    }\n    if (ob.__init__) {\n        ob.__init__.apply(ob, args);\n    }\n};\nvar _pyfunc_mult = function (a, b) { // nargs: 2\n    if ((typeof a === 'number') + (typeof b === 'number') === 1) {\n        if (a.constructor === String) return _pymeth_repeat.call(a, b);\n        if (b.constructor === String) return _pymeth_repeat.call(b, a);\n        if (Array.isArray(b)) {var t=a; a=b; b=t;}\n        if (Array.isArray(a)) {\n            var res = []; for (var i=0; i<b; i++) res = res.concat(a);\n            return res;\n        }\n    } return a * b;\n};\nvar _pyfunc_range = function (start, end, step) {\nvar i, res = [];\n    var val = start;\n    var n = (end - start) / step;\n    for (i=0; i<n; i++) {\n        res.push(val);\n        val += step;\n    }\n    return res;\n};\nvar _pyfunc_truthy = function (v) {\n    if (v === null || typeof v !== \"object\") {return v;}\n    else if (v.length !== undefined) {return v.length ? v : false;}\n    else if (v.byteLength !== undefined) {return v.byteLength ? v : false;}\n    else if (v.constructor !== Object) {return true;}\n    else {return Object.getOwnPropertyNames(v).length ? v : false;}\n};\nvar _pymeth_append = function (x) { // nargs: 1\n    if (!Array.isArray(this)) return this.append.apply(this, arguments);\n    this.push(x);\n};\nvar _pymeth_get = function (key, d) { // nargs: 1 2\n    if (this.constructor !== Object) return this.get.apply(this, arguments);\n    if (this[key] !== undefined) {return this[key];}\n    else if (d !== undefined) {return d;}\n    else {return null;}\n};\nvar _pymeth_keys = function () { // nargs: 0\n    if (typeof this['keys'] === 'function') return this.keys.apply(this, arguments);\n    return Object.keys(this);\n};\nvar _pymeth_lstrip = function (chars) { // nargs: 0 1\n    if (this.constructor !== String) return this.lstrip.apply(this, arguments);\n    chars = (chars === undefined) ? ' \\t\\r\\n' : chars;\n    for (var i=0; i<this.length; i++) {\n        if (chars.indexOf(this[i]) < 0) return this.slice(i);\n    } return '';\n};\nvar _pymeth_remove = function (x) { // nargs: 1\n    if (!Array.isArray(this)) return this.remove.apply(this, arguments);\n    for (var i=0; i<this.length; i++) {\n        if (_pyfunc_equals(this[i], x)) {this.splice(i, 1); return;}\n    }\n    var e = Error(x); e.name='ValueError'; throw e;\n};\nvar _pymeth_repeat = function(count) { // nargs: 0\n    if (this.repeat) return this.repeat(count);\n    if (count < 1) return '';\n    var result = '', pattern = this.valueOf();\n    while (count > 1) {\n        if (count & 1) result += pattern;\n        count >>= 1, pattern += pattern;\n    }\n    return result + pattern;\n};\nvar _pymeth_startswith = function (x) { // nargs: 1\n    if (this.constructor !== String) return this.startswith.apply(this, arguments);\n    return this.indexOf(x) == 0;\n};\nvar Buffer, GlooObject, IndexBuffer, Program, Texture2D, Texture3DLike, VertexBuffer, __version__, check_error, console;\n// PyScript module for gloo2.js - lightweight object oriented GL.\n\n{ /* if this_is_js() */\nconsole = window.console;\n}\n__version__ = \"0.3\";\ncheck_error = function (gl, when) {\n    var e, err, err_3, errors, msg, stub1_seq, stub2_itr;\n    when = (when === undefined) ? \"periodic check\": when;\n    // Check this from time to time to detect GL errors.\n    //\n    //     Parameters\n    //     ----------\n    //     when : str\n    //         Shown in the exception to help the developer determine when\n    //         this check was done.\n    errors = [];\n    while (true) {\n        err = gl.getError();\n        if ((_pyfunc_equals(err, gl.NO_ERROR) || (_pyfunc_truthy(errors) && _pyfunc_equals(err, errors[errors.length -1])))) {\n            break;\n        }\n        _pymeth_append.call(errors, err);\n    }\n    if (errors.length) {\n        msg = \"\";\n        stub1_seq = errors;\n        if ((typeof stub1_seq === \"object\") && (!Array.isArray(stub1_seq))) {\n            stub1_seq = Object.keys(stub1_seq);\n        }\n        for (stub2_itr = 0; stub2_itr < stub1_seq.length; stub2_itr += 1) {\n            e = stub1_seq[stub2_itr];\n            msg=_pyfunc_add(msg, e)\n        }\n        err_3 = new Error('RuntimeError:' + (\"OpenGL got errors (\" + when + \"): \" + msg + \"\")); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    return null;\n};\n\nGlooObject = function () {\n    // Abstract base class for all Gloo classes.\n    _pyfunc_instantiate(this, arguments);\n}\nGlooObject.prototype._base_class = Object;\nGlooObject.prototype._class_name = \"GlooObject\";\n\nGlooObject.prototype.__init__ = function (gl) {\n    // Init by passing the webgl context object.\n    this._gl = gl;\n    this.handle = null;\n    this._create();\n    if (!(this.handle !== null)) {throw \"AssertionError: \" + \"this.handle !== null\";}\n    return null;\n};\n\nGlooObject.prototype._create = function () {\n    var err_2;\n    err_2 = new Error('NotImplementedError:' + \"\"); err_2.name = \"NotImplementedError\"; throw err_2;\n    return null;\n};\n\n\nProgram = function () {\n    // The program is the central component to connect gloo objects and shaders.\n    _pyfunc_instantiate(this, arguments);\n}\nProgram.prototype = Object.create(GlooObject.prototype);\nProgram.prototype._base_class = GlooObject.prototype;\nProgram.prototype._class_name = \"Program\";\n\nProgram.prototype.UTYPEMAP = {\"float\": \"uniform1fv\", \"vec2\": \"uniform2fv\", \"vec3\": \"uniform3fv\", \"vec4\": \"uniform4fv\", \"int\": \"uniform1iv\", \"ivec2\": \"uniform2iv\", \"ivec3\": \"uniform3iv\", \"ivec4\": \"uniform4iv\", \"bool\": \"uniform1iv\", \"bvec2\": \"uniform2iv\", \"bvec3\": \"uniform3iv\", \"bvec4\": \"uniform4iv\", \"mat2\": \"uniformMatrix2fv\", \"mat3\": \"uniformMatrix3fv\", \"mat4\": \"uniformMatrix4fv\", \"sampler1D\": \"uniform1i\", \"sampler2D\": \"uniform1i\", \"sampler3D\": \"uniform1i\"};\nProgram.prototype.ATYPEMAP = {\"float\": \"vertexAttrib1f\", \"vec2\": \"vertexAttrib2f\", \"vec3\": \"vertexAttrib3f\", \"vec4\": \"vertexAttrib4f\"};\nProgram.prototype.ATYPEINFO = {\"float\": [1, 5126], \"vec2\": [2, 5126], \"vec3\": [3, 5126], \"vec4\": [4, 5126]};\nProgram.prototype._create = function () {\n    this.handle = this._gl.createProgram();\n    this.locations = {};\n    this._unset_variables = [];\n    this._validated = false;\n    this._samplers = {};\n    this._attributes = {};\n    this._known_invalid = [];\n    return null;\n};\n\nProgram.prototype.delete = function () {\n    // Delete the program.\n    this._gl.deleteProgram(this.handle);\n    return null;\n};\n\nProgram.prototype.activate = function () {\n    // Activate the program.\n    this._gl.useProgram(this.handle);\n    return null;\n};\n\nProgram.prototype.deactivate = function () {\n    // Disable the program.\n    this._gl.useProgram(0);\n    return null;\n};\n\nProgram.prototype.set_shaders = function (vert, frag) {\n    var code, err_3, err_4, errors, frag_handle, gl, handle, i, status, stub3_, tmp, type_, vert_handle;\n    // Set GLSL code for the vertex and fragment shader.\n    //\n    // This function takes care of setting the shading code and\n    // compiling+linking it into a working program object that is ready\n    // to use.\n    //\n    // Parameters\n    // ----------\n    // vert : str\n    //     GLSL code for the vertex shader.\n    // frag : str\n    //     GLSL code for the fragment shader.\n    gl = this._gl;\n    this._linked = false;\n    vert_handle = gl.createShader(gl.VERTEX_SHADER);\n    frag_handle = gl.createShader(gl.FRAGMENT_SHADER);\n    tmp = [[vert, vert_handle, \"vertex\"], [frag, frag_handle, \"fragment\"]];\n    for (i = 0; i < 2; i += 1) {\n        stub3_ = tmp[i];\n        code = stub3_[0];handle = stub3_[1];type_ = stub3_[2];\n        gl.shaderSource(handle, code);\n        gl.compileShader(handle);\n        status = gl.getShaderParameter(handle, gl.COMPILE_STATUS);\n        if ((!_pyfunc_truthy(status))) {\n            errors = gl.getShaderInfoLog(handle);\n            err_4 = new Error('RuntimeError:' + (_pyfunc_add(((\"errors in \" + type_) + \" shader:\\n\"), errors))); err_4.name = \"RuntimeError\"; throw err_4;\n        }\n    }\n    gl.attachShader(this.handle, vert_handle);\n    gl.attachShader(this.handle, frag_handle);\n    gl.linkProgram(this.handle);\n    if ((!_pyfunc_truthy(gl.getProgramParameter(this.handle, gl.LINK_STATUS)))) {\n        err_3 = new Error('RuntimeError:' + (\"Program link error:\\n\" + gl.getProgramInfoLog(this.handle))); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    this._unset_variables = this._get_active_attributes_and_uniforms();\n    gl.detachShader(this.handle, vert_handle);\n    gl.detachShader(this.handle, frag_handle);\n    gl.deleteShader(vert_handle);\n    gl.deleteShader(frag_handle);\n    this._known_invalid = [];\n    this._linked = true;\n    return null;\n};\n\nProgram.prototype._get_active_attributes_and_uniforms = function () {\n    var attributes, ca, container, count, cu, getActive, getLocation, gl, i, info, j, m, name, regex, stub4_, stub5_seq, stub6_itr, uniforms, x;\n    // Retrieve active attributes and uniforms to be able to check that\n    // all uniforms/attributes are set by the user.\n    gl = this._gl;\n    this.locations = {};\n    regex = new window.RegExp(\"(\\\\w+)\\\\s*(\\\\[(\\\\d+)\\\\])\\\\s*\");\n    cu = gl.getProgramParameter(this.handle, gl.ACTIVE_UNIFORMS);\n    ca = gl.getProgramParameter(this.handle, gl.ACTIVE_ATTRIBUTES);\n    attributes = [];\n    uniforms = [];\n    stub5_seq = [[attributes, ca, gl.getActiveAttrib, gl.getAttribLocation], [uniforms, cu, gl.getActiveUniform, gl.getUniformLocation]];\n    if ((typeof stub5_seq === \"object\") && (!Array.isArray(stub5_seq))) {\n        stub5_seq = Object.keys(stub5_seq);\n    }\n    for (stub6_itr = 0; stub6_itr < stub5_seq.length; stub6_itr += 1) {\n        x = stub5_seq[stub6_itr];\n        stub4_ = x;\n        container = stub4_[0];count = stub4_[1];getActive = stub4_[2];getLocation = stub4_[3];\n        for (i = 0; i < count; i += 1) {\n            info = getActive.call(gl, this.handle, i);\n            name = info.name;\n            m = name.match(regex);\n            if (_pyfunc_truthy(m)) {\n                name = m[1];\n                for (j = 0; j < info.size; j += 1) {\n                    _pymeth_append.call(container, ([\"\" + name + \"[\" + j + \"]\", info.type]));\n                }\n            } else {\n                _pymeth_append.call(container, [name, info.type]);\n            }\n            this.locations[name] = getLocation.call(gl, this.handle, name);\n        }\n    }\n    return _pyfunc_add(((function list_comprehenson () {var res = [];var v, iter0, i0;iter0 = attributes;if ((typeof iter0 === \"object\") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {v = iter0[i0];{res.push(v[0]);}}return res;}).apply(this)), ((function list_comprehenson () {var res = [];var v, iter0, i0;iter0 = uniforms;if ((typeof iter0 === \"object\") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {v = iter0[i0];{res.push(v[0]);}}return res;}).apply(this)));\n};\n\nProgram.prototype.set_texture = function (name, value) {\n    var err_3, handle, unit;\n    // Set a texture sampler.\n    //\n    // A texture is a 2 dimensional grid of colors/intensities that\n    // can be applied to a face (or used for other means by providing\n    // a regular grid of data).\n    //\n    // Parameters\n    // ----------\n    // name : str\n    //     The name by which the texture is known in the GLSL code.\n    // value : Texture2D\n    //     The gloo Texture2D object to bind.\n    if ((!_pyfunc_truthy(this._linked))) {\n        err_3 = new Error('RuntimeError:' + \"Cannot set uniform when program has no code\"); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    handle = _pymeth_get.call(this.locations, name, (-1));\n    if (_pyfunc_truthy(handle < 0)) {\n        if ((!_pyfunc_contains(name, this._known_invalid))) {\n            _pymeth_append.call(this._known_invalid, name);\n            console.log(\"Variable \" + name + \" is not an active texture\");\n        }\n        return null;\n    }\n    if (_pyfunc_contains(name, this._unset_variables)) {\n        _pymeth_remove.call(this._unset_variables, name);\n    }\n    this.activate();\n    if (true) {\n        unit = _pymeth_keys.call(this._samplers).length;\n        if (_pyfunc_contains(name, this._samplers)) {\n            unit = this._samplers[name][this._samplers[name].length -1];\n        }\n        this._samplers[name] = [value._target, value.handle, unit];\n        this._gl.uniform1i(handle, unit);\n    }\n    return null;\n};\n\nProgram.prototype.set_uniform = function (name, type_, value) {\n    var a_type, count, err_3, funcname, handle, j, name_;\n    // Set a uniform value.\n    //\n    // A uniform is a value that is global to both the vertex and\n    // fragment shader.\n    //\n    // Parameters\n    // ----------\n    // name : str\n    //     The name by which the uniform is known in the GLSL code.\n    // type_ : str\n    //     The type of the uniform, e.g. 'float', 'vec2', etc.\n    // value : list of scalars\n    //     The value for the uniform. Should be a list even for type float.\n    if ((!_pyfunc_truthy(this._linked))) {\n        err_3 = new Error('RuntimeError:' + \"Cannot set uniform when program has no code\"); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    handle = _pymeth_get.call(this.locations, name, (-1));\n    if (_pyfunc_truthy(handle < 0)) {\n        if ((!_pyfunc_contains(name, this._known_invalid))) {\n            _pymeth_append.call(this._known_invalid, name);\n            console.log(\"Variable \" + name + \" is not an active uniform\");\n        }\n        return null;\n    }\n    if (_pyfunc_contains(name, this._unset_variables)) {\n        _pymeth_remove.call(this._unset_variables, name);\n    }\n    count = 1;\n    if ((!_pymeth_startswith.call(type_, \"mat\"))) {\n        a_type = _pymeth_get.call({\"int\": \"float\", \"bool\": \"float\"}, type_, _pymeth_lstrip.call(type_, \"ib\"));\n        count = Math.floor(value.length/(this.ATYPEINFO[a_type][0]));\n    }\n    if (_pyfunc_truthy(count > 1)) {\n        for (j = 0; j < count; j += 1) {\n            if ((_pyfunc_contains((\"\" + name + \"[\" + j + \"]\"), this._unset_variables))) {\n                name_ = \"\" + name + \"[\" + j + \"]\";\n                if (_pyfunc_contains(name_, this._unset_variables)) {\n                    _pymeth_remove.call(this._unset_variables, name_);\n                }\n            }\n        }\n    }\n    funcname = this.UTYPEMAP[type_];\n    this.activate();\n    if (_pymeth_startswith.call(type_, \"mat\")) {\n        this._gl[funcname](handle, false, value);\n    } else {\n        this._gl[funcname](handle, value);\n    }\n    return null;\n};\n\nProgram.prototype.set_attribute = function (name, type_, value, stride, offset) {\n    var args, err_3, funcname, gtype, handle, is_vbo, size, stub7_;\n    stride = (stride === undefined) ? 0: stride;\n    offset = (offset === undefined) ? 0: offset;\n    // Set an attribute value.\n    //\n    // An attribute represents per-vertex data and can only be used\n    // in the vertex shader.\n    //\n    // Parameters\n    // ----------\n    // name : str\n    //     The name by which the attribute is known in the GLSL code.\n    // type_ : str\n    //     The type of the attribute, e.g. 'float', 'vec2', etc.\n    // value : VertexBuffer, array\n    //     If value is a VertexBuffer, it is used (with stride and offset)\n    //     for the vertex data. If value is an array, its used to set\n    //     the value of all vertices (similar to a uniform).\n    // stide : int, default 0\n    //     The stride to \"sample\" the vertex data inside the buffer. Unless\n    //     multiple vertex data are packed into a single buffer, this should\n    //     be zero.\n    // offset : int, default 0\n    //     The offset to \"sample\" the vertex data inside the buffer. Unless\n    //     multiple vertex data are packed into a single buffer, or only\n    //     a part of the data must be used, this should probably be zero.\n    if ((!_pyfunc_truthy(this._linked))) {\n        err_3 = new Error('RuntimeError:' + \"Cannot set attribute when program has no code\"); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    is_vbo = value instanceof VertexBuffer;\n    handle = _pymeth_get.call(this.locations, name, (-1));\n    if (_pyfunc_truthy(handle < 0)) {\n        if ((!_pyfunc_contains(name, this._known_invalid))) {\n            _pymeth_append.call(this._known_invalid, name);\n            if ((_pyfunc_truthy(is_vbo) && _pyfunc_truthy(offset > 0))) {\n            } else {\n                console.log(\"Variable \" + name + \" is not an active attribute\");\n            }\n        }\n        return null;\n    }\n    if (_pyfunc_contains(name, this._unset_variables)) {\n        _pymeth_remove.call(this._unset_variables, name);\n    }\n    this.activate();\n    if ((!_pyfunc_truthy(is_vbo))) {\n        funcname = this.ATYPEMAP[type_];\n        this._attributes[name] = [0, handle, funcname, value];\n    } else {\n        stub7_ = this.ATYPEINFO[type_];\n        size = stub7_[0];gtype = stub7_[1];\n        funcname = \"vertexAttribPointer\";\n        args = [size, gtype, this._gl.FALSE, stride, offset];\n        this._attributes[name] = [value.handle, handle, funcname, args];\n    }\n    return null;\n};\n\nProgram.prototype._pre_draw = function () {\n    var args, attr_handle, funcname, stub10_, stub11_seq, stub8_, stub9_seq, tex_handle, tex_target, unit, vbo_handle, x;\n    // Prepare for drawing.\n    this.activate();\n    stub9_seq = this._samplers;\n    for (x in stub9_seq) {\n        if (!stub9_seq.hasOwnProperty(x)){ continue; }\n        x = stub9_seq[x];\n        stub8_ = x;\n        tex_target = stub8_[0];tex_handle = stub8_[1];unit = stub8_[2];\n        this._gl.activeTexture(_pyfunc_add(this._gl.TEXTURE0, unit));\n        this._gl.bindTexture(tex_target, tex_handle);\n    }\n    stub11_seq = this._attributes;\n    for (x in stub11_seq) {\n        if (!stub11_seq.hasOwnProperty(x)){ continue; }\n        x = stub11_seq[x];\n        stub10_ = x;\n        vbo_handle = stub10_[0];attr_handle = stub10_[1];funcname = stub10_[2];args = stub10_[3];\n        if (_pyfunc_truthy(vbo_handle)) {\n            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, vbo_handle);\n            this._gl.enableVertexAttribArray(attr_handle);\n            this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n        } else {\n            this._gl.bindBuffer(this._gl.ARRAY_BUFFER, null);\n            this._gl.disableVertexAttribArray(attr_handle);\n            this._gl[funcname].apply(this._gl, [].concat([attr_handle], args));\n        }\n    }\n    if ((!_pyfunc_truthy(this._validated))) {\n        this._validated = true;\n        this._validate();\n    }\n    return null;\n};\n\nProgram.prototype._validate = function () {\n    var err_3;\n    if (this._unset_variables.length) {\n        console.log(\"Program has unset variables: \" + this._unset_variables + \"\");\n    }\n    this._gl.validateProgram(this.handle);\n    if ((!_pyfunc_truthy(this._gl.getProgramParameter(this.handle, this._gl.VALIDATE_STATUS)))) {\n        console.log(this._gl.getProgramInfoLog(this.handle));\n        err_3 = new Error('RuntimeError:' + \"Program validation error\"); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    return null;\n};\n\nProgram.prototype.draw = function (mode, selection) {\n    var count, err_3, first, gtype, stub12_;\n    // Draw the current visualization defined by the program.\n    //\n    // Parameters\n    // ----------\n    // mode : GL enum\n    //     Can be POINTS, LINES, LINE_LOOP, LINE_STRIP, LINE_FAN, TRIANGLES\n    // selection : 2-element tuple or IndexBuffer\n    //     The selection to draw, specified either as (first, count) or an\n    //     IndexBuffer object.\n    if ((!_pyfunc_truthy(this._linked))) {\n        err_3 = new Error('RuntimeError:' + \"Cannot draw program if code has not been set\"); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    check_error(this._gl, \"before draw\");\n    if (_pyfunc_truthy(selection instanceof IndexBuffer)) {\n        this._pre_draw();\n        selection.activate();\n        count = selection._buffer_size / 2;\n        gtype = this._gl.UNSIGNED_SHORT;\n        this._gl.drawElements(mode, count, gtype, 0);\n        selection.deactivate();\n    } else {\n        stub12_ = selection;\n        first = stub12_[0];count = stub12_[1];\n        if (_pyfunc_truthy(count)) {\n            this._pre_draw();\n            this._gl.drawArrays(mode, first, count);\n        }\n    }\n    check_error(this._gl, \"after draw\");\n    return null;\n};\n\n\nBuffer = function () {\n    // Base buffer class for vertex data or index data.\n    _pyfunc_instantiate(this, arguments);\n}\nBuffer.prototype = Object.create(GlooObject.prototype);\nBuffer.prototype._base_class = GlooObject.prototype;\nBuffer.prototype._class_name = \"Buffer\";\n\nBuffer.prototype._target = null;\nBuffer.prototype._usage = 35048;\nBuffer.prototype._create = function () {\n    this.handle = this._gl.createBuffer();\n    this._buffer_size = 0;\n    return null;\n};\n\nBuffer.prototype.delete = function () {\n    // Delete the buffer.\n    this._gl.deleteBuffer(this.handle);\n    return null;\n};\n\nBuffer.prototype.activate = function () {\n    // Activete the buffer.\n    this._gl.bindBuffer(this._target, this.handle);\n    return null;\n};\n\nBuffer.prototype.deactivate = function () {\n    // Disable the buffer.\n    this._gl.bindBuffer(this._target, null);\n    return null;\n};\n\nBuffer.prototype.set_size = function (nbytes) {\n    // Set the size of the buffer in bytes.\n    //\n    // Parameters\n    // ----------\n    // nbytes : int\n    //     The number of bytes that the buffer needs to hold.\n    if ((!_pyfunc_equals(nbytes, this._buffer_size))) {\n        this.activate();\n        this._gl.bufferData(this._target, nbytes, this._usage);\n        this._buffer_size = nbytes;\n    }\n    return null;\n};\n\nBuffer.prototype.set_data = function (offset, data) {\n    // Set the buffer data.\n    //\n    // Parameters\n    // ----------\n    // offset : int\n    //     The offset in bytes for the new data.\n    // data : typed array\n    //     The data to upload.\n    this.activate();\n    this._gl.bufferSubData(this._target, offset, data);\n    return null;\n};\n\n\nVertexBuffer = function () {\n    // A buffer for vertex data.\n    _pyfunc_instantiate(this, arguments);\n}\nVertexBuffer.prototype = Object.create(Buffer.prototype);\nVertexBuffer.prototype._base_class = Buffer.prototype;\nVertexBuffer.prototype._class_name = \"VertexBuffer\";\n\nVertexBuffer.prototype._target = 34962;\n\nIndexBuffer = function () {\n    // A buffer for index data.\n    _pyfunc_instantiate(this, arguments);\n}\nIndexBuffer.prototype = Object.create(Buffer.prototype);\nIndexBuffer.prototype._base_class = Buffer.prototype;\nIndexBuffer.prototype._class_name = \"IndexBuffer\";\n\nIndexBuffer.prototype._target = 34963;\n\nTexture2D = function () {\n    // A 2 dimensional regular grid.\n    _pyfunc_instantiate(this, arguments);\n}\nTexture2D.prototype = Object.create(GlooObject.prototype);\nTexture2D.prototype._base_class = GlooObject.prototype;\nTexture2D.prototype._class_name = \"Texture2D\";\n\nTexture2D.prototype._target = 3553;\nTexture2D.prototype._types = {\"Int8Array\": 5120, \"Uint8Array\": 5121, \"Int16Array\": 5122, \"Uint16Array\": 5123, \"Int32Array\": 5124, \"Uint32Array\": 5125, \"Float32Array\": 5126};\nTexture2D.prototype._create = function () {\n    this.handle = this._gl.createTexture();\n    this._shape_format = null;\n    return null;\n};\n\nTexture2D.prototype.delete = function () {\n    // Delete the texture.\n    this._gl.deleteTexture(this.handle);\n    return null;\n};\n\nTexture2D.prototype.activate = function () {\n    // Activate the texture.\n    this._gl.bindTexture(this._target, this.handle);\n    return null;\n};\n\nTexture2D.prototype.deactivate = function () {\n    // Disable the texture.\n    this._gl.bindTexture(this._target, 0);\n    return null;\n};\n\nTexture2D.prototype._get_alignment = function (width) {\n    var alignment, alignments, stub13_seq, stub14_itr;\n    // Determines a textures byte alignment. If the width isn't a\n    //         power of 2 we need to adjust the byte alignment of the image.\n    //         The image height is unimportant.\n    //\n    //         www.opengl.org/wiki/Common_Mistakes#Texture_upload_and_pixel_reads\n    alignments = [4, 8, 2, 1];\n    stub13_seq = alignments;\n    if ((typeof stub13_seq === \"object\") && (!Array.isArray(stub13_seq))) {\n        stub13_seq = Object.keys(stub13_seq);\n    }\n    for (stub14_itr = 0; stub14_itr < stub13_seq.length; stub14_itr += 1) {\n        alignment = stub13_seq[stub14_itr];\n        if ((_pyfunc_equals((width % alignment), 0))) {\n            return alignment;\n        }\n    }\n    return null;\n};\n\nTexture2D.prototype.set_wrapping = function (wrap_s, wrap_t) {\n    // Set the texture wrapping mode.\n    //\n    // Parameters\n    // ----------\n    // wrap_s : GL enum\n    //     The mode to wrap the x dimension. Valid values are REPEAT\n    //     CLAMP_TO_EDGE MIRRORED_REPEAT\n    // wrap_t : GL enum\n    //     The mode to wrap the y dimension. Same options as for wrap_s.\n    this.activate();\n    this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_S, wrap_s);\n    this._gl.texParameterf(this._target, this._gl.TEXTURE_WRAP_T, wrap_t);\n    return null;\n};\n\nTexture2D.prototype.set_interpolation = function (min, mag) {\n    // Set the texture interpolation mode\n    //\n    // Parameters\n    // ----------\n    // min : GL enum\n    //     The interpolation mode when minifying (i.e. zoomed out). Valid\n    //     values are LINEAR and NEAREST.\n    // max : GL enum\n    //     The interpolation mode when magnifying (i.e. zoomed in). Valid\n    //     values are LINEAR, NEAREST, NEAREST_MIPMAP_NEAREST,\n    //     LINEAR_MIPMAP_NEAREST, NEAREST_MIPMAP_LINEAR, LINEAR_MIPMAP_LINEAR.\n    this.activate();\n    this._gl.texParameterf(this._target, this._gl.TEXTURE_MIN_FILTER, min);\n    this._gl.texParameterf(this._target, this._gl.TEXTURE_MAG_FILTER, mag);\n    return null;\n};\n\nTexture2D.prototype.set_size = function (shape, format) {\n    var height, stub15_, width;\n    // Set the size of the 2D texture.\n    //\n    // Parameters\n    // ----------\n    // shape : tuple of ints\n    //     The shape of the data to upload\n    // format : GL enum\n    //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n    //     RGB, and RGBA.\n    stub15_ = shape;\n    height = stub15_[0];width = stub15_[1];\n    if ((!_pyfunc_equals([height, width, format], this._shape_format))) {\n        this._shape_format = [height, width, format];\n        this.activate();\n        this._gl.texImage2D(this._target, 0, format, width, height, 0, format, this._gl.UNSIGNED_BYTE, null);\n    }\n    this.u_shape = [height, width];\n    return null;\n};\n\nTexture2D.prototype.set_data = function (offset, shape, data) {\n    var _, alignment, err_3, format, gtype, height, stub16_, stub17_, width, x, y;\n    // Set the 2D texture data.\n    //\n    // Parameters\n    // ----------\n    // offset : tuple of ints\n    //     Offset in pixels for each dimension.\n    // shape : tuple of ints\n    //     The shape of the data to upload\n    // data : typed array\n    //     The actual pixel data. Can be of any type, but on the GPU the\n    //     dat is stored in 8 bit precision.\n    if (_pyfunc_equals(shape.length, 2)) {\n        shape = [shape[0], shape[1], 1];\n    }\n    this.activate();\n    format = this._shape_format[2];\n    stub16_ = shape;\n    height = stub16_[0];width = stub16_[1];_ = stub16_[2];\n    stub17_ = offset;\n    y = stub17_[0];x = stub17_[1];\n    gtype = _pymeth_get.call(this._types, data.constructor.name, null);\n    if ((gtype === null)) {\n        err_3 = new Error('ValueError:' + (\"Type \" + data.constructor.name + \" not allowed for texture\")); err_3.name = \"ValueError\"; throw err_3;\n    }\n    alignment = this._get_alignment(_pyfunc_mult(shape[shape.length -2], shape[shape.length -1]));\n    if ((!_pyfunc_equals(alignment, 4))) {\n        this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, alignment);\n    }\n    this._gl.texSubImage2D(this._target, 0, x, y, width, height, format, gtype, data);\n    if ((!_pyfunc_equals(alignment, 4))) {\n        this._gl.pixelStorei(this._gl.UNPACK_ALIGNMENT, 4);\n    }\n    return null;\n};\n\n\nTexture3DLike = function () {\n    // A 2D texture with support to simulate a 3D texture.\n    //\n    // To use this class, use set_size() and set_data() as if it was a 3D\n    // texture. Add the GLSL_SAMPLE_NEAREST or GLSL_SAMPLE_LINEAR to the\n    // shader to add the sample3D() function that can be used instead of\n    // texture2D(). This function needs ``shape`` and ``tiles`` arguments\n    // which can be set via uniforms, using the ``u_shape`` and ``u_tiles``\n    // attributes of this object.\n    _pyfunc_instantiate(this, arguments);\n}\nTexture3DLike.prototype = Object.create(Texture2D.prototype);\nTexture3DLike.prototype._base_class = Texture2D.prototype;\nTexture3DLike.prototype._class_name = \"Texture3DLike\";\n\nTexture3DLike.prototype.GLSL_SAMPLE_NEAREST = \"\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don't let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float zindex = floor(texcoord.z * shape.z);\\n\\n            // Do a lookup in the 2D texture\\n            float u = (mod(zindex, ncols) + texcoord.x) / ncols;\\n            float v = (floor(zindex / ncols) + texcoord.y) / nrows;\\n\\n            return texture2D(tex, vec2(u,v));\\n        }\\n    \";\nTexture3DLike.prototype.GLSL_SAMPLE_LINEAR = \"\\n        vec4 sample3D(sampler2D tex, vec3 texcoord, vec3 shape, vec2 tiles) {\\n            shape.xyz = shape.zyx;  // silly row-major convention\\n            float nrows = tiles.y, ncols = tiles.x;\\n            // Don't let adjacent frames be interpolated into this one\\n            texcoord.x = min(texcoord.x * shape.x, shape.x - 0.5);\\n            texcoord.x = max(0.5, texcoord.x) / shape.x;\\n            texcoord.y = min(texcoord.y * shape.y, shape.y - 0.5);\\n            texcoord.y = max(0.5, texcoord.y) / shape.y;\\n\\n            float z = texcoord.z * shape.z;\\n            float zindex1 = floor(z);\\n            float u1 = (mod(zindex1, ncols) + texcoord.x) / ncols;\\n            float v1 = (floor(zindex1 / ncols) + texcoord.y) / nrows;\\n\\n            float zindex2 = zindex1 + 1.0;\\n            float u2 = (mod(zindex2, ncols) + texcoord.x) / ncols;\\n            float v2 = (floor(zindex2 / ncols) + texcoord.y) / nrows;\\n\\n            vec4 s1 = texture2D(tex, vec2(u1, v1));\\n            vec4 s2 = texture2D(tex, vec2(u2, v2));\\n\\n            return s1 * (zindex2 - z) + s2 * (z - zindex1);\\n        }\\n    \";\nTexture3DLike.prototype._get_tile_info = function (shape) {\n    var err_3, max_size, ncols, nrows;\n    max_size = this._gl.getParameter(this._gl.MAX_TEXTURE_SIZE);\n    nrows = Math.floor(max_size/shape[1]);\n    nrows = Math.min(nrows, shape[0]);\n    ncols = window.Math.ceil(shape[0] / nrows);\n    if (_pyfunc_truthy(_pyfunc_mult(ncols, shape[2]) > max_size)) {\n        err_3 = new Error('RuntimeError:' + (\"Cannot fit 3D data with shape \" + shape + \" onto simulated 2D texture.\")); err_3.name = \"RuntimeError\"; throw err_3;\n    }\n    return [nrows, ncols];\n};\n\nTexture3DLike.prototype.set_size = function (shape, format) {\n    var ncols, nrows, sim_shape, stub18_;\n    // Set the size of the 3D texture.\n    //\n    // Parameters\n    // ----------\n    // shape : tuple of ints\n    //     The shape of the data to upload\n    // format : GL enum\n    //     The format of the texture data. Can be LUMINANCE, LUMINANCE_ALPHA,\n    //     RGB, and RGBA.\n    stub18_ = this._get_tile_info(shape);\n    nrows = stub18_[0];ncols = stub18_[1];\n    sim_shape = [_pyfunc_mult(shape[1], nrows), _pyfunc_mult(shape[2], ncols)];\n    Texture3DLike.prototype._base_class.set_size.call(this, sim_shape, format);\n    this.u_shape = [shape[0], shape[1], shape[2]];\n    this.u_tiles = [ncols, nrows];\n    return null;\n};\n\nTexture3DLike.prototype.set_data = function (offset, shape, data) {\n    var Type, col, elements_per_tile, err_3, ncols, nrows, row, sim_shape, stub19_, stub20_, tile, z, zeros;\n    // Set the 3D texture data.\n    //\n    // Parameters\n    // ----------\n    // offset : tuple of ints\n    //     Offset in pixels for each dimension.\n    // shape : tuple of ints\n    //     The shape of the data to upload\n    // data : typed array\n    //     The actual pixel data. Can be of any type, but on the GPU the\n    //     dat is stored in 8 bit precision.\n    if (_pyfunc_equals(shape.length, 3)) {\n        shape = [shape[0], shape[1], shape[2], 1];\n    }\n    if ((!(_pyfunc_all(((function list_comprehenson () {var res = [];var i, iter0, i0;iter0 = offset;if ((typeof iter0 === \"object\") && (!Array.isArray(iter0))) {iter0 = Object.keys(iter0);}for (i0=0; i0<iter0.length; i0++) {i = iter0[i0];{res.push(_pyfunc_equals(i, 0));}}return res;}).apply(this)))))) {\n        err_3 = new Error('ValueError:' + \"Texture3DLike does not support nonzero offset (for now)\"); err_3.name = \"ValueError\"; throw err_3;\n    }\n    stub19_ = this._get_tile_info(shape);\n    nrows = stub19_[0];ncols = stub19_[1];\n    sim_shape = [_pyfunc_mult(shape[1], nrows), _pyfunc_mult(shape[2], ncols), shape[3]];\n    if (_pyfunc_equals(ncols, 1)) {\n        Texture3DLike.prototype._base_class.set_data.call(this, [0, 0], sim_shape, data);\n    } else {\n        Type = data.constructor;\n        zeros = new Type(_pyfunc_mult(_pyfunc_mult(sim_shape[0], sim_shape[1]), sim_shape[2]));\n        Texture3DLike.prototype._base_class.set_data.call(this, [0, 0], sim_shape, zeros);\n        for (z = 0; z < shape[0]; z += 1) {\n            stub20_ = [Math.floor(z/ncols), z % ncols];\n            row = stub20_[0];col = stub20_[1];\n            elements_per_tile = Math.floor(data.length/shape[0]);\n            tile = data.slice(_pyfunc_mult(z, elements_per_tile),_pyfunc_mult((z + 1), elements_per_tile));\n            Texture3DLike.prototype._base_class.set_data.call(this, [_pyfunc_mult(row, shape[1]), _pyfunc_mult(col, shape[2])], shape.slice(1), tile);\n        }\n    }\n    return null;\n};\n\nmodule.exports = {\n  \"Buffer\": Buffer,\n  \"GlooObject\": GlooObject,\n  \"IndexBuffer\": IndexBuffer,\n  \"Program\": Program,\n  \"Texture2D\": Texture2D,\n  \"Texture3DLike\": Texture3DLike,\n  \"VertexBuffer\": VertexBuffer,\n  \"check_error\": check_error,\n  \"console\": console\n};\n"]},"metadata":{},"sourceType":"script"}