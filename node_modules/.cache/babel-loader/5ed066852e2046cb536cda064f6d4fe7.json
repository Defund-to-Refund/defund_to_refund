{"ast":null,"code":"import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport { GlyphRenderer } from \"../../renderers/glyph_renderer\";\nimport { GraphRenderer } from \"../../renderers/graph_renderer\";\nimport { compute_renderers } from \"../util\";\nimport * as p from \"../../../core/properties\";\nimport { Keys } from \"../../../core/dom\";\nimport { SelectionGeometry } from \"../../../core/bokeh_events\";\nexport class SelectToolView extends GestureToolView {\n  get computed_renderers() {\n    const renderers = this.model.renderers;\n    const all_renderers = this.plot_model.renderers;\n    const names = this.model.names;\n    return compute_renderers(renderers, all_renderers, names);\n  }\n\n  _computed_renderers_by_data_source() {\n    const renderers_by_source = {};\n\n    for (const r of this.computed_renderers) {\n      let source_id;\n      if (r instanceof GlyphRenderer) source_id = r.data_source.id;else if (r instanceof GraphRenderer) source_id = r.node_renderer.data_source.id;else continue;\n      if (!(source_id in renderers_by_source)) renderers_by_source[source_id] = [];\n      renderers_by_source[source_id].push(r);\n    }\n\n    return renderers_by_source;\n  }\n\n  _keyup(ev) {\n    if (ev.keyCode == Keys.Esc) {\n      for (const r of this.computed_renderers) {\n        r.get_selection_manager().clear();\n      }\n\n      this.plot_view.request_render();\n    }\n  }\n\n  _select(geometry, final, append) {\n    const renderers_by_source = this._computed_renderers_by_data_source();\n\n    for (const id in renderers_by_source) {\n      const renderers = renderers_by_source[id];\n      const sm = renderers[0].get_selection_manager();\n      const r_views = [];\n\n      for (const r of renderers) {\n        if (r.id in this.plot_view.renderer_views) r_views.push(this.plot_view.renderer_views[r.id]);\n      }\n\n      sm.select(r_views, geometry, final, append);\n    } // XXX: messed up class structure\n\n\n    if (this.model.callback != null) this._emit_callback(geometry);\n\n    this._emit_selection_event(geometry, final);\n  }\n\n  _emit_selection_event(geometry, final = true) {\n    const {\n      frame\n    } = this.plot_view;\n    const xm = frame.xscales.default;\n    const ym = frame.yscales.default;\n    let geometry_data;\n\n    switch (geometry.type) {\n      case \"point\":\n        {\n          const {\n            sx,\n            sy\n          } = geometry;\n          const x = xm.invert(sx);\n          const y = ym.invert(sy);\n          geometry_data = Object.assign(Object.assign({}, geometry), {\n            x,\n            y\n          });\n          break;\n        }\n\n      case \"span\":\n        {\n          const {\n            sx,\n            sy\n          } = geometry;\n          const x = xm.invert(sx);\n          const y = ym.invert(sy);\n          geometry_data = Object.assign(Object.assign({}, geometry), {\n            x,\n            y\n          });\n          break;\n        }\n\n      case \"rect\":\n        {\n          const {\n            sx0,\n            sx1,\n            sy0,\n            sy1\n          } = geometry;\n          const [x0, x1] = xm.r_invert(sx0, sx1);\n          const [y0, y1] = ym.r_invert(sy0, sy1);\n          geometry_data = Object.assign(Object.assign({}, geometry), {\n            x0,\n            y0,\n            x1,\n            y1\n          });\n          break;\n        }\n\n      case \"poly\":\n        {\n          const {\n            sx,\n            sy\n          } = geometry;\n          const x = xm.v_invert(sx);\n          const y = ym.v_invert(sy);\n          geometry_data = Object.assign(Object.assign({}, geometry), {\n            x,\n            y\n          });\n          break;\n        }\n    }\n\n    this.plot_model.trigger_event(new SelectionGeometry(geometry_data, final));\n  }\n\n}\nSelectToolView.__name__ = \"SelectToolView\";\nexport class SelectTool extends GestureTool {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_SelectTool() {\n    this.define({\n      renderers: [p.Any, 'auto'],\n      names: [p.Array, []]\n    });\n  }\n\n}\nSelectTool.__name__ = \"SelectTool\";\nSelectTool.init_SelectTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/select_tool.js"],"names":["GestureTool","GestureToolView","GlyphRenderer","GraphRenderer","compute_renderers","p","Keys","SelectionGeometry","SelectToolView","computed_renderers","renderers","model","all_renderers","plot_model","names","_computed_renderers_by_data_source","renderers_by_source","r","source_id","data_source","id","node_renderer","push","_keyup","ev","keyCode","Esc","get_selection_manager","clear","plot_view","request_render","_select","geometry","final","append","sm","r_views","renderer_views","select","callback","_emit_callback","_emit_selection_event","frame","xm","xscales","default","ym","yscales","geometry_data","type","sx","sy","x","invert","y","Object","assign","sx0","sx1","sy0","sy1","x0","x1","r_invert","y0","y1","v_invert","trigger_event","__name__","SelectTool","constructor","attrs","init_SelectTool","define","Any","Array"],"mappings":"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","sourcesContent":["import { GestureTool, GestureToolView } from \"./gesture_tool\";\nimport { GlyphRenderer } from \"../../renderers/glyph_renderer\";\nimport { GraphRenderer } from \"../../renderers/graph_renderer\";\nimport { compute_renderers } from \"../util\";\nimport * as p from \"../../../core/properties\";\nimport { Keys } from \"../../../core/dom\";\nimport { SelectionGeometry } from \"../../../core/bokeh_events\";\nexport class SelectToolView extends GestureToolView {\n    get computed_renderers() {\n        const renderers = this.model.renderers;\n        const all_renderers = this.plot_model.renderers;\n        const names = this.model.names;\n        return compute_renderers(renderers, all_renderers, names);\n    }\n    _computed_renderers_by_data_source() {\n        const renderers_by_source = {};\n        for (const r of this.computed_renderers) {\n            let source_id;\n            if (r instanceof GlyphRenderer)\n                source_id = r.data_source.id;\n            else if (r instanceof GraphRenderer)\n                source_id = r.node_renderer.data_source.id;\n            else\n                continue;\n            if (!(source_id in renderers_by_source))\n                renderers_by_source[source_id] = [];\n            renderers_by_source[source_id].push(r);\n        }\n        return renderers_by_source;\n    }\n    _keyup(ev) {\n        if (ev.keyCode == Keys.Esc) {\n            for (const r of this.computed_renderers) {\n                r.get_selection_manager().clear();\n            }\n            this.plot_view.request_render();\n        }\n    }\n    _select(geometry, final, append) {\n        const renderers_by_source = this._computed_renderers_by_data_source();\n        for (const id in renderers_by_source) {\n            const renderers = renderers_by_source[id];\n            const sm = renderers[0].get_selection_manager();\n            const r_views = [];\n            for (const r of renderers) {\n                if (r.id in this.plot_view.renderer_views)\n                    r_views.push(this.plot_view.renderer_views[r.id]);\n            }\n            sm.select(r_views, geometry, final, append);\n        }\n        // XXX: messed up class structure\n        if (this.model.callback != null)\n            this._emit_callback(geometry);\n        this._emit_selection_event(geometry, final);\n    }\n    _emit_selection_event(geometry, final = true) {\n        const { frame } = this.plot_view;\n        const xm = frame.xscales.default;\n        const ym = frame.yscales.default;\n        let geometry_data;\n        switch (geometry.type) {\n            case \"point\": {\n                const { sx, sy } = geometry;\n                const x = xm.invert(sx);\n                const y = ym.invert(sy);\n                geometry_data = Object.assign(Object.assign({}, geometry), { x, y });\n                break;\n            }\n            case \"span\": {\n                const { sx, sy } = geometry;\n                const x = xm.invert(sx);\n                const y = ym.invert(sy);\n                geometry_data = Object.assign(Object.assign({}, geometry), { x, y });\n                break;\n            }\n            case \"rect\": {\n                const { sx0, sx1, sy0, sy1 } = geometry;\n                const [x0, x1] = xm.r_invert(sx0, sx1);\n                const [y0, y1] = ym.r_invert(sy0, sy1);\n                geometry_data = Object.assign(Object.assign({}, geometry), { x0, y0, x1, y1 });\n                break;\n            }\n            case \"poly\": {\n                const { sx, sy } = geometry;\n                const x = xm.v_invert(sx);\n                const y = ym.v_invert(sy);\n                geometry_data = Object.assign(Object.assign({}, geometry), { x, y });\n                break;\n            }\n        }\n        this.plot_model.trigger_event(new SelectionGeometry(geometry_data, final));\n    }\n}\nSelectToolView.__name__ = \"SelectToolView\";\nexport class SelectTool extends GestureTool {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_SelectTool() {\n        this.define({\n            renderers: [p.Any, 'auto'],\n            names: [p.Array, []],\n        });\n    }\n}\nSelectTool.__name__ = \"SelectTool\";\nSelectTool.init_SelectTool();\n//# sourceMappingURL=select_tool.js.map"]},"metadata":{},"sourceType":"module"}