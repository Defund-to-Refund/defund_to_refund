{"ast":null,"code":"import { Model } from \"../../model\";\nexport class SelectionPolicy extends Model {\n  do_selection(hit_test_result, source, final, append) {\n    if (hit_test_result === null) {\n      return false;\n    } else {\n      source.selected.update(hit_test_result, final, append);\n\n      source._select.emit();\n\n      return !source.selected.is_empty();\n    }\n  }\n\n}\nSelectionPolicy.__name__ = \"SelectionPolicy\";\nexport class IntersectRenderers extends SelectionPolicy {\n  hit_test(geometry, renderer_views) {\n    const hit_test_result_renderers = [];\n\n    for (const r of renderer_views) {\n      const result = r.hit_test(geometry);\n      if (result !== null) hit_test_result_renderers.push(result);\n    }\n\n    if (hit_test_result_renderers.length > 0) {\n      const hit_test_result = hit_test_result_renderers[0];\n\n      for (const hit_test_result_other of hit_test_result_renderers) {\n        hit_test_result.update_through_intersection(hit_test_result_other);\n      }\n\n      return hit_test_result;\n    } else {\n      return null;\n    }\n  }\n\n}\nIntersectRenderers.__name__ = \"IntersectRenderers\";\nexport class UnionRenderers extends SelectionPolicy {\n  hit_test(geometry, renderer_views) {\n    const hit_test_result_renderers = [];\n\n    for (const r of renderer_views) {\n      const result = r.hit_test(geometry);\n      if (result !== null) hit_test_result_renderers.push(result);\n    }\n\n    if (hit_test_result_renderers.length > 0) {\n      const hit_test_result = hit_test_result_renderers[0];\n\n      for (const hit_test_result_other of hit_test_result_renderers) {\n        hit_test_result.update_through_union(hit_test_result_other);\n      }\n\n      return hit_test_result;\n    } else {\n      return null;\n    }\n  }\n\n}\nUnionRenderers.__name__ = \"UnionRenderers\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/selections/interaction_policy.js"],"names":["Model","SelectionPolicy","do_selection","hit_test_result","source","final","append","selected","update","_select","emit","is_empty","__name__","IntersectRenderers","hit_test","geometry","renderer_views","hit_test_result_renderers","r","result","push","length","hit_test_result_other","update_through_intersection","UnionRenderers","update_through_union"],"mappings":"AAAA,SAASA,KAAT,QAAsB,aAAtB;AACA,OAAO,MAAMC,eAAN,SAA8BD,KAA9B,CAAoC;AACvCE,EAAAA,YAAY,CAACC,eAAD,EAAkBC,MAAlB,EAA0BC,KAA1B,EAAiCC,MAAjC,EAAyC;AACjD,QAAIH,eAAe,KAAK,IAAxB,EAA8B;AAC1B,aAAO,KAAP;AACH,KAFD,MAGK;AACDC,MAAAA,MAAM,CAACG,QAAP,CAAgBC,MAAhB,CAAuBL,eAAvB,EAAwCE,KAAxC,EAA+CC,MAA/C;;AACAF,MAAAA,MAAM,CAACK,OAAP,CAAeC,IAAf;;AACA,aAAO,CAACN,MAAM,CAACG,QAAP,CAAgBI,QAAhB,EAAR;AACH;AACJ;;AAVsC;AAY3CV,eAAe,CAACW,QAAhB,GAA2B,iBAA3B;AACA,OAAO,MAAMC,kBAAN,SAAiCZ,eAAjC,CAAiD;AACpDa,EAAAA,QAAQ,CAACC,QAAD,EAAWC,cAAX,EAA2B;AAC/B,UAAMC,yBAAyB,GAAG,EAAlC;;AACA,SAAK,MAAMC,CAAX,IAAgBF,cAAhB,EAAgC;AAC5B,YAAMG,MAAM,GAAGD,CAAC,CAACJ,QAAF,CAAWC,QAAX,CAAf;AACA,UAAII,MAAM,KAAK,IAAf,EACIF,yBAAyB,CAACG,IAA1B,CAA+BD,MAA/B;AACP;;AACD,QAAIF,yBAAyB,CAACI,MAA1B,GAAmC,CAAvC,EAA0C;AACtC,YAAMlB,eAAe,GAAGc,yBAAyB,CAAC,CAAD,CAAjD;;AACA,WAAK,MAAMK,qBAAX,IAAoCL,yBAApC,EAA+D;AAC3Dd,QAAAA,eAAe,CAACoB,2BAAhB,CAA4CD,qBAA5C;AACH;;AACD,aAAOnB,eAAP;AACH,KAND,MAOK;AACD,aAAO,IAAP;AACH;AACJ;;AAlBmD;AAoBxDU,kBAAkB,CAACD,QAAnB,GAA8B,oBAA9B;AACA,OAAO,MAAMY,cAAN,SAA6BvB,eAA7B,CAA6C;AAChDa,EAAAA,QAAQ,CAACC,QAAD,EAAWC,cAAX,EAA2B;AAC/B,UAAMC,yBAAyB,GAAG,EAAlC;;AACA,SAAK,MAAMC,CAAX,IAAgBF,cAAhB,EAAgC;AAC5B,YAAMG,MAAM,GAAGD,CAAC,CAACJ,QAAF,CAAWC,QAAX,CAAf;AACA,UAAII,MAAM,KAAK,IAAf,EACIF,yBAAyB,CAACG,IAA1B,CAA+BD,MAA/B;AACP;;AACD,QAAIF,yBAAyB,CAACI,MAA1B,GAAmC,CAAvC,EAA0C;AACtC,YAAMlB,eAAe,GAAGc,yBAAyB,CAAC,CAAD,CAAjD;;AACA,WAAK,MAAMK,qBAAX,IAAoCL,yBAApC,EAA+D;AAC3Dd,QAAAA,eAAe,CAACsB,oBAAhB,CAAqCH,qBAArC;AACH;;AACD,aAAOnB,eAAP;AACH,KAND,MAOK;AACD,aAAO,IAAP;AACH;AACJ;;AAlB+C;AAoBpDqB,cAAc,CAACZ,QAAf,GAA0B,gBAA1B","sourcesContent":["import { Model } from \"../../model\";\nexport class SelectionPolicy extends Model {\n    do_selection(hit_test_result, source, final, append) {\n        if (hit_test_result === null) {\n            return false;\n        }\n        else {\n            source.selected.update(hit_test_result, final, append);\n            source._select.emit();\n            return !source.selected.is_empty();\n        }\n    }\n}\nSelectionPolicy.__name__ = \"SelectionPolicy\";\nexport class IntersectRenderers extends SelectionPolicy {\n    hit_test(geometry, renderer_views) {\n        const hit_test_result_renderers = [];\n        for (const r of renderer_views) {\n            const result = r.hit_test(geometry);\n            if (result !== null)\n                hit_test_result_renderers.push(result);\n        }\n        if (hit_test_result_renderers.length > 0) {\n            const hit_test_result = hit_test_result_renderers[0];\n            for (const hit_test_result_other of hit_test_result_renderers) {\n                hit_test_result.update_through_intersection(hit_test_result_other);\n            }\n            return hit_test_result;\n        }\n        else {\n            return null;\n        }\n    }\n}\nIntersectRenderers.__name__ = \"IntersectRenderers\";\nexport class UnionRenderers extends SelectionPolicy {\n    hit_test(geometry, renderer_views) {\n        const hit_test_result_renderers = [];\n        for (const r of renderer_views) {\n            const result = r.hit_test(geometry);\n            if (result !== null)\n                hit_test_result_renderers.push(result);\n        }\n        if (hit_test_result_renderers.length > 0) {\n            const hit_test_result = hit_test_result_renderers[0];\n            for (const hit_test_result_other of hit_test_result_renderers) {\n                hit_test_result.update_through_union(hit_test_result_other);\n            }\n            return hit_test_result;\n        }\n        else {\n            return null;\n        }\n    }\n}\nUnionRenderers.__name__ = \"UnionRenderers\";\n//# sourceMappingURL=interaction_policy.js.map"]},"metadata":{},"sourceType":"module"}