{"ast":null,"code":"import * as p from \"./properties\";\nimport { extend } from \"./util/object\";\n\nfunction _gen_mixin(mixin, prefix) {\n  const result = {};\n\n  for (const name in mixin) {\n    const prop = mixin[name];\n    result[prefix + name] = prop;\n  }\n\n  return result;\n}\n\nconst _line_mixin = {\n  line_color: [p.ColorSpec, 'black'],\n  line_width: [p.NumberSpec, 1],\n  line_alpha: [p.NumberSpec, 1.0],\n  line_join: [p.LineJoin, 'bevel'],\n  line_cap: [p.LineCap, 'butt'],\n  line_dash: [p.Array, []],\n  line_dash_offset: [p.Number, 0]\n};\nexport const line = (prefix = \"\") => _gen_mixin(_line_mixin, prefix);\nconst _fill_mixin = {\n  fill_color: [p.ColorSpec, 'gray'],\n  fill_alpha: [p.NumberSpec, 1.0]\n};\nexport const fill = (prefix = \"\") => _gen_mixin(_fill_mixin, prefix);\nconst _hatch_mixin = {\n  hatch_color: [p.ColorSpec, 'black'],\n  hatch_alpha: [p.NumberSpec, 1.0],\n  hatch_scale: [p.NumberSpec, 12.0],\n  hatch_pattern: [p.StringSpec, null],\n  hatch_weight: [p.NumberSpec, 1.0],\n  hatch_extra: [p.Any, {}]\n};\nexport const hatch = (prefix = \"\") => _gen_mixin(_hatch_mixin, prefix);\nconst _text_mixin = {\n  text_font: [p.Font, 'helvetica'],\n  text_font_size: [p.FontSizeSpec, '16px'],\n  text_font_style: [p.FontStyle, 'normal'],\n  text_color: [p.ColorSpec, '#444444'],\n  text_alpha: [p.NumberSpec, 1.0],\n  text_align: [p.TextAlign, 'left'],\n  text_baseline: [p.TextBaseline, 'bottom'],\n  text_line_height: [p.Number, 1.2]\n};\nexport const text = (prefix = \"\") => _gen_mixin(_text_mixin, prefix);\nexport function create(configs) {\n  const result = {};\n\n  for (const config of configs) {\n    const [kind, prefix] = config.split(\":\");\n    let mixin;\n\n    switch (kind) {\n      case \"line\":\n        mixin = line;\n        break;\n\n      case \"fill\":\n        mixin = fill;\n        break;\n\n      case \"hatch\":\n        mixin = hatch;\n        break;\n\n      case \"text\":\n        mixin = text;\n        break;\n\n      default:\n        throw new Error(`Unknown property mixin kind '${kind}'`);\n    }\n\n    extend(result, mixin(prefix));\n  }\n\n  return result;\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/property_mixins.js"],"names":["p","extend","_gen_mixin","mixin","prefix","result","name","prop","_line_mixin","line_color","ColorSpec","line_width","NumberSpec","line_alpha","line_join","LineJoin","line_cap","LineCap","line_dash","Array","line_dash_offset","Number","line","_fill_mixin","fill_color","fill_alpha","fill","_hatch_mixin","hatch_color","hatch_alpha","hatch_scale","hatch_pattern","StringSpec","hatch_weight","hatch_extra","Any","hatch","_text_mixin","text_font","Font","text_font_size","FontSizeSpec","text_font_style","FontStyle","text_color","text_alpha","text_align","TextAlign","text_baseline","TextBaseline","text_line_height","text","create","configs","config","kind","split","Error"],"mappings":"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","sourcesContent":["import * as p from \"./properties\";\nimport { extend } from \"./util/object\";\nfunction _gen_mixin(mixin, prefix) {\n    const result = {};\n    for (const name in mixin) {\n        const prop = mixin[name];\n        result[prefix + name] = prop;\n    }\n    return result;\n}\nconst _line_mixin = {\n    line_color: [p.ColorSpec, 'black'],\n    line_width: [p.NumberSpec, 1],\n    line_alpha: [p.NumberSpec, 1.0],\n    line_join: [p.LineJoin, 'bevel'],\n    line_cap: [p.LineCap, 'butt'],\n    line_dash: [p.Array, []],\n    line_dash_offset: [p.Number, 0],\n};\nexport const line = (prefix = \"\") => _gen_mixin(_line_mixin, prefix);\nconst _fill_mixin = {\n    fill_color: [p.ColorSpec, 'gray'],\n    fill_alpha: [p.NumberSpec, 1.0],\n};\nexport const fill = (prefix = \"\") => _gen_mixin(_fill_mixin, prefix);\nconst _hatch_mixin = {\n    hatch_color: [p.ColorSpec, 'black'],\n    hatch_alpha: [p.NumberSpec, 1.0],\n    hatch_scale: [p.NumberSpec, 12.0],\n    hatch_pattern: [p.StringSpec, null],\n    hatch_weight: [p.NumberSpec, 1.0],\n    hatch_extra: [p.Any, {}],\n};\nexport const hatch = (prefix = \"\") => _gen_mixin(_hatch_mixin, prefix);\nconst _text_mixin = {\n    text_font: [p.Font, 'helvetica'],\n    text_font_size: [p.FontSizeSpec, '16px'],\n    text_font_style: [p.FontStyle, 'normal'],\n    text_color: [p.ColorSpec, '#444444'],\n    text_alpha: [p.NumberSpec, 1.0],\n    text_align: [p.TextAlign, 'left'],\n    text_baseline: [p.TextBaseline, 'bottom'],\n    text_line_height: [p.Number, 1.2],\n};\nexport const text = (prefix = \"\") => _gen_mixin(_text_mixin, prefix);\nexport function create(configs) {\n    const result = {};\n    for (const config of configs) {\n        const [kind, prefix] = config.split(\":\");\n        let mixin;\n        switch (kind) {\n            case \"line\":\n                mixin = line;\n                break;\n            case \"fill\":\n                mixin = fill;\n                break;\n            case \"hatch\":\n                mixin = hatch;\n                break;\n            case \"text\":\n                mixin = text;\n                break;\n            default:\n                throw new Error(`Unknown property mixin kind '${kind}'`);\n        }\n        extend(result, mixin(prefix));\n    }\n    return result;\n}\n//# sourceMappingURL=property_mixins.js.map"]},"metadata":{},"sourceType":"module"}