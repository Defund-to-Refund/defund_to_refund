{"ast":null,"code":"import { LayoutDOM, LayoutDOMView } from \"./layout_dom\";\nimport { Grid } from \"../../core/layout/grid\";\nimport * as p from \"../../core/properties\";\nexport class GridBoxView extends LayoutDOMView {\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.children.change, () => this.rebuild());\n  }\n\n  get child_models() {\n    return this.model.children.map(([child]) => child);\n  }\n\n  _update_layout() {\n    this.layout = new Grid();\n    this.layout.rows = this.model.rows;\n    this.layout.cols = this.model.cols;\n    this.layout.spacing = this.model.spacing;\n\n    for (const [child, row, col, row_span, col_span] of this.model.children) {\n      const child_view = this._child_views[child.id];\n      this.layout.items.push({\n        layout: child_view.layout,\n        row,\n        col,\n        row_span,\n        col_span\n      });\n    }\n\n    this.layout.set_sizing(this.box_sizing());\n  }\n\n}\nGridBoxView.__name__ = \"GridBoxView\";\nexport class GridBox extends LayoutDOM {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_GridBox() {\n    this.prototype.default_view = GridBoxView;\n    this.define({\n      children: [p.Array, []],\n      rows: [p.Any, \"auto\"],\n      cols: [p.Any, \"auto\"],\n      spacing: [p.Any, 0]\n    });\n  }\n\n}\nGridBox.__name__ = \"GridBox\";\nGridBox.init_GridBox();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/layouts/grid_box.js"],"names":["LayoutDOM","LayoutDOMView","Grid","p","GridBoxView","connect_signals","connect","model","properties","children","change","rebuild","child_models","map","child","_update_layout","layout","rows","cols","spacing","row","col","row_span","col_span","child_view","_child_views","id","items","push","set_sizing","box_sizing","__name__","GridBox","constructor","attrs","init_GridBox","prototype","default_view","define","Array","Any"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,aAApB,QAAyC,cAAzC;AACA,SAASC,IAAT,QAAqB,wBAArB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,OAAO,MAAMC,WAAN,SAA0BH,aAA1B,CAAwC;AAC3CI,EAAAA,eAAe,GAAG;AACd,UAAMA,eAAN;AACA,SAAKC,OAAL,CAAa,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,QAAtB,CAA+BC,MAA5C,EAAoD,MAAM,KAAKC,OAAL,EAA1D;AACH;;AACD,MAAIC,YAAJ,GAAmB;AACf,WAAO,KAAKL,KAAL,CAAWE,QAAX,CAAoBI,GAApB,CAAwB,CAAC,CAACC,KAAD,CAAD,KAAaA,KAArC,CAAP;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,SAAKC,MAAL,GAAc,IAAId,IAAJ,EAAd;AACA,SAAKc,MAAL,CAAYC,IAAZ,GAAmB,KAAKV,KAAL,CAAWU,IAA9B;AACA,SAAKD,MAAL,CAAYE,IAAZ,GAAmB,KAAKX,KAAL,CAAWW,IAA9B;AACA,SAAKF,MAAL,CAAYG,OAAZ,GAAsB,KAAKZ,KAAL,CAAWY,OAAjC;;AACA,SAAK,MAAM,CAACL,KAAD,EAAQM,GAAR,EAAaC,GAAb,EAAkBC,QAAlB,EAA4BC,QAA5B,CAAX,IAAoD,KAAKhB,KAAL,CAAWE,QAA/D,EAAyE;AACrE,YAAMe,UAAU,GAAG,KAAKC,YAAL,CAAkBX,KAAK,CAACY,EAAxB,CAAnB;AACA,WAAKV,MAAL,CAAYW,KAAZ,CAAkBC,IAAlB,CAAuB;AAAEZ,QAAAA,MAAM,EAAEQ,UAAU,CAACR,MAArB;AAA6BI,QAAAA,GAA7B;AAAkCC,QAAAA,GAAlC;AAAuCC,QAAAA,QAAvC;AAAiDC,QAAAA;AAAjD,OAAvB;AACH;;AACD,SAAKP,MAAL,CAAYa,UAAZ,CAAuB,KAAKC,UAAL,EAAvB;AACH;;AAlB0C;AAoB/C1B,WAAW,CAAC2B,QAAZ,GAAuB,aAAvB;AACA,OAAO,MAAMC,OAAN,SAAsBhC,SAAtB,CAAgC;AACnCiC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,YAAP,GAAsB;AAClB,SAAKC,SAAL,CAAeC,YAAf,GAA8BjC,WAA9B;AACA,SAAKkC,MAAL,CAAY;AACR7B,MAAAA,QAAQ,EAAE,CAACN,CAAC,CAACoC,KAAH,EAAU,EAAV,CADF;AAERtB,MAAAA,IAAI,EAAE,CAACd,CAAC,CAACqC,GAAH,EAAQ,MAAR,CAFE;AAGRtB,MAAAA,IAAI,EAAE,CAACf,CAAC,CAACqC,GAAH,EAAQ,MAAR,CAHE;AAIRrB,MAAAA,OAAO,EAAE,CAAChB,CAAC,CAACqC,GAAH,EAAQ,CAAR;AAJD,KAAZ;AAMH;;AAZkC;AAcvCR,OAAO,CAACD,QAAR,GAAmB,SAAnB;AACAC,OAAO,CAACG,YAAR","sourcesContent":["import { LayoutDOM, LayoutDOMView } from \"./layout_dom\";\nimport { Grid } from \"../../core/layout/grid\";\nimport * as p from \"../../core/properties\";\nexport class GridBoxView extends LayoutDOMView {\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.children.change, () => this.rebuild());\n    }\n    get child_models() {\n        return this.model.children.map(([child]) => child);\n    }\n    _update_layout() {\n        this.layout = new Grid();\n        this.layout.rows = this.model.rows;\n        this.layout.cols = this.model.cols;\n        this.layout.spacing = this.model.spacing;\n        for (const [child, row, col, row_span, col_span] of this.model.children) {\n            const child_view = this._child_views[child.id];\n            this.layout.items.push({ layout: child_view.layout, row, col, row_span, col_span });\n        }\n        this.layout.set_sizing(this.box_sizing());\n    }\n}\nGridBoxView.__name__ = \"GridBoxView\";\nexport class GridBox extends LayoutDOM {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_GridBox() {\n        this.prototype.default_view = GridBoxView;\n        this.define({\n            children: [p.Array, []],\n            rows: [p.Any, \"auto\"],\n            cols: [p.Any, \"auto\"],\n            spacing: [p.Any, 0],\n        });\n    }\n}\nGridBox.__name__ = \"GridBox\";\nGridBox.init_GridBox();\n//# sourceMappingURL=grid_box.js.map"]},"metadata":{},"sourceType":"module"}