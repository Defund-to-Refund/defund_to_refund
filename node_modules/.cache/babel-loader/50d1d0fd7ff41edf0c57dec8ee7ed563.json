{"ast":null,"code":"import { InspectTool, InspectToolView } from \"./inspect_tool\";\nimport { Span } from \"../../annotations/span\";\nimport * as p from \"../../../core/properties\";\nimport { values } from \"../../../core/util/object\";\nimport { bk_tool_icon_crosshair } from \"../../../styles/icons\";\nexport class CrosshairToolView extends InspectToolView {\n  _move(ev) {\n    if (!this.model.active) return;\n    const {\n      sx,\n      sy\n    } = ev;\n    if (!this.plot_view.frame.bbox.contains(sx, sy)) this._update_spans(null, null);else this._update_spans(sx, sy);\n  }\n\n  _move_exit(_e) {\n    this._update_spans(null, null);\n  }\n\n  _update_spans(x, y) {\n    const dims = this.model.dimensions;\n    if (dims == \"width\" || dims == \"both\") this.model.spans.width.computed_location = y;\n    if (dims == \"height\" || dims == \"both\") this.model.spans.height.computed_location = x;\n  }\n\n}\nCrosshairToolView.__name__ = \"CrosshairToolView\";\nexport class CrosshairTool extends InspectTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Crosshair\";\n    this.icon = bk_tool_icon_crosshair;\n  }\n\n  static init_CrosshairTool() {\n    this.prototype.default_view = CrosshairToolView;\n    this.define({\n      dimensions: [p.Dimensions, \"both\"],\n      line_color: [p.Color, 'black'],\n      line_width: [p.Number, 1],\n      line_alpha: [p.Number, 1.0]\n    });\n    this.internal({\n      location_units: [p.SpatialUnits, \"screen\"],\n      render_mode: [p.RenderMode, \"css\"],\n      spans: [p.Any]\n    });\n    this.register_alias(\"crosshair\", () => new CrosshairTool());\n  }\n\n  get tooltip() {\n    return this._get_dim_tooltip(\"Crosshair\", this.dimensions);\n  }\n\n  get synthetic_renderers() {\n    return values(this.spans);\n  }\n\n  initialize() {\n    super.initialize();\n    this.spans = {\n      width: new Span({\n        for_hover: true,\n        dimension: \"width\",\n        render_mode: this.render_mode,\n        location_units: this.location_units,\n        line_color: this.line_color,\n        line_width: this.line_width,\n        line_alpha: this.line_alpha\n      }),\n      height: new Span({\n        for_hover: true,\n        dimension: \"height\",\n        render_mode: this.render_mode,\n        location_units: this.location_units,\n        line_color: this.line_color,\n        line_width: this.line_width,\n        line_alpha: this.line_alpha\n      })\n    };\n  }\n\n}\nCrosshairTool.__name__ = \"CrosshairTool\";\nCrosshairTool.init_CrosshairTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/inspectors/crosshair_tool.js"],"names":["InspectTool","InspectToolView","Span","p","values","bk_tool_icon_crosshair","CrosshairToolView","_move","ev","model","active","sx","sy","plot_view","frame","bbox","contains","_update_spans","_move_exit","_e","x","y","dims","dimensions","spans","width","computed_location","height","__name__","CrosshairTool","constructor","attrs","tool_name","icon","init_CrosshairTool","prototype","default_view","define","Dimensions","line_color","Color","line_width","Number","line_alpha","internal","location_units","SpatialUnits","render_mode","RenderMode","Any","register_alias","tooltip","_get_dim_tooltip","synthetic_renderers","initialize","for_hover","dimension"],"mappings":"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","sourcesContent":["import { InspectTool, InspectToolView } from \"./inspect_tool\";\nimport { Span } from \"../../annotations/span\";\nimport * as p from \"../../../core/properties\";\nimport { values } from \"../../../core/util/object\";\nimport { bk_tool_icon_crosshair } from \"../../../styles/icons\";\nexport class CrosshairToolView extends InspectToolView {\n    _move(ev) {\n        if (!this.model.active)\n            return;\n        const { sx, sy } = ev;\n        if (!this.plot_view.frame.bbox.contains(sx, sy))\n            this._update_spans(null, null);\n        else\n            this._update_spans(sx, sy);\n    }\n    _move_exit(_e) {\n        this._update_spans(null, null);\n    }\n    _update_spans(x, y) {\n        const dims = this.model.dimensions;\n        if (dims == \"width\" || dims == \"both\")\n            this.model.spans.width.computed_location = y;\n        if (dims == \"height\" || dims == \"both\")\n            this.model.spans.height.computed_location = x;\n    }\n}\nCrosshairToolView.__name__ = \"CrosshairToolView\";\nexport class CrosshairTool extends InspectTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Crosshair\";\n        this.icon = bk_tool_icon_crosshair;\n    }\n    static init_CrosshairTool() {\n        this.prototype.default_view = CrosshairToolView;\n        this.define({\n            dimensions: [p.Dimensions, \"both\"],\n            line_color: [p.Color, 'black'],\n            line_width: [p.Number, 1],\n            line_alpha: [p.Number, 1.0],\n        });\n        this.internal({\n            location_units: [p.SpatialUnits, \"screen\"],\n            render_mode: [p.RenderMode, \"css\"],\n            spans: [p.Any],\n        });\n        this.register_alias(\"crosshair\", () => new CrosshairTool());\n    }\n    get tooltip() {\n        return this._get_dim_tooltip(\"Crosshair\", this.dimensions);\n    }\n    get synthetic_renderers() {\n        return values(this.spans);\n    }\n    initialize() {\n        super.initialize();\n        this.spans = {\n            width: new Span({\n                for_hover: true,\n                dimension: \"width\",\n                render_mode: this.render_mode,\n                location_units: this.location_units,\n                line_color: this.line_color,\n                line_width: this.line_width,\n                line_alpha: this.line_alpha,\n            }),\n            height: new Span({\n                for_hover: true,\n                dimension: \"height\",\n                render_mode: this.render_mode,\n                location_units: this.location_units,\n                line_color: this.line_color,\n                line_width: this.line_width,\n                line_alpha: this.line_alpha,\n            }),\n        };\n    }\n}\nCrosshairTool.__name__ = \"CrosshairTool\";\nCrosshairTool.init_CrosshairTool();\n//# sourceMappingURL=crosshair_tool.js.map"]},"metadata":{},"sourceType":"module"}