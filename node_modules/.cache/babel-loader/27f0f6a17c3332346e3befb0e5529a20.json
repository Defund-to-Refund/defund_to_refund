{"ast":null,"code":"import * as p from \"../../core/properties\";\nimport { View } from \"../../core/view\";\nimport { min, max } from \"../../core/util/array\";\nimport { Model } from \"../../model\";\nexport class ToolView extends View {\n  get plot_view() {\n    return this.parent;\n  }\n\n  get plot_model() {\n    return this.parent.model;\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.active.change, () => {\n      if (this.model.active) this.activate();else this.deactivate();\n    });\n  } // activate is triggered by toolbar ui actions\n\n\n  activate() {} // deactivate is triggered by toolbar ui actions\n\n\n  deactivate() {}\n\n}\nToolView.__name__ = \"ToolView\";\nexport class Tool extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Tool() {\n    this.prototype._known_aliases = new Map();\n    this.internal({\n      active: [p.Boolean, false]\n    });\n  }\n\n  get synthetic_renderers() {\n    return [];\n  } // utility function to return a tool name, modified\n  // by the active dimensions. Used by tools that have dimensions\n\n\n  _get_dim_tooltip(name, dims) {\n    switch (dims) {\n      case \"width\":\n        return `${name} (x-axis)`;\n\n      case \"height\":\n        return `${name} (y-axis)`;\n\n      case \"both\":\n        return name;\n    }\n  } // utility function to get limits along both dimensions, given\n  // optional dimensional constraints\n\n\n  _get_dim_limits([sx0, sy0], [sx1, sy1], frame, dims) {\n    const hr = frame.bbox.h_range;\n    let sxlim;\n\n    if (dims == 'width' || dims == 'both') {\n      sxlim = [min([sx0, sx1]), max([sx0, sx1])];\n      sxlim = [max([sxlim[0], hr.start]), min([sxlim[1], hr.end])];\n    } else sxlim = [hr.start, hr.end];\n\n    const vr = frame.bbox.v_range;\n    let sylim;\n\n    if (dims == 'height' || dims == 'both') {\n      sylim = [min([sy0, sy1]), max([sy0, sy1])];\n      sylim = [max([sylim[0], vr.start]), min([sylim[1], vr.end])];\n    } else sylim = [vr.start, vr.end];\n\n    return [sxlim, sylim];\n  }\n\n  static register_alias(name, fn) {\n    this.prototype._known_aliases.set(name, fn);\n  }\n\n  static from_string(name) {\n    const fn = this.prototype._known_aliases.get(name);\n\n    if (fn != null) return fn();else {\n      const names = [...this.prototype._known_aliases.keys()];\n      throw new Error(`unexpected tool name '${name}', possible tools are ${names.join(\", \")}`);\n    }\n  }\n\n}\nTool.__name__ = \"Tool\";\nTool.init_Tool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/tool.js"],"names":["p","View","min","max","Model","ToolView","plot_view","parent","plot_model","model","connect_signals","connect","properties","active","change","activate","deactivate","__name__","Tool","constructor","attrs","init_Tool","prototype","_known_aliases","Map","internal","Boolean","synthetic_renderers","_get_dim_tooltip","name","dims","_get_dim_limits","sx0","sy0","sx1","sy1","frame","hr","bbox","h_range","sxlim","start","end","vr","v_range","sylim","register_alias","fn","set","from_string","get","names","keys","Error","join"],"mappings":"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","sourcesContent":["import * as p from \"../../core/properties\";\nimport { View } from \"../../core/view\";\nimport { min, max } from \"../../core/util/array\";\nimport { Model } from \"../../model\";\nexport class ToolView extends View {\n    get plot_view() {\n        return this.parent;\n    }\n    get plot_model() {\n        return this.parent.model;\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.active.change, () => {\n            if (this.model.active)\n                this.activate();\n            else\n                this.deactivate();\n        });\n    }\n    // activate is triggered by toolbar ui actions\n    activate() { }\n    // deactivate is triggered by toolbar ui actions\n    deactivate() { }\n}\nToolView.__name__ = \"ToolView\";\nexport class Tool extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Tool() {\n        this.prototype._known_aliases = new Map();\n        this.internal({\n            active: [p.Boolean, false],\n        });\n    }\n    get synthetic_renderers() {\n        return [];\n    }\n    // utility function to return a tool name, modified\n    // by the active dimensions. Used by tools that have dimensions\n    _get_dim_tooltip(name, dims) {\n        switch (dims) {\n            case \"width\": return `${name} (x-axis)`;\n            case \"height\": return `${name} (y-axis)`;\n            case \"both\": return name;\n        }\n    }\n    // utility function to get limits along both dimensions, given\n    // optional dimensional constraints\n    _get_dim_limits([sx0, sy0], [sx1, sy1], frame, dims) {\n        const hr = frame.bbox.h_range;\n        let sxlim;\n        if (dims == 'width' || dims == 'both') {\n            sxlim = [min([sx0, sx1]), max([sx0, sx1])];\n            sxlim = [max([sxlim[0], hr.start]), min([sxlim[1], hr.end])];\n        }\n        else\n            sxlim = [hr.start, hr.end];\n        const vr = frame.bbox.v_range;\n        let sylim;\n        if (dims == 'height' || dims == 'both') {\n            sylim = [min([sy0, sy1]), max([sy0, sy1])];\n            sylim = [max([sylim[0], vr.start]), min([sylim[1], vr.end])];\n        }\n        else\n            sylim = [vr.start, vr.end];\n        return [sxlim, sylim];\n    }\n    static register_alias(name, fn) {\n        this.prototype._known_aliases.set(name, fn);\n    }\n    static from_string(name) {\n        const fn = this.prototype._known_aliases.get(name);\n        if (fn != null)\n            return fn();\n        else {\n            const names = [...this.prototype._known_aliases.keys()];\n            throw new Error(`unexpected tool name '${name}', possible tools are ${names.join(\", \")}`);\n        }\n    }\n}\nTool.__name__ = \"Tool\";\nTool.init_Tool();\n//# sourceMappingURL=tool.js.map"]},"metadata":{},"sourceType":"module"}