{"ast":null,"code":"// This is based on https://github.com/pimterry/loglevel\nimport { isString } from \"./util/types\";\nconst _loggers = {};\nexport class LogLevel {\n  constructor(name, level) {\n    this.name = name;\n    this.level = level;\n  }\n\n}\nLogLevel.__name__ = \"LogLevel\";\nexport class Logger {\n  constructor(name, level = Logger.INFO) {\n    this._name = name;\n    this.set_level(level);\n  }\n\n  static get levels() {\n    return Object.keys(Logger.log_levels);\n  }\n\n  static get(name, level = Logger.INFO) {\n    if (name.length > 0) {\n      let logger = _loggers[name];\n      if (logger == null) _loggers[name] = logger = new Logger(name, level);\n      return logger;\n    } else throw new TypeError(\"Logger.get() expects a non-empty string name and an optional log-level\");\n  }\n\n  get level() {\n    return this.get_level();\n  }\n\n  get_level() {\n    return this._log_level;\n  }\n\n  set_level(log_level) {\n    if (log_level instanceof LogLevel) this._log_level = log_level;else if (isString(log_level) && Logger.log_levels[log_level] != null) this._log_level = Logger.log_levels[log_level];else throw new Error(\"Logger.set_level() expects a log-level object or a string name of a log-level\");\n    const logger_name = `[${this._name}]`;\n\n    for (const name in Logger.log_levels) {\n      const log_level = Logger.log_levels[name];\n      if (log_level.level < this._log_level.level || this._log_level.level === Logger.OFF.level) this[name] = function () {};else this[name] = _method_factory(name, logger_name);\n    }\n  }\n\n  trace(..._args) {}\n\n  debug(..._args) {}\n\n  info(..._args) {}\n\n  warn(..._args) {}\n\n  error(..._args) {}\n\n}\nLogger.__name__ = \"Logger\";\nLogger.TRACE = new LogLevel(\"trace\", 0);\nLogger.DEBUG = new LogLevel(\"debug\", 1);\nLogger.INFO = new LogLevel(\"info\", 2);\nLogger.WARN = new LogLevel(\"warn\", 6);\nLogger.ERROR = new LogLevel(\"error\", 7);\nLogger.FATAL = new LogLevel(\"fatal\", 8);\nLogger.OFF = new LogLevel(\"off\", 9);\nLogger.log_levels = {\n  trace: Logger.TRACE,\n  debug: Logger.DEBUG,\n  info: Logger.INFO,\n  warn: Logger.WARN,\n  error: Logger.ERROR,\n  fatal: Logger.FATAL,\n  off: Logger.OFF\n};\n\nfunction _method_factory(method_name, logger_name) {\n  if (console[method_name] != null) return console[method_name].bind(console, logger_name);else if (console.log != null) return console.log.bind(console, logger_name);else return function () {};\n}\n\nexport const logger = Logger.get(\"bokeh\");\nexport function set_log_level(level) {\n  const previous_level = logger.level;\n\n  if (isString(level) && Logger.log_levels[level] == null) {\n    console.log(`[bokeh] unrecognized logging level '${level}' passed to Bokeh.set_log_level(), ignoring`);\n    console.log(`[bokeh] valid log levels are: ${Logger.levels.join(', ')}`);\n  } else {\n    console.log(`[bokeh] setting log level to: '${isString(level) ? level : level.level}'`);\n    logger.set_level(level);\n  }\n\n  return previous_level;\n}\nexport function with_log_level(level, fn) {\n  const original = set_log_level(level);\n\n  try {\n    fn();\n  } finally {\n    set_log_level(original);\n  }\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/logging.js"],"names":["isString","_loggers","LogLevel","constructor","name","level","__name__","Logger","INFO","_name","set_level","levels","Object","keys","log_levels","get","length","logger","TypeError","get_level","_log_level","log_level","Error","logger_name","OFF","_method_factory","trace","_args","debug","info","warn","error","TRACE","DEBUG","WARN","ERROR","FATAL","fatal","off","method_name","console","bind","log","set_log_level","previous_level","join","with_log_level","fn","original"],"mappings":"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","sourcesContent":["// This is based on https://github.com/pimterry/loglevel\nimport { isString } from \"./util/types\";\nconst _loggers = {};\nexport class LogLevel {\n    constructor(name, level) {\n        this.name = name;\n        this.level = level;\n    }\n}\nLogLevel.__name__ = \"LogLevel\";\nexport class Logger {\n    constructor(name, level = Logger.INFO) {\n        this._name = name;\n        this.set_level(level);\n    }\n    static get levels() {\n        return Object.keys(Logger.log_levels);\n    }\n    static get(name, level = Logger.INFO) {\n        if (name.length > 0) {\n            let logger = _loggers[name];\n            if (logger == null)\n                _loggers[name] = logger = new Logger(name, level);\n            return logger;\n        }\n        else\n            throw new TypeError(\"Logger.get() expects a non-empty string name and an optional log-level\");\n    }\n    get level() {\n        return this.get_level();\n    }\n    get_level() {\n        return this._log_level;\n    }\n    set_level(log_level) {\n        if (log_level instanceof LogLevel)\n            this._log_level = log_level;\n        else if (isString(log_level) && Logger.log_levels[log_level] != null)\n            this._log_level = Logger.log_levels[log_level];\n        else\n            throw new Error(\"Logger.set_level() expects a log-level object or a string name of a log-level\");\n        const logger_name = `[${this._name}]`;\n        for (const name in Logger.log_levels) {\n            const log_level = Logger.log_levels[name];\n            if (log_level.level < this._log_level.level || this._log_level.level === Logger.OFF.level)\n                this[name] = function () { };\n            else\n                this[name] = _method_factory(name, logger_name);\n        }\n    }\n    trace(..._args) { }\n    debug(..._args) { }\n    info(..._args) { }\n    warn(..._args) { }\n    error(..._args) { }\n}\nLogger.__name__ = \"Logger\";\nLogger.TRACE = new LogLevel(\"trace\", 0);\nLogger.DEBUG = new LogLevel(\"debug\", 1);\nLogger.INFO = new LogLevel(\"info\", 2);\nLogger.WARN = new LogLevel(\"warn\", 6);\nLogger.ERROR = new LogLevel(\"error\", 7);\nLogger.FATAL = new LogLevel(\"fatal\", 8);\nLogger.OFF = new LogLevel(\"off\", 9);\nLogger.log_levels = {\n    trace: Logger.TRACE,\n    debug: Logger.DEBUG,\n    info: Logger.INFO,\n    warn: Logger.WARN,\n    error: Logger.ERROR,\n    fatal: Logger.FATAL,\n    off: Logger.OFF,\n};\nfunction _method_factory(method_name, logger_name) {\n    if (console[method_name] != null)\n        return console[method_name].bind(console, logger_name);\n    else if (console.log != null)\n        return console.log.bind(console, logger_name);\n    else\n        return function () { };\n}\nexport const logger = Logger.get(\"bokeh\");\nexport function set_log_level(level) {\n    const previous_level = logger.level;\n    if (isString(level) && Logger.log_levels[level] == null) {\n        console.log(`[bokeh] unrecognized logging level '${level}' passed to Bokeh.set_log_level(), ignoring`);\n        console.log(`[bokeh] valid log levels are: ${Logger.levels.join(', ')}`);\n    }\n    else {\n        console.log(`[bokeh] setting log level to: '${isString(level) ? level : level.level}'`);\n        logger.set_level(level);\n    }\n    return previous_level;\n}\nexport function with_log_level(level, fn) {\n    const original = set_log_level(level);\n    try {\n        fn();\n    }\n    finally {\n        set_log_level(original);\n    }\n}\n//# sourceMappingURL=logging.js.map"]},"metadata":{},"sourceType":"module"}