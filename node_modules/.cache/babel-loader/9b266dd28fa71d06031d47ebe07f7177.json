{"ast":null,"code":"import { Row, Column, GridBox, ToolbarBox, ProxyToolbar, Plot } from \"./models\";\n\nfunction or_else(value, default_value) {\n  if (value === undefined) return default_value;else return value;\n}\n\nexport function gridplot(children, opts = {}) {\n  const toolbar_location = or_else(opts.toolbar_location, \"above\");\n  const merge_tools = or_else(opts.merge_tools, true);\n  const sizing_mode = or_else(opts.sizing_mode, null);\n  const toolbars = [];\n  const items = [];\n\n  for (let y = 0; y < children.length; y++) {\n    const row = children[y];\n\n    for (let x = 0; x < row.length; x++) {\n      const item = row[x];\n      if (item == null) continue;else {\n        if (item instanceof Plot) {\n          // XXX: semantics differ\n          if (merge_tools) {\n            toolbars.push(item.toolbar);\n            item.toolbar_location = null;\n          }\n\n          if (opts.plot_width != null) item.plot_width = opts.plot_width;\n          if (opts.plot_height != null) item.plot_height = opts.plot_height;\n        }\n\n        items.push([item, y, x]);\n      }\n    }\n  }\n\n  if (!merge_tools || toolbar_location == null) return new GridBox({\n    children: items,\n    sizing_mode\n  });\n  const grid = new GridBox({\n    children: items,\n    sizing_mode\n  });\n  const tools = [];\n\n  for (const toolbar of toolbars) {\n    tools.push(...toolbar.tools);\n  }\n\n  const toolbar = new ToolbarBox({\n    toolbar: new ProxyToolbar({\n      toolbars,\n      tools\n    }),\n    toolbar_location\n  });\n\n  switch (toolbar_location) {\n    case \"above\":\n      return new Column({\n        children: [toolbar, grid],\n        sizing_mode\n      });\n\n    case \"below\":\n      return new Column({\n        children: [grid, toolbar],\n        sizing_mode\n      });\n\n    case \"left\":\n      return new Row({\n        children: [toolbar, grid],\n        sizing_mode\n      });\n\n    case \"right\":\n      return new Row({\n        children: [grid, toolbar],\n        sizing_mode\n      });\n\n    default:\n      throw new Error(\"unexpected\");\n  }\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/api/gridplot.js"],"names":["Row","Column","GridBox","ToolbarBox","ProxyToolbar","Plot","or_else","value","default_value","undefined","gridplot","children","opts","toolbar_location","merge_tools","sizing_mode","toolbars","items","y","length","row","x","item","push","toolbar","plot_width","plot_height","grid","tools","Error"],"mappings":"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","sourcesContent":["import { Row, Column, GridBox, ToolbarBox, ProxyToolbar, Plot } from \"./models\";\nfunction or_else(value, default_value) {\n    if (value === undefined)\n        return default_value;\n    else\n        return value;\n}\nexport function gridplot(children, opts = {}) {\n    const toolbar_location = or_else(opts.toolbar_location, \"above\");\n    const merge_tools = or_else(opts.merge_tools, true);\n    const sizing_mode = or_else(opts.sizing_mode, null);\n    const toolbars = [];\n    const items = [];\n    for (let y = 0; y < children.length; y++) {\n        const row = children[y];\n        for (let x = 0; x < row.length; x++) {\n            const item = row[x];\n            if (item == null)\n                continue;\n            else {\n                if (item instanceof Plot) { // XXX: semantics differ\n                    if (merge_tools) {\n                        toolbars.push(item.toolbar);\n                        item.toolbar_location = null;\n                    }\n                    if (opts.plot_width != null)\n                        item.plot_width = opts.plot_width;\n                    if (opts.plot_height != null)\n                        item.plot_height = opts.plot_height;\n                }\n                items.push([item, y, x]);\n            }\n        }\n    }\n    if (!merge_tools || toolbar_location == null)\n        return new GridBox({ children: items, sizing_mode });\n    const grid = new GridBox({ children: items, sizing_mode });\n    const tools = [];\n    for (const toolbar of toolbars) {\n        tools.push(...toolbar.tools);\n    }\n    const toolbar = new ToolbarBox({\n        toolbar: new ProxyToolbar({ toolbars, tools }),\n        toolbar_location,\n    });\n    switch (toolbar_location) {\n        case \"above\":\n            return new Column({ children: [toolbar, grid], sizing_mode });\n        case \"below\":\n            return new Column({ children: [grid, toolbar], sizing_mode });\n        case \"left\":\n            return new Row({ children: [toolbar, grid], sizing_mode });\n        case \"right\":\n            return new Row({ children: [grid, toolbar], sizing_mode });\n        default:\n            throw new Error(\"unexpected\");\n    }\n}\n//# sourceMappingURL=gridplot.js.map"]},"metadata":{},"sourceType":"module"}