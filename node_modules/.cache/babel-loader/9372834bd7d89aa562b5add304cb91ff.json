{"ast":null,"code":"import { ContinuousTicker } from \"./continuous_ticker\";\nimport * as p from \"../../core/properties\";\nimport { argmin, sorted_index } from \"../../core/util/array\";\nimport { isEmpty } from \"../../core/util/object\";\nexport class CompositeTicker extends ContinuousTicker {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_CompositeTicker() {\n    this.define({\n      tickers: [p.Array, []]\n    });\n  } // The tickers should be in order of increasing interval size; specifically,\n  // if S comes before T, then it should be the case that\n  // S.get_max_interval() < T.get_min_interval().\n  // FIXME Enforce this automatically.\n\n\n  get min_intervals() {\n    return this.tickers.map(ticker => ticker.get_min_interval());\n  }\n\n  get max_intervals() {\n    return this.tickers.map(ticker => ticker.get_max_interval());\n  }\n\n  get min_interval() {\n    return this.min_intervals[0];\n  }\n\n  get max_interval() {\n    return this.max_intervals[0];\n  }\n\n  get_best_ticker(data_low, data_high, desired_n_ticks) {\n    const data_range = data_high - data_low;\n    const ideal_interval = this.get_ideal_interval(data_low, data_high, desired_n_ticks);\n    const ticker_ndxs = [sorted_index(this.min_intervals, ideal_interval) - 1, sorted_index(this.max_intervals, ideal_interval)];\n    const intervals = [this.min_intervals[ticker_ndxs[0]], this.max_intervals[ticker_ndxs[1]]];\n    const errors = intervals.map(interval => {\n      return Math.abs(desired_n_ticks - data_range / interval);\n    });\n    let best_ticker;\n\n    if (isEmpty(errors.filter(e => !isNaN(e)))) {\n      // this can happen if the data isn't loaded yet, we just default to the first scale\n      best_ticker = this.tickers[0];\n    } else {\n      const best_index = argmin(errors);\n      const best_ticker_ndx = ticker_ndxs[best_index];\n      best_ticker = this.tickers[best_ticker_ndx];\n    }\n\n    return best_ticker;\n  }\n\n  get_interval(data_low, data_high, desired_n_ticks) {\n    const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n    return best_ticker.get_interval(data_low, data_high, desired_n_ticks);\n  }\n\n  get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks) {\n    const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n    return best_ticker.get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks);\n  }\n\n}\nCompositeTicker.__name__ = \"CompositeTicker\";\nCompositeTicker.init_CompositeTicker();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tickers/composite_ticker.js"],"names":["ContinuousTicker","p","argmin","sorted_index","isEmpty","CompositeTicker","constructor","attrs","init_CompositeTicker","define","tickers","Array","min_intervals","map","ticker","get_min_interval","max_intervals","get_max_interval","min_interval","max_interval","get_best_ticker","data_low","data_high","desired_n_ticks","data_range","ideal_interval","get_ideal_interval","ticker_ndxs","intervals","errors","interval","Math","abs","best_ticker","filter","e","isNaN","best_index","best_ticker_ndx","get_interval","get_ticks_no_defaults","cross_loc","__name__"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,qBAAjC;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,uBAArC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAO,MAAMC,eAAN,SAA8BL,gBAA9B,CAA+C;AAClDM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,oBAAP,GAA8B;AAC1B,SAAKC,MAAL,CAAY;AACRC,MAAAA,OAAO,EAAE,CAACT,CAAC,CAACU,KAAH,EAAU,EAAV;AADD,KAAZ;AAGH,GARiD,CASlD;AACA;AACA;AACA;;;AACA,MAAIC,aAAJ,GAAoB;AAChB,WAAO,KAAKF,OAAL,CAAaG,GAAb,CAAkBC,MAAD,IAAYA,MAAM,CAACC,gBAAP,EAA7B,CAAP;AACH;;AACD,MAAIC,aAAJ,GAAoB;AAChB,WAAO,KAAKN,OAAL,CAAaG,GAAb,CAAkBC,MAAD,IAAYA,MAAM,CAACG,gBAAP,EAA7B,CAAP;AACH;;AACD,MAAIC,YAAJ,GAAmB;AACf,WAAO,KAAKN,aAAL,CAAmB,CAAnB,CAAP;AACH;;AACD,MAAIO,YAAJ,GAAmB;AACf,WAAO,KAAKH,aAAL,CAAmB,CAAnB,CAAP;AACH;;AACDI,EAAAA,eAAe,CAACC,QAAD,EAAWC,SAAX,EAAsBC,eAAtB,EAAuC;AAClD,UAAMC,UAAU,GAAGF,SAAS,GAAGD,QAA/B;AACA,UAAMI,cAAc,GAAG,KAAKC,kBAAL,CAAwBL,QAAxB,EAAkCC,SAAlC,EAA6CC,eAA7C,CAAvB;AACA,UAAMI,WAAW,GAAG,CAChBxB,YAAY,CAAC,KAAKS,aAAN,EAAqBa,cAArB,CAAZ,GAAmD,CADnC,EAEhBtB,YAAY,CAAC,KAAKa,aAAN,EAAqBS,cAArB,CAFI,CAApB;AAIA,UAAMG,SAAS,GAAG,CACd,KAAKhB,aAAL,CAAmBe,WAAW,CAAC,CAAD,CAA9B,CADc,EAEd,KAAKX,aAAL,CAAmBW,WAAW,CAAC,CAAD,CAA9B,CAFc,CAAlB;AAIA,UAAME,MAAM,GAAGD,SAAS,CAACf,GAAV,CAAeiB,QAAD,IAAc;AACvC,aAAOC,IAAI,CAACC,GAAL,CAAST,eAAe,GAAIC,UAAU,GAAGM,QAAzC,CAAP;AACH,KAFc,CAAf;AAGA,QAAIG,WAAJ;;AACA,QAAI7B,OAAO,CAACyB,MAAM,CAACK,MAAP,CAAeC,CAAD,IAAO,CAACC,KAAK,CAACD,CAAD,CAA3B,CAAD,CAAX,EAA8C;AAC1C;AACAF,MAAAA,WAAW,GAAG,KAAKvB,OAAL,CAAa,CAAb,CAAd;AACH,KAHD,MAIK;AACD,YAAM2B,UAAU,GAAGnC,MAAM,CAAC2B,MAAD,CAAzB;AACA,YAAMS,eAAe,GAAGX,WAAW,CAACU,UAAD,CAAnC;AACAJ,MAAAA,WAAW,GAAG,KAAKvB,OAAL,CAAa4B,eAAb,CAAd;AACH;;AACD,WAAOL,WAAP;AACH;;AACDM,EAAAA,YAAY,CAAClB,QAAD,EAAWC,SAAX,EAAsBC,eAAtB,EAAuC;AAC/C,UAAMU,WAAW,GAAG,KAAKb,eAAL,CAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,eAA1C,CAApB;AACA,WAAOU,WAAW,CAACM,YAAZ,CAAyBlB,QAAzB,EAAmCC,SAAnC,EAA8CC,eAA9C,CAAP;AACH;;AACDiB,EAAAA,qBAAqB,CAACnB,QAAD,EAAWC,SAAX,EAAsBmB,SAAtB,EAAiClB,eAAjC,EAAkD;AACnE,UAAMU,WAAW,GAAG,KAAKb,eAAL,CAAqBC,QAArB,EAA+BC,SAA/B,EAA0CC,eAA1C,CAApB;AACA,WAAOU,WAAW,CAACO,qBAAZ,CAAkCnB,QAAlC,EAA4CC,SAA5C,EAAuDmB,SAAvD,EAAkElB,eAAlE,CAAP;AACH;;AA1DiD;AA4DtDlB,eAAe,CAACqC,QAAhB,GAA2B,iBAA3B;AACArC,eAAe,CAACG,oBAAhB","sourcesContent":["import { ContinuousTicker } from \"./continuous_ticker\";\nimport * as p from \"../../core/properties\";\nimport { argmin, sorted_index } from \"../../core/util/array\";\nimport { isEmpty } from \"../../core/util/object\";\nexport class CompositeTicker extends ContinuousTicker {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_CompositeTicker() {\n        this.define({\n            tickers: [p.Array, []],\n        });\n    }\n    // The tickers should be in order of increasing interval size; specifically,\n    // if S comes before T, then it should be the case that\n    // S.get_max_interval() < T.get_min_interval().\n    // FIXME Enforce this automatically.\n    get min_intervals() {\n        return this.tickers.map((ticker) => ticker.get_min_interval());\n    }\n    get max_intervals() {\n        return this.tickers.map((ticker) => ticker.get_max_interval());\n    }\n    get min_interval() {\n        return this.min_intervals[0];\n    }\n    get max_interval() {\n        return this.max_intervals[0];\n    }\n    get_best_ticker(data_low, data_high, desired_n_ticks) {\n        const data_range = data_high - data_low;\n        const ideal_interval = this.get_ideal_interval(data_low, data_high, desired_n_ticks);\n        const ticker_ndxs = [\n            sorted_index(this.min_intervals, ideal_interval) - 1,\n            sorted_index(this.max_intervals, ideal_interval),\n        ];\n        const intervals = [\n            this.min_intervals[ticker_ndxs[0]],\n            this.max_intervals[ticker_ndxs[1]],\n        ];\n        const errors = intervals.map((interval) => {\n            return Math.abs(desired_n_ticks - (data_range / interval));\n        });\n        let best_ticker;\n        if (isEmpty(errors.filter((e) => !isNaN(e)))) {\n            // this can happen if the data isn't loaded yet, we just default to the first scale\n            best_ticker = this.tickers[0];\n        }\n        else {\n            const best_index = argmin(errors);\n            const best_ticker_ndx = ticker_ndxs[best_index];\n            best_ticker = this.tickers[best_ticker_ndx];\n        }\n        return best_ticker;\n    }\n    get_interval(data_low, data_high, desired_n_ticks) {\n        const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n        return best_ticker.get_interval(data_low, data_high, desired_n_ticks);\n    }\n    get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks) {\n        const best_ticker = this.get_best_ticker(data_low, data_high, desired_n_ticks);\n        return best_ticker.get_ticks_no_defaults(data_low, data_high, cross_loc, desired_n_ticks);\n    }\n}\nCompositeTicker.__name__ = \"CompositeTicker\";\nCompositeTicker.init_CompositeTicker();\n//# sourceMappingURL=composite_ticker.js.map"]},"metadata":{},"sourceType":"module"}