{"ast":null,"code":"import { logger } from \"../logging\";\nexport class ImageLoader {\n  constructor(url, options = {}) {\n    this._image = new Image();\n    this._finished = false;\n    const {\n      attempts = 1,\n      timeout = 1\n    } = options;\n    this.promise = new Promise((resolve, _reject) => {\n      this._image.crossOrigin = \"anonymous\";\n      let retries = 0;\n\n      this._image.onerror = () => {\n        if (++retries == attempts) {\n          const message = `unable to load ${url} image after ${attempts} attempts`;\n          logger.warn(message);\n\n          if (this._image.crossOrigin != null) {\n            logger.warn(`attempting to load ${url} without a cross origin policy`);\n            this._image.crossOrigin = null;\n            retries = 0;\n          } else {\n            if (options.failed != null) options.failed();\n            return; // XXX reject(new Error(message))\n          }\n        }\n\n        setTimeout(() => this._image.src = url, timeout);\n      };\n\n      this._image.onload = () => {\n        this._finished = true;\n        if (options.loaded != null) options.loaded(this._image);\n        resolve(this._image);\n      };\n\n      this._image.src = url;\n    });\n  }\n\n  get finished() {\n    return this._finished;\n  }\n\n  get image() {\n    return this._image;\n  }\n\n}\nImageLoader.__name__ = \"ImageLoader\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/util/image.js"],"names":["logger","ImageLoader","constructor","url","options","_image","Image","_finished","attempts","timeout","promise","Promise","resolve","_reject","crossOrigin","retries","onerror","message","warn","failed","setTimeout","src","onload","loaded","finished","image","__name__"],"mappings":"AAAA,SAASA,MAAT,QAAuB,YAAvB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,GAAD,EAAMC,OAAO,GAAG,EAAhB,EAAoB;AAC3B,SAAKC,MAAL,GAAc,IAAIC,KAAJ,EAAd;AACA,SAAKC,SAAL,GAAiB,KAAjB;AACA,UAAM;AAAEC,MAAAA,QAAQ,GAAG,CAAb;AAAgBC,MAAAA,OAAO,GAAG;AAA1B,QAAgCL,OAAtC;AACA,SAAKM,OAAL,GAAe,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,OAAV,KAAsB;AAC7C,WAAKR,MAAL,CAAYS,WAAZ,GAA0B,WAA1B;AACA,UAAIC,OAAO,GAAG,CAAd;;AACA,WAAKV,MAAL,CAAYW,OAAZ,GAAsB,MAAM;AACxB,YAAI,EAAED,OAAF,IAAaP,QAAjB,EAA2B;AACvB,gBAAMS,OAAO,GAAI,kBAAiBd,GAAI,gBAAeK,QAAS,WAA9D;AACAR,UAAAA,MAAM,CAACkB,IAAP,CAAYD,OAAZ;;AACA,cAAI,KAAKZ,MAAL,CAAYS,WAAZ,IAA2B,IAA/B,EAAqC;AACjCd,YAAAA,MAAM,CAACkB,IAAP,CAAa,sBAAqBf,GAAI,gCAAtC;AACA,iBAAKE,MAAL,CAAYS,WAAZ,GAA0B,IAA1B;AACAC,YAAAA,OAAO,GAAG,CAAV;AACH,WAJD,MAKK;AACD,gBAAIX,OAAO,CAACe,MAAR,IAAkB,IAAtB,EACIf,OAAO,CAACe,MAAR;AACJ,mBAHC,CAGO;AACX;AACJ;;AACDC,QAAAA,UAAU,CAAC,MAAM,KAAKf,MAAL,CAAYgB,GAAZ,GAAkBlB,GAAzB,EAA8BM,OAA9B,CAAV;AACH,OAhBD;;AAiBA,WAAKJ,MAAL,CAAYiB,MAAZ,GAAqB,MAAM;AACvB,aAAKf,SAAL,GAAiB,IAAjB;AACA,YAAIH,OAAO,CAACmB,MAAR,IAAkB,IAAtB,EACInB,OAAO,CAACmB,MAAR,CAAe,KAAKlB,MAApB;AACJO,QAAAA,OAAO,CAAC,KAAKP,MAAN,CAAP;AACH,OALD;;AAMA,WAAKA,MAAL,CAAYgB,GAAZ,GAAkBlB,GAAlB;AACH,KA3Bc,CAAf;AA4BH;;AACD,MAAIqB,QAAJ,GAAe;AACX,WAAO,KAAKjB,SAAZ;AACH;;AACD,MAAIkB,KAAJ,GAAY;AACR,WAAO,KAAKpB,MAAZ;AACH;;AAvCoB;AAyCzBJ,WAAW,CAACyB,QAAZ,GAAuB,aAAvB","sourcesContent":["import { logger } from \"../logging\";\nexport class ImageLoader {\n    constructor(url, options = {}) {\n        this._image = new Image();\n        this._finished = false;\n        const { attempts = 1, timeout = 1 } = options;\n        this.promise = new Promise((resolve, _reject) => {\n            this._image.crossOrigin = \"anonymous\";\n            let retries = 0;\n            this._image.onerror = () => {\n                if (++retries == attempts) {\n                    const message = `unable to load ${url} image after ${attempts} attempts`;\n                    logger.warn(message);\n                    if (this._image.crossOrigin != null) {\n                        logger.warn(`attempting to load ${url} without a cross origin policy`);\n                        this._image.crossOrigin = null;\n                        retries = 0;\n                    }\n                    else {\n                        if (options.failed != null)\n                            options.failed();\n                        return; // XXX reject(new Error(message))\n                    }\n                }\n                setTimeout(() => this._image.src = url, timeout);\n            };\n            this._image.onload = () => {\n                this._finished = true;\n                if (options.loaded != null)\n                    options.loaded(this._image);\n                resolve(this._image);\n            };\n            this._image.src = url;\n        });\n    }\n    get finished() {\n        return this._finished;\n    }\n    get image() {\n        return this._image;\n    }\n}\nImageLoader.__name__ = \"ImageLoader\";\n//# sourceMappingURL=image.js.map"]},"metadata":{},"sourceType":"module"}