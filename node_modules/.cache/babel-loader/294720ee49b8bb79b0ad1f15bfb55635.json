{"ast":null,"code":"import { RootAddedEvent, RootRemovedEvent, TitleChangedEvent } from \"../document\";\nimport { DOMView } from \"../core/dom_view\";\nimport { build_view } from \"../core/build_views\";\nimport { div } from \"../core/dom\";\nimport { BOKEH_ROOT } from \"./dom\"; // A map from the root model IDs to their views.\n\nexport const index = {};\nexport async function add_document_standalone(document, element, roots = [], use_for_title = false) {\n  // this is a LOCAL index of views used only by this particular rendering\n  // call, so we can remove the views we create.\n  const views = new Map();\n\n  async function render_model(model) {\n    let root_el;\n    const root_models = document.roots();\n    const idx = root_models.indexOf(model);\n    const root = roots[idx];\n    if (root != null) root_el = root;else if (element.classList.contains(BOKEH_ROOT)) root_el = element;else {\n      root_el = div({\n        class: BOKEH_ROOT\n      });\n      element.appendChild(root_el);\n    }\n    const view = await build_view(model, {\n      parent: null\n    });\n    if (view instanceof DOMView) view.renderTo(root_el);\n    views.set(model, view);\n    index[model.id] = view;\n    return view;\n  }\n\n  function unrender_model(model) {\n    const view = views.get(model);\n\n    if (view != null) {\n      view.remove();\n      views.delete(model);\n      delete index[model.id];\n    }\n  }\n\n  for (const model of document.roots()) await render_model(model);\n\n  if (use_for_title) window.document.title = document.title();\n  document.on_change(event => {\n    if (event instanceof RootAddedEvent) render_model(event.model);else if (event instanceof RootRemovedEvent) unrender_model(event.model);else if (use_for_title && event instanceof TitleChangedEvent) window.document.title = event.title;\n  });\n  return [...views.values()];\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/embed/standalone.js"],"names":["RootAddedEvent","RootRemovedEvent","TitleChangedEvent","DOMView","build_view","div","BOKEH_ROOT","index","add_document_standalone","document","element","roots","use_for_title","views","Map","render_model","model","root_el","root_models","idx","indexOf","root","classList","contains","class","appendChild","view","parent","renderTo","set","id","unrender_model","get","remove","delete","window","title","on_change","event","values"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,gBAAzB,EAA2CC,iBAA3C,QAAoE,aAApE;AACA,SAASC,OAAT,QAAwB,kBAAxB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,SAASC,GAAT,QAAoB,aAApB;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CACA;;AACA,OAAO,MAAMC,KAAK,GAAG,EAAd;AACP,OAAO,eAAeC,uBAAf,CAAuCC,QAAvC,EAAiDC,OAAjD,EAA0DC,KAAK,GAAG,EAAlE,EAAsEC,aAAa,GAAG,KAAtF,EAA6F;AAChG;AACA;AACA,QAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AACA,iBAAeC,YAAf,CAA4BC,KAA5B,EAAmC;AAC/B,QAAIC,OAAJ;AACA,UAAMC,WAAW,GAAGT,QAAQ,CAACE,KAAT,EAApB;AACA,UAAMQ,GAAG,GAAGD,WAAW,CAACE,OAAZ,CAAoBJ,KAApB,CAAZ;AACA,UAAMK,IAAI,GAAGV,KAAK,CAACQ,GAAD,CAAlB;AACA,QAAIE,IAAI,IAAI,IAAZ,EACIJ,OAAO,GAAGI,IAAV,CADJ,KAEK,IAAIX,OAAO,CAACY,SAAR,CAAkBC,QAAlB,CAA2BjB,UAA3B,CAAJ,EACDW,OAAO,GAAGP,OAAV,CADC,KAEA;AACDO,MAAAA,OAAO,GAAGZ,GAAG,CAAC;AAAEmB,QAAAA,KAAK,EAAElB;AAAT,OAAD,CAAb;AACAI,MAAAA,OAAO,CAACe,WAAR,CAAoBR,OAApB;AACH;AACD,UAAMS,IAAI,GAAG,MAAMtB,UAAU,CAACY,KAAD,EAAQ;AAAEW,MAAAA,MAAM,EAAE;AAAV,KAAR,CAA7B;AACA,QAAID,IAAI,YAAYvB,OAApB,EACIuB,IAAI,CAACE,QAAL,CAAcX,OAAd;AACJJ,IAAAA,KAAK,CAACgB,GAAN,CAAUb,KAAV,EAAiBU,IAAjB;AACAnB,IAAAA,KAAK,CAACS,KAAK,CAACc,EAAP,CAAL,GAAkBJ,IAAlB;AACA,WAAOA,IAAP;AACH;;AACD,WAASK,cAAT,CAAwBf,KAAxB,EAA+B;AAC3B,UAAMU,IAAI,GAAGb,KAAK,CAACmB,GAAN,CAAUhB,KAAV,CAAb;;AACA,QAAIU,IAAI,IAAI,IAAZ,EAAkB;AACdA,MAAAA,IAAI,CAACO,MAAL;AACApB,MAAAA,KAAK,CAACqB,MAAN,CAAalB,KAAb;AACA,aAAOT,KAAK,CAACS,KAAK,CAACc,EAAP,CAAZ;AACH;AACJ;;AACD,OAAK,MAAMd,KAAX,IAAoBP,QAAQ,CAACE,KAAT,EAApB,EACI,MAAMI,YAAY,CAACC,KAAD,CAAlB;;AACJ,MAAIJ,aAAJ,EACIuB,MAAM,CAAC1B,QAAP,CAAgB2B,KAAhB,GAAwB3B,QAAQ,CAAC2B,KAAT,EAAxB;AACJ3B,EAAAA,QAAQ,CAAC4B,SAAT,CAAoBC,KAAD,IAAW;AAC1B,QAAIA,KAAK,YAAYtC,cAArB,EACIe,YAAY,CAACuB,KAAK,CAACtB,KAAP,CAAZ,CADJ,KAEK,IAAIsB,KAAK,YAAYrC,gBAArB,EACD8B,cAAc,CAACO,KAAK,CAACtB,KAAP,CAAd,CADC,KAEA,IAAIJ,aAAa,IAAI0B,KAAK,YAAYpC,iBAAtC,EACDiC,MAAM,CAAC1B,QAAP,CAAgB2B,KAAhB,GAAwBE,KAAK,CAACF,KAA9B;AACP,GAPD;AAQA,SAAO,CAAC,GAAGvB,KAAK,CAAC0B,MAAN,EAAJ,CAAP;AACH","sourcesContent":["import { RootAddedEvent, RootRemovedEvent, TitleChangedEvent } from \"../document\";\nimport { DOMView } from \"../core/dom_view\";\nimport { build_view } from \"../core/build_views\";\nimport { div } from \"../core/dom\";\nimport { BOKEH_ROOT } from \"./dom\";\n// A map from the root model IDs to their views.\nexport const index = {};\nexport async function add_document_standalone(document, element, roots = [], use_for_title = false) {\n    // this is a LOCAL index of views used only by this particular rendering\n    // call, so we can remove the views we create.\n    const views = new Map();\n    async function render_model(model) {\n        let root_el;\n        const root_models = document.roots();\n        const idx = root_models.indexOf(model);\n        const root = roots[idx];\n        if (root != null)\n            root_el = root;\n        else if (element.classList.contains(BOKEH_ROOT))\n            root_el = element;\n        else {\n            root_el = div({ class: BOKEH_ROOT });\n            element.appendChild(root_el);\n        }\n        const view = await build_view(model, { parent: null });\n        if (view instanceof DOMView)\n            view.renderTo(root_el);\n        views.set(model, view);\n        index[model.id] = view;\n        return view;\n    }\n    function unrender_model(model) {\n        const view = views.get(model);\n        if (view != null) {\n            view.remove();\n            views.delete(model);\n            delete index[model.id];\n        }\n    }\n    for (const model of document.roots())\n        await render_model(model);\n    if (use_for_title)\n        window.document.title = document.title();\n    document.on_change((event) => {\n        if (event instanceof RootAddedEvent)\n            render_model(event.model);\n        else if (event instanceof RootRemovedEvent)\n            unrender_model(event.model);\n        else if (use_for_title && event instanceof TitleChangedEvent)\n            window.document.title = event.title;\n    });\n    return [...views.values()];\n}\n//# sourceMappingURL=standalone.js.map"]},"metadata":{},"sourceType":"module"}