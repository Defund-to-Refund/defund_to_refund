{"ast":null,"code":"import * as p from \"../../../core/properties\";\nimport { includes } from \"../../../core/util/array\";\nimport { isArray } from \"../../../core/util/types\";\nimport { GestureTool, GestureToolView } from \"../gestures/gesture_tool\";\nexport class EditToolView extends GestureToolView {\n  constructor() {\n    super(...arguments);\n    this._mouse_in_frame = true;\n  }\n\n  _move_enter(_e) {\n    this._mouse_in_frame = true;\n  }\n\n  _move_exit(_e) {\n    this._mouse_in_frame = false;\n  }\n\n  _map_drag(sx, sy, renderer) {\n    // Maps screen to data coordinates\n    const frame = this.plot_view.frame;\n\n    if (!frame.bbox.contains(sx, sy)) {\n      return null;\n    }\n\n    const x = frame.xscales[renderer.x_range_name].invert(sx);\n    const y = frame.yscales[renderer.y_range_name].invert(sy);\n    return [x, y];\n  }\n\n  _delete_selected(renderer) {\n    // Deletes all selected rows in the ColumnDataSource\n    const cds = renderer.data_source;\n    const indices = cds.selected.indices;\n    indices.sort();\n\n    for (const column of cds.columns()) {\n      const values = cds.get_array(column);\n\n      for (let index = 0; index < indices.length; index++) {\n        const ind = indices[index];\n        values.splice(ind - index, 1);\n      }\n    }\n\n    this._emit_cds_changes(cds);\n  }\n\n  _pop_glyphs(cds, num_objects) {\n    // Pops rows in the CDS until only num_objects are left\n    const columns = cds.columns();\n    if (!num_objects || !columns.length) return;\n\n    for (const column of columns) {\n      let array = cds.get_array(column);\n      const drop = array.length - num_objects + 1;\n      if (drop < 1) continue;\n\n      if (!isArray(array)) {\n        array = Array.from(array);\n        cds.data[column] = array;\n      }\n\n      array.splice(0, drop);\n    }\n  }\n\n  _emit_cds_changes(cds, redraw = true, clear = true, emit = true) {\n    if (clear) cds.selection_manager.clear();\n    if (redraw) cds.change.emit();\n\n    if (emit) {\n      cds.data = cds.data;\n      cds.properties.data.change.emit();\n    }\n  }\n\n  _drag_points(ev, renderers) {\n    if (this._basepoint == null) return;\n    const [bx, by] = this._basepoint;\n\n    for (const renderer of renderers) {\n      const basepoint = this._map_drag(bx, by, renderer);\n\n      const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n      if (point == null || basepoint == null) {\n        continue;\n      }\n\n      const [x, y] = point;\n      const [px, py] = basepoint;\n      const [dx, dy] = [x - px, y - py]; // Type once dataspecs are typed\n\n      const glyph = renderer.glyph;\n      const cds = renderer.data_source;\n      const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n\n      for (const index of cds.selected.indices) {\n        if (xkey) cds.data[xkey][index] += dx;\n        if (ykey) cds.data[ykey][index] += dy;\n      }\n\n      cds.change.emit();\n    }\n\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pad_empty_columns(cds, coord_columns) {\n    // Pad ColumnDataSource non-coordinate columns with empty_value\n    for (const column of cds.columns()) {\n      if (!includes(coord_columns, column)) cds.get_array(column).push(this.model.empty_value);\n    }\n  }\n\n  _select_event(ev, append, renderers) {\n    // Process selection event on the supplied renderers and return selected renderers\n    const frame = this.plot_view.frame;\n    const {\n      sx,\n      sy\n    } = ev;\n\n    if (!frame.bbox.contains(sx, sy)) {\n      return [];\n    }\n\n    const geometry = {\n      type: 'point',\n      sx,\n      sy\n    };\n    const selected = [];\n\n    for (const renderer of renderers) {\n      const sm = renderer.get_selection_manager();\n      const cds = renderer.data_source;\n      const views = [this.plot_view.renderer_views[renderer.id]];\n      const did_hit = sm.select(views, geometry, true, append);\n\n      if (did_hit) {\n        selected.push(renderer);\n      }\n\n      cds.properties.selected.change.emit();\n    }\n\n    return selected;\n  }\n\n}\nEditToolView.__name__ = \"EditToolView\";\nexport class EditTool extends GestureTool {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_EditTool() {\n    this.define({\n      custom_icon: [p.String],\n      custom_tooltip: [p.String],\n      empty_value: [p.Any],\n      renderers: [p.Array, []]\n    });\n  }\n\n  get tooltip() {\n    return this.custom_tooltip || this.tool_name;\n  }\n\n  get computed_icon() {\n    return this.custom_icon || this.icon;\n  }\n\n}\nEditTool.__name__ = \"EditTool\";\nEditTool.init_EditTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/edit/edit_tool.js"],"names":["p","includes","isArray","GestureTool","GestureToolView","EditToolView","constructor","arguments","_mouse_in_frame","_move_enter","_e","_move_exit","_map_drag","sx","sy","renderer","frame","plot_view","bbox","contains","x","xscales","x_range_name","invert","y","yscales","y_range_name","_delete_selected","cds","data_source","indices","selected","sort","column","columns","values","get_array","index","length","ind","splice","_emit_cds_changes","_pop_glyphs","num_objects","array","drop","Array","from","data","redraw","clear","emit","selection_manager","change","properties","_drag_points","ev","renderers","_basepoint","bx","by","basepoint","point","px","py","dx","dy","glyph","xkey","ykey","field","_pad_empty_columns","coord_columns","push","model","empty_value","_select_event","append","geometry","type","sm","get_selection_manager","views","renderer_views","id","did_hit","select","__name__","EditTool","attrs","init_EditTool","define","custom_icon","String","custom_tooltip","Any","tooltip","tool_name","computed_icon","icon"],"mappings":"AAAA,OAAO,KAAKA,CAAZ,MAAmB,0BAAnB;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,0BAA7C;AACA,OAAO,MAAMC,YAAN,SAA2BD,eAA3B,CAA2C;AAC9CE,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACH;;AACDC,EAAAA,WAAW,CAACC,EAAD,EAAK;AACZ,SAAKF,eAAL,GAAuB,IAAvB;AACH;;AACDG,EAAAA,UAAU,CAACD,EAAD,EAAK;AACX,SAAKF,eAAL,GAAuB,KAAvB;AACH;;AACDI,EAAAA,SAAS,CAACC,EAAD,EAAKC,EAAL,EAASC,QAAT,EAAmB;AACxB;AACA,UAAMC,KAAK,GAAG,KAAKC,SAAL,CAAeD,KAA7B;;AACA,QAAI,CAACA,KAAK,CAACE,IAAN,CAAWC,QAAX,CAAoBN,EAApB,EAAwBC,EAAxB,CAAL,EAAkC;AAC9B,aAAO,IAAP;AACH;;AACD,UAAMM,CAAC,GAAGJ,KAAK,CAACK,OAAN,CAAcN,QAAQ,CAACO,YAAvB,EAAqCC,MAArC,CAA4CV,EAA5C,CAAV;AACA,UAAMW,CAAC,GAAGR,KAAK,CAACS,OAAN,CAAcV,QAAQ,CAACW,YAAvB,EAAqCH,MAArC,CAA4CT,EAA5C,CAAV;AACA,WAAO,CAACM,CAAD,EAAII,CAAJ,CAAP;AACH;;AACDG,EAAAA,gBAAgB,CAACZ,QAAD,EAAW;AACvB;AACA,UAAMa,GAAG,GAAGb,QAAQ,CAACc,WAArB;AACA,UAAMC,OAAO,GAAGF,GAAG,CAACG,QAAJ,CAAaD,OAA7B;AACAA,IAAAA,OAAO,CAACE,IAAR;;AACA,SAAK,MAAMC,MAAX,IAAqBL,GAAG,CAACM,OAAJ,EAArB,EAAoC;AAChC,YAAMC,MAAM,GAAGP,GAAG,CAACQ,SAAJ,CAAcH,MAAd,CAAf;;AACA,WAAK,IAAII,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGP,OAAO,CAACQ,MAApC,EAA4CD,KAAK,EAAjD,EAAqD;AACjD,cAAME,GAAG,GAAGT,OAAO,CAACO,KAAD,CAAnB;AACAF,QAAAA,MAAM,CAACK,MAAP,CAAcD,GAAG,GAAGF,KAApB,EAA2B,CAA3B;AACH;AACJ;;AACD,SAAKI,iBAAL,CAAuBb,GAAvB;AACH;;AACDc,EAAAA,WAAW,CAACd,GAAD,EAAMe,WAAN,EAAmB;AAC1B;AACA,UAAMT,OAAO,GAAGN,GAAG,CAACM,OAAJ,EAAhB;AACA,QAAI,CAACS,WAAD,IAAgB,CAACT,OAAO,CAACI,MAA7B,EACI;;AACJ,SAAK,MAAML,MAAX,IAAqBC,OAArB,EAA8B;AAC1B,UAAIU,KAAK,GAAGhB,GAAG,CAACQ,SAAJ,CAAcH,MAAd,CAAZ;AACA,YAAMY,IAAI,GAAGD,KAAK,CAACN,MAAN,GAAeK,WAAf,GAA6B,CAA1C;AACA,UAAIE,IAAI,GAAG,CAAX,EACI;;AACJ,UAAI,CAAC3C,OAAO,CAAC0C,KAAD,CAAZ,EAAqB;AACjBA,QAAAA,KAAK,GAAGE,KAAK,CAACC,IAAN,CAAWH,KAAX,CAAR;AACAhB,QAAAA,GAAG,CAACoB,IAAJ,CAASf,MAAT,IAAmBW,KAAnB;AACH;;AACDA,MAAAA,KAAK,CAACJ,MAAN,CAAa,CAAb,EAAgBK,IAAhB;AACH;AACJ;;AACDJ,EAAAA,iBAAiB,CAACb,GAAD,EAAMqB,MAAM,GAAG,IAAf,EAAqBC,KAAK,GAAG,IAA7B,EAAmCC,IAAI,GAAG,IAA1C,EAAgD;AAC7D,QAAID,KAAJ,EACItB,GAAG,CAACwB,iBAAJ,CAAsBF,KAAtB;AACJ,QAAID,MAAJ,EACIrB,GAAG,CAACyB,MAAJ,CAAWF,IAAX;;AACJ,QAAIA,IAAJ,EAAU;AACNvB,MAAAA,GAAG,CAACoB,IAAJ,GAAWpB,GAAG,CAACoB,IAAf;AACApB,MAAAA,GAAG,CAAC0B,UAAJ,CAAeN,IAAf,CAAoBK,MAApB,CAA2BF,IAA3B;AACH;AACJ;;AACDI,EAAAA,YAAY,CAACC,EAAD,EAAKC,SAAL,EAAgB;AACxB,QAAI,KAAKC,UAAL,IAAmB,IAAvB,EACI;AACJ,UAAM,CAACC,EAAD,EAAKC,EAAL,IAAW,KAAKF,UAAtB;;AACA,SAAK,MAAM3C,QAAX,IAAuB0C,SAAvB,EAAkC;AAC9B,YAAMI,SAAS,GAAG,KAAKjD,SAAL,CAAe+C,EAAf,EAAmBC,EAAnB,EAAuB7C,QAAvB,CAAlB;;AACA,YAAM+C,KAAK,GAAG,KAAKlD,SAAL,CAAe4C,EAAE,CAAC3C,EAAlB,EAAsB2C,EAAE,CAAC1C,EAAzB,EAA6BC,QAA7B,CAAd;;AACA,UAAI+C,KAAK,IAAI,IAAT,IAAiBD,SAAS,IAAI,IAAlC,EAAwC;AACpC;AACH;;AACD,YAAM,CAACzC,CAAD,EAAII,CAAJ,IAASsC,KAAf;AACA,YAAM,CAACC,EAAD,EAAKC,EAAL,IAAWH,SAAjB;AACA,YAAM,CAACI,EAAD,EAAKC,EAAL,IAAW,CAAC9C,CAAC,GAAG2C,EAAL,EAASvC,CAAC,GAAGwC,EAAb,CAAjB,CAR8B,CAS9B;;AACA,YAAMG,KAAK,GAAGpD,QAAQ,CAACoD,KAAvB;AACA,YAAMvC,GAAG,GAAGb,QAAQ,CAACc,WAArB;AACA,YAAM,CAACuC,IAAD,EAAOC,IAAP,IAAe,CAACF,KAAK,CAAC/C,CAAN,CAAQkD,KAAT,EAAgBH,KAAK,CAAC3C,CAAN,CAAQ8C,KAAxB,CAArB;;AACA,WAAK,MAAMjC,KAAX,IAAoBT,GAAG,CAACG,QAAJ,CAAaD,OAAjC,EAA0C;AACtC,YAAIsC,IAAJ,EACIxC,GAAG,CAACoB,IAAJ,CAASoB,IAAT,EAAe/B,KAAf,KAAyB4B,EAAzB;AACJ,YAAII,IAAJ,EACIzC,GAAG,CAACoB,IAAJ,CAASqB,IAAT,EAAehC,KAAf,KAAyB6B,EAAzB;AACP;;AACDtC,MAAAA,GAAG,CAACyB,MAAJ,CAAWF,IAAX;AACH;;AACD,SAAKO,UAAL,GAAkB,CAACF,EAAE,CAAC3C,EAAJ,EAAQ2C,EAAE,CAAC1C,EAAX,CAAlB;AACH;;AACDyD,EAAAA,kBAAkB,CAAC3C,GAAD,EAAM4C,aAAN,EAAqB;AACnC;AACA,SAAK,MAAMvC,MAAX,IAAqBL,GAAG,CAACM,OAAJ,EAArB,EAAoC;AAChC,UAAI,CAACjC,QAAQ,CAACuE,aAAD,EAAgBvC,MAAhB,CAAb,EACIL,GAAG,CAACQ,SAAJ,CAAcH,MAAd,EAAsBwC,IAAtB,CAA2B,KAAKC,KAAL,CAAWC,WAAtC;AACP;AACJ;;AACDC,EAAAA,aAAa,CAACpB,EAAD,EAAKqB,MAAL,EAAapB,SAAb,EAAwB;AACjC;AACA,UAAMzC,KAAK,GAAG,KAAKC,SAAL,CAAeD,KAA7B;AACA,UAAM;AAAEH,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAa0C,EAAnB;;AACA,QAAI,CAACxC,KAAK,CAACE,IAAN,CAAWC,QAAX,CAAoBN,EAApB,EAAwBC,EAAxB,CAAL,EAAkC;AAC9B,aAAO,EAAP;AACH;;AACD,UAAMgE,QAAQ,GAAG;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBlE,MAAAA,EAAjB;AAAqBC,MAAAA;AAArB,KAAjB;AACA,UAAMiB,QAAQ,GAAG,EAAjB;;AACA,SAAK,MAAMhB,QAAX,IAAuB0C,SAAvB,EAAkC;AAC9B,YAAMuB,EAAE,GAAGjE,QAAQ,CAACkE,qBAAT,EAAX;AACA,YAAMrD,GAAG,GAAGb,QAAQ,CAACc,WAArB;AACA,YAAMqD,KAAK,GAAG,CAAC,KAAKjE,SAAL,CAAekE,cAAf,CAA8BpE,QAAQ,CAACqE,EAAvC,CAAD,CAAd;AACA,YAAMC,OAAO,GAAGL,EAAE,CAACM,MAAH,CAAUJ,KAAV,EAAiBJ,QAAjB,EAA2B,IAA3B,EAAiCD,MAAjC,CAAhB;;AACA,UAAIQ,OAAJ,EAAa;AACTtD,QAAAA,QAAQ,CAAC0C,IAAT,CAAc1D,QAAd;AACH;;AACDa,MAAAA,GAAG,CAAC0B,UAAJ,CAAevB,QAAf,CAAwBsB,MAAxB,CAA+BF,IAA/B;AACH;;AACD,WAAOpB,QAAP;AACH;;AApH6C;AAsHlD1B,YAAY,CAACkF,QAAb,GAAwB,cAAxB;AACA,OAAO,MAAMC,QAAN,SAAuBrF,WAAvB,CAAmC;AACtCG,EAAAA,WAAW,CAACmF,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,aAAP,GAAuB;AACnB,SAAKC,MAAL,CAAY;AACRC,MAAAA,WAAW,EAAE,CAAC5F,CAAC,CAAC6F,MAAH,CADL;AAERC,MAAAA,cAAc,EAAE,CAAC9F,CAAC,CAAC6F,MAAH,CAFR;AAGRlB,MAAAA,WAAW,EAAE,CAAC3E,CAAC,CAAC+F,GAAH,CAHL;AAIRtC,MAAAA,SAAS,EAAE,CAACzD,CAAC,CAAC8C,KAAH,EAAU,EAAV;AAJH,KAAZ;AAMH;;AACD,MAAIkD,OAAJ,GAAc;AACV,WAAO,KAAKF,cAAL,IAAuB,KAAKG,SAAnC;AACH;;AACD,MAAIC,aAAJ,GAAoB;AAChB,WAAO,KAAKN,WAAL,IAAoB,KAAKO,IAAhC;AACH;;AAjBqC;AAmB1CX,QAAQ,CAACD,QAAT,GAAoB,UAApB;AACAC,QAAQ,CAACE,aAAT","sourcesContent":["import * as p from \"../../../core/properties\";\nimport { includes } from \"../../../core/util/array\";\nimport { isArray } from \"../../../core/util/types\";\nimport { GestureTool, GestureToolView } from \"../gestures/gesture_tool\";\nexport class EditToolView extends GestureToolView {\n    constructor() {\n        super(...arguments);\n        this._mouse_in_frame = true;\n    }\n    _move_enter(_e) {\n        this._mouse_in_frame = true;\n    }\n    _move_exit(_e) {\n        this._mouse_in_frame = false;\n    }\n    _map_drag(sx, sy, renderer) {\n        // Maps screen to data coordinates\n        const frame = this.plot_view.frame;\n        if (!frame.bbox.contains(sx, sy)) {\n            return null;\n        }\n        const x = frame.xscales[renderer.x_range_name].invert(sx);\n        const y = frame.yscales[renderer.y_range_name].invert(sy);\n        return [x, y];\n    }\n    _delete_selected(renderer) {\n        // Deletes all selected rows in the ColumnDataSource\n        const cds = renderer.data_source;\n        const indices = cds.selected.indices;\n        indices.sort();\n        for (const column of cds.columns()) {\n            const values = cds.get_array(column);\n            for (let index = 0; index < indices.length; index++) {\n                const ind = indices[index];\n                values.splice(ind - index, 1);\n            }\n        }\n        this._emit_cds_changes(cds);\n    }\n    _pop_glyphs(cds, num_objects) {\n        // Pops rows in the CDS until only num_objects are left\n        const columns = cds.columns();\n        if (!num_objects || !columns.length)\n            return;\n        for (const column of columns) {\n            let array = cds.get_array(column);\n            const drop = array.length - num_objects + 1;\n            if (drop < 1)\n                continue;\n            if (!isArray(array)) {\n                array = Array.from(array);\n                cds.data[column] = array;\n            }\n            array.splice(0, drop);\n        }\n    }\n    _emit_cds_changes(cds, redraw = true, clear = true, emit = true) {\n        if (clear)\n            cds.selection_manager.clear();\n        if (redraw)\n            cds.change.emit();\n        if (emit) {\n            cds.data = cds.data;\n            cds.properties.data.change.emit();\n        }\n    }\n    _drag_points(ev, renderers) {\n        if (this._basepoint == null)\n            return;\n        const [bx, by] = this._basepoint;\n        for (const renderer of renderers) {\n            const basepoint = this._map_drag(bx, by, renderer);\n            const point = this._map_drag(ev.sx, ev.sy, renderer);\n            if (point == null || basepoint == null) {\n                continue;\n            }\n            const [x, y] = point;\n            const [px, py] = basepoint;\n            const [dx, dy] = [x - px, y - py];\n            // Type once dataspecs are typed\n            const glyph = renderer.glyph;\n            const cds = renderer.data_source;\n            const [xkey, ykey] = [glyph.x.field, glyph.y.field];\n            for (const index of cds.selected.indices) {\n                if (xkey)\n                    cds.data[xkey][index] += dx;\n                if (ykey)\n                    cds.data[ykey][index] += dy;\n            }\n            cds.change.emit();\n        }\n        this._basepoint = [ev.sx, ev.sy];\n    }\n    _pad_empty_columns(cds, coord_columns) {\n        // Pad ColumnDataSource non-coordinate columns with empty_value\n        for (const column of cds.columns()) {\n            if (!includes(coord_columns, column))\n                cds.get_array(column).push(this.model.empty_value);\n        }\n    }\n    _select_event(ev, append, renderers) {\n        // Process selection event on the supplied renderers and return selected renderers\n        const frame = this.plot_view.frame;\n        const { sx, sy } = ev;\n        if (!frame.bbox.contains(sx, sy)) {\n            return [];\n        }\n        const geometry = { type: 'point', sx, sy };\n        const selected = [];\n        for (const renderer of renderers) {\n            const sm = renderer.get_selection_manager();\n            const cds = renderer.data_source;\n            const views = [this.plot_view.renderer_views[renderer.id]];\n            const did_hit = sm.select(views, geometry, true, append);\n            if (did_hit) {\n                selected.push(renderer);\n            }\n            cds.properties.selected.change.emit();\n        }\n        return selected;\n    }\n}\nEditToolView.__name__ = \"EditToolView\";\nexport class EditTool extends GestureTool {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_EditTool() {\n        this.define({\n            custom_icon: [p.String],\n            custom_tooltip: [p.String],\n            empty_value: [p.Any],\n            renderers: [p.Array, []],\n        });\n    }\n    get tooltip() {\n        return this.custom_tooltip || this.tool_name;\n    }\n    get computed_icon() {\n        return this.custom_icon || this.icon;\n    }\n}\nEditTool.__name__ = \"EditTool\";\nEditTool.init_EditTool();\n//# sourceMappingURL=edit_tool.js.map"]},"metadata":{},"sourceType":"module"}