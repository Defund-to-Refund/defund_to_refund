{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport { display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nexport class SpanView extends AnnotationView {\n  initialize() {\n    super.initialize();\n    this.plot_view.canvas_view.add_overlay(this.el);\n    this.el.style.position = \"absolute\";\n    undisplay(this.el);\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    if (this.model.for_hover) this.connect(this.model.properties.computed_location.change, () => this._draw_span());else {\n      if (this.model.render_mode == 'canvas') {\n        this.connect(this.model.change, () => this.plot_view.request_render());\n        this.connect(this.model.properties.location.change, () => this.plot_view.request_render());\n      } else {\n        this.connect(this.model.change, () => this.render());\n        this.connect(this.model.properties.location.change, () => this._draw_span());\n      }\n    }\n  }\n\n  render() {\n    if (!this.model.visible && this.model.render_mode == 'css') undisplay(this.el);\n    if (!this.model.visible) return;\n\n    this._draw_span();\n  }\n\n  _draw_span() {\n    const loc = this.model.for_hover ? this.model.computed_location : this.model.location;\n\n    if (loc == null) {\n      undisplay(this.el);\n      return;\n    }\n\n    const {\n      frame\n    } = this.plot_view;\n    const xscale = frame.xscales[this.model.x_range_name];\n    const yscale = frame.yscales[this.model.y_range_name];\n\n    const _calc_dim = (scale, view) => {\n      if (this.model.for_hover) return this.model.computed_location;else {\n        if (this.model.location_units == 'data') return scale.compute(loc);else return view.compute(loc);\n      }\n    };\n\n    let height, sleft, stop, width;\n\n    if (this.model.dimension == 'width') {\n      stop = _calc_dim(yscale, frame.yview);\n      sleft = frame._left.value;\n      width = frame._width.value;\n      height = this.model.properties.line_width.value();\n    } else {\n      stop = frame._top.value;\n      sleft = _calc_dim(xscale, frame.xview);\n      width = this.model.properties.line_width.value();\n      height = frame._height.value;\n    }\n\n    if (this.model.render_mode == \"css\") {\n      this.el.style.top = `${stop}px`;\n      this.el.style.left = `${sleft}px`;\n      this.el.style.width = `${width}px`;\n      this.el.style.height = `${height}px`;\n      this.el.style.backgroundColor = this.model.properties.line_color.value();\n      this.el.style.opacity = this.model.properties.line_alpha.value();\n      display(this.el);\n    } else if (this.model.render_mode == \"canvas\") {\n      const {\n        ctx\n      } = this.plot_view.canvas_view;\n      ctx.save();\n      ctx.beginPath();\n      this.visuals.line.set_value(ctx);\n      ctx.moveTo(sleft, stop);\n\n      if (this.model.dimension == \"width\") {\n        ctx.lineTo(sleft + width, stop);\n      } else {\n        ctx.lineTo(sleft, stop + height);\n      }\n\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n\n}\nSpanView.__name__ = \"SpanView\";\nexport class Span extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Span() {\n    this.prototype.default_view = SpanView;\n    this.mixins(['line']);\n    this.define({\n      render_mode: [p.RenderMode, 'canvas'],\n      x_range_name: [p.String, 'default'],\n      y_range_name: [p.String, 'default'],\n      location: [p.Number, null],\n      location_units: [p.SpatialUnits, 'data'],\n      dimension: [p.Dimension, 'width']\n    });\n    this.override({\n      line_color: 'black'\n    });\n    this.internal({\n      for_hover: [p.Boolean, false],\n      computed_location: [p.Number, null]\n    });\n  }\n\n}\nSpan.__name__ = \"Span\";\nSpan.init_Span();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/span.js"],"names":["Annotation","AnnotationView","display","undisplay","p","SpanView","initialize","plot_view","canvas_view","add_overlay","el","style","position","connect_signals","model","for_hover","connect","properties","computed_location","change","_draw_span","render_mode","request_render","location","render","visible","loc","frame","xscale","xscales","x_range_name","yscale","yscales","y_range_name","_calc_dim","scale","view","location_units","compute","height","sleft","stop","width","dimension","yview","_left","value","_width","line_width","_top","xview","_height","top","left","backgroundColor","line_color","opacity","line_alpha","ctx","save","beginPath","visuals","line","set_value","moveTo","lineTo","stroke","restore","__name__","Span","constructor","attrs","init_Span","prototype","default_view","mixins","define","RenderMode","String","Number","SpatialUnits","Dimension","override","internal","Boolean"],"mappings":"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","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport { display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nexport class SpanView extends AnnotationView {\n    initialize() {\n        super.initialize();\n        this.plot_view.canvas_view.add_overlay(this.el);\n        this.el.style.position = \"absolute\";\n        undisplay(this.el);\n    }\n    connect_signals() {\n        super.connect_signals();\n        if (this.model.for_hover)\n            this.connect(this.model.properties.computed_location.change, () => this._draw_span());\n        else {\n            if (this.model.render_mode == 'canvas') {\n                this.connect(this.model.change, () => this.plot_view.request_render());\n                this.connect(this.model.properties.location.change, () => this.plot_view.request_render());\n            }\n            else {\n                this.connect(this.model.change, () => this.render());\n                this.connect(this.model.properties.location.change, () => this._draw_span());\n            }\n        }\n    }\n    render() {\n        if (!this.model.visible && this.model.render_mode == 'css')\n            undisplay(this.el);\n        if (!this.model.visible)\n            return;\n        this._draw_span();\n    }\n    _draw_span() {\n        const loc = this.model.for_hover ? this.model.computed_location : this.model.location;\n        if (loc == null) {\n            undisplay(this.el);\n            return;\n        }\n        const { frame } = this.plot_view;\n        const xscale = frame.xscales[this.model.x_range_name];\n        const yscale = frame.yscales[this.model.y_range_name];\n        const _calc_dim = (scale, view) => {\n            if (this.model.for_hover)\n                return this.model.computed_location;\n            else {\n                if (this.model.location_units == 'data')\n                    return scale.compute(loc);\n                else\n                    return view.compute(loc);\n            }\n        };\n        let height, sleft, stop, width;\n        if (this.model.dimension == 'width') {\n            stop = _calc_dim(yscale, frame.yview);\n            sleft = frame._left.value;\n            width = frame._width.value;\n            height = this.model.properties.line_width.value();\n        }\n        else {\n            stop = frame._top.value;\n            sleft = _calc_dim(xscale, frame.xview);\n            width = this.model.properties.line_width.value();\n            height = frame._height.value;\n        }\n        if (this.model.render_mode == \"css\") {\n            this.el.style.top = `${stop}px`;\n            this.el.style.left = `${sleft}px`;\n            this.el.style.width = `${width}px`;\n            this.el.style.height = `${height}px`;\n            this.el.style.backgroundColor = this.model.properties.line_color.value();\n            this.el.style.opacity = this.model.properties.line_alpha.value();\n            display(this.el);\n        }\n        else if (this.model.render_mode == \"canvas\") {\n            const { ctx } = this.plot_view.canvas_view;\n            ctx.save();\n            ctx.beginPath();\n            this.visuals.line.set_value(ctx);\n            ctx.moveTo(sleft, stop);\n            if (this.model.dimension == \"width\") {\n                ctx.lineTo(sleft + width, stop);\n            }\n            else {\n                ctx.lineTo(sleft, stop + height);\n            }\n            ctx.stroke();\n            ctx.restore();\n        }\n    }\n}\nSpanView.__name__ = \"SpanView\";\nexport class Span extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Span() {\n        this.prototype.default_view = SpanView;\n        this.mixins(['line']);\n        this.define({\n            render_mode: [p.RenderMode, 'canvas'],\n            x_range_name: [p.String, 'default'],\n            y_range_name: [p.String, 'default'],\n            location: [p.Number, null],\n            location_units: [p.SpatialUnits, 'data'],\n            dimension: [p.Dimension, 'width'],\n        });\n        this.override({\n            line_color: 'black',\n        });\n        this.internal({\n            for_hover: [p.Boolean, false],\n            computed_location: [p.Number, null],\n        });\n    }\n}\nSpan.__name__ = \"Span\";\nSpan.init_Span();\n//# sourceMappingURL=span.js.map"]},"metadata":{},"sourceType":"module"}