{"ast":null,"code":"import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport { generic_area_legend } from \"./utils\";\nimport * as hittest from \"../../core/hittest\";\nexport class PatchView extends XYGlyphView {\n  _inner_loop(ctx, indices, sx, sy, func) {\n    for (const i of indices) {\n      if (i == 0) {\n        ctx.beginPath();\n        ctx.moveTo(sx[i], sy[i]);\n        continue;\n      } else if (isNaN(sx[i] + sy[i])) {\n        ctx.closePath();\n        func.apply(ctx);\n        ctx.beginPath();\n        continue;\n      } else ctx.lineTo(sx[i], sy[i]);\n    }\n\n    ctx.closePath();\n    func.call(ctx);\n  }\n\n  _render(ctx, indices, {\n    sx,\n    sy\n  }) {\n    if (this.visuals.fill.doit) {\n      this.visuals.fill.set_value(ctx);\n\n      this._inner_loop(ctx, indices, sx, sy, ctx.fill);\n    }\n\n    this.visuals.hatch.doit2(ctx, 0, () => this._inner_loop(ctx, indices, sx, sy, ctx.fill), () => this.renderer.request_render());\n\n    if (this.visuals.line.doit) {\n      this.visuals.line.set_value(ctx);\n\n      this._inner_loop(ctx, indices, sx, sy, ctx.stroke);\n    }\n  }\n\n  draw_legend_for_index(ctx, bbox, index) {\n    generic_area_legend(this.visuals, ctx, bbox, index);\n  }\n\n  _hit_point(geometry) {\n    const result = hittest.create_empty_hit_test_result();\n\n    if (hittest.point_in_poly(geometry.sx, geometry.sy, this.sx, this.sy)) {\n      result.add_to_selected_glyphs(this.model);\n\n      result.get_view = () => this;\n    }\n\n    return result;\n  }\n\n}\nPatchView.__name__ = \"PatchView\";\nexport class Patch extends XYGlyph {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Patch() {\n    this.prototype.default_view = PatchView;\n    this.mixins(['line', 'fill', 'hatch']);\n  }\n\n}\nPatch.__name__ = \"Patch\";\nPatch.init_Patch();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/patch.js"],"names":["XYGlyph","XYGlyphView","generic_area_legend","hittest","PatchView","_inner_loop","ctx","indices","sx","sy","func","i","beginPath","moveTo","isNaN","closePath","apply","lineTo","call","_render","visuals","fill","doit","set_value","hatch","doit2","renderer","request_render","line","stroke","draw_legend_for_index","bbox","index","_hit_point","geometry","result","create_empty_hit_test_result","point_in_poly","add_to_selected_glyphs","model","get_view","__name__","Patch","constructor","attrs","init_Patch","prototype","default_view","mixins"],"mappings":"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","sourcesContent":["import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport { generic_area_legend } from \"./utils\";\nimport * as hittest from \"../../core/hittest\";\nexport class PatchView extends XYGlyphView {\n    _inner_loop(ctx, indices, sx, sy, func) {\n        for (const i of indices) {\n            if (i == 0) {\n                ctx.beginPath();\n                ctx.moveTo(sx[i], sy[i]);\n                continue;\n            }\n            else if (isNaN(sx[i] + sy[i])) {\n                ctx.closePath();\n                func.apply(ctx);\n                ctx.beginPath();\n                continue;\n            }\n            else\n                ctx.lineTo(sx[i], sy[i]);\n        }\n        ctx.closePath();\n        func.call(ctx);\n    }\n    _render(ctx, indices, { sx, sy }) {\n        if (this.visuals.fill.doit) {\n            this.visuals.fill.set_value(ctx);\n            this._inner_loop(ctx, indices, sx, sy, ctx.fill);\n        }\n        this.visuals.hatch.doit2(ctx, 0, () => this._inner_loop(ctx, indices, sx, sy, ctx.fill), () => this.renderer.request_render());\n        if (this.visuals.line.doit) {\n            this.visuals.line.set_value(ctx);\n            this._inner_loop(ctx, indices, sx, sy, ctx.stroke);\n        }\n    }\n    draw_legend_for_index(ctx, bbox, index) {\n        generic_area_legend(this.visuals, ctx, bbox, index);\n    }\n    _hit_point(geometry) {\n        const result = hittest.create_empty_hit_test_result();\n        if (hittest.point_in_poly(geometry.sx, geometry.sy, this.sx, this.sy)) {\n            result.add_to_selected_glyphs(this.model);\n            result.get_view = () => this;\n        }\n        return result;\n    }\n}\nPatchView.__name__ = \"PatchView\";\nexport class Patch extends XYGlyph {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Patch() {\n        this.prototype.default_view = PatchView;\n        this.mixins(['line', 'fill', 'hatch']);\n    }\n}\nPatch.__name__ = \"Patch\";\nPatch.init_Patch();\n//# sourceMappingURL=patch.js.map"]},"metadata":{},"sourceType":"module"}