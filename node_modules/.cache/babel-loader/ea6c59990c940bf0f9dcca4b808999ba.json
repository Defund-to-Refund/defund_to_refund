{"ast":null,"code":"import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { PolyAnnotation } from \"../../annotations/poly_annotation\";\nimport { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { copy } from \"../../../core/util/array\";\nimport { bk_tool_icon_polygon_select } from \"../../../styles/icons\";\nexport class PolySelectToolView extends SelectToolView {\n  initialize() {\n    super.initialize();\n    this.data = {\n      sx: [],\n      sy: []\n    };\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.active.change, () => this._active_change());\n  }\n\n  _active_change() {\n    if (!this.model.active) this._clear_data();\n  }\n\n  _keyup(ev) {\n    if (ev.keyCode == Keys.Enter) this._clear_data();\n  }\n\n  _doubletap(ev) {\n    const append = ev.shiftKey;\n\n    this._do_select(this.data.sx, this.data.sy, true, append);\n\n    this.plot_view.push_state('poly_select', {\n      selection: this.plot_view.get_selection()\n    });\n\n    this._clear_data();\n  }\n\n  _clear_data() {\n    this.data = {\n      sx: [],\n      sy: []\n    };\n    this.model.overlay.update({\n      xs: [],\n      ys: []\n    });\n  }\n\n  _tap(ev) {\n    const {\n      sx,\n      sy\n    } = ev;\n    const frame = this.plot_view.frame;\n    if (!frame.bbox.contains(sx, sy)) return;\n    this.data.sx.push(sx);\n    this.data.sy.push(sy);\n    this.model.overlay.update({\n      xs: copy(this.data.sx),\n      ys: copy(this.data.sy)\n    });\n  }\n\n  _do_select(sx, sy, final, append) {\n    const geometry = {\n      type: 'poly',\n      sx,\n      sy\n    };\n\n    this._select(geometry, final, append);\n  }\n\n}\nPolySelectToolView.__name__ = \"PolySelectToolView\";\n\nconst DEFAULT_POLY_OVERLAY = () => {\n  return new PolyAnnotation({\n    level: \"overlay\",\n    xs_units: \"screen\",\n    ys_units: \"screen\",\n    fill_color: {\n      value: \"lightgrey\"\n    },\n    fill_alpha: {\n      value: 0.5\n    },\n    line_color: {\n      value: \"black\"\n    },\n    line_alpha: {\n      value: 1.0\n    },\n    line_width: {\n      value: 2\n    },\n    line_dash: {\n      value: [4, 4]\n    }\n  });\n};\n\nexport class PolySelectTool extends SelectTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Poly Select\";\n    this.icon = bk_tool_icon_polygon_select;\n    this.event_type = \"tap\";\n    this.default_order = 11;\n  }\n\n  static init_PolySelectTool() {\n    this.prototype.default_view = PolySelectToolView;\n    this.define({\n      overlay: [p.Instance, DEFAULT_POLY_OVERLAY]\n    });\n    this.register_alias(\"poly_select\", () => new PolySelectTool());\n  }\n\n}\nPolySelectTool.__name__ = \"PolySelectTool\";\nPolySelectTool.init_PolySelectTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/gestures/poly_select_tool.js"],"names":["SelectTool","SelectToolView","PolyAnnotation","Keys","p","copy","bk_tool_icon_polygon_select","PolySelectToolView","initialize","data","sx","sy","connect_signals","connect","model","properties","active","change","_active_change","_clear_data","_keyup","ev","keyCode","Enter","_doubletap","append","shiftKey","_do_select","plot_view","push_state","selection","get_selection","overlay","update","xs","ys","_tap","frame","bbox","contains","push","final","geometry","type","_select","__name__","DEFAULT_POLY_OVERLAY","level","xs_units","ys_units","fill_color","value","fill_alpha","line_color","line_alpha","line_width","line_dash","PolySelectTool","constructor","attrs","tool_name","icon","event_type","default_order","init_PolySelectTool","prototype","default_view","define","Instance","register_alias"],"mappings":"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","sourcesContent":["import { SelectTool, SelectToolView } from \"./select_tool\";\nimport { PolyAnnotation } from \"../../annotations/poly_annotation\";\nimport { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { copy } from \"../../../core/util/array\";\nimport { bk_tool_icon_polygon_select } from \"../../../styles/icons\";\nexport class PolySelectToolView extends SelectToolView {\n    initialize() {\n        super.initialize();\n        this.data = { sx: [], sy: [] };\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.active.change, () => this._active_change());\n    }\n    _active_change() {\n        if (!this.model.active)\n            this._clear_data();\n    }\n    _keyup(ev) {\n        if (ev.keyCode == Keys.Enter)\n            this._clear_data();\n    }\n    _doubletap(ev) {\n        const append = ev.shiftKey;\n        this._do_select(this.data.sx, this.data.sy, true, append);\n        this.plot_view.push_state('poly_select', { selection: this.plot_view.get_selection() });\n        this._clear_data();\n    }\n    _clear_data() {\n        this.data = { sx: [], sy: [] };\n        this.model.overlay.update({ xs: [], ys: [] });\n    }\n    _tap(ev) {\n        const { sx, sy } = ev;\n        const frame = this.plot_view.frame;\n        if (!frame.bbox.contains(sx, sy))\n            return;\n        this.data.sx.push(sx);\n        this.data.sy.push(sy);\n        this.model.overlay.update({ xs: copy(this.data.sx), ys: copy(this.data.sy) });\n    }\n    _do_select(sx, sy, final, append) {\n        const geometry = { type: 'poly', sx, sy };\n        this._select(geometry, final, append);\n    }\n}\nPolySelectToolView.__name__ = \"PolySelectToolView\";\nconst DEFAULT_POLY_OVERLAY = () => {\n    return new PolyAnnotation({\n        level: \"overlay\",\n        xs_units: \"screen\",\n        ys_units: \"screen\",\n        fill_color: { value: \"lightgrey\" },\n        fill_alpha: { value: 0.5 },\n        line_color: { value: \"black\" },\n        line_alpha: { value: 1.0 },\n        line_width: { value: 2 },\n        line_dash: { value: [4, 4] },\n    });\n};\nexport class PolySelectTool extends SelectTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Poly Select\";\n        this.icon = bk_tool_icon_polygon_select;\n        this.event_type = \"tap\";\n        this.default_order = 11;\n    }\n    static init_PolySelectTool() {\n        this.prototype.default_view = PolySelectToolView;\n        this.define({\n            overlay: [p.Instance, DEFAULT_POLY_OVERLAY],\n        });\n        this.register_alias(\"poly_select\", () => new PolySelectTool());\n    }\n}\nPolySelectTool.__name__ = \"PolySelectTool\";\nPolySelectTool.init_PolySelectTool();\n//# sourceMappingURL=poly_select_tool.js.map"]},"metadata":{},"sourceType":"module"}