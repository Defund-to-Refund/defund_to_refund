{"ast":null,"code":"import { WebDataSource } from \"./web_data_source\";\nimport { logger } from \"../../core/logging\";\nimport * as p from \"../../core/properties\";\nexport class AjaxDataSource extends WebDataSource {\n  constructor(attrs) {\n    super(attrs);\n    this.initialized = false;\n  }\n\n  static init_AjaxDataSource() {\n    this.define({\n      polling_interval: [p.Number],\n      content_type: [p.String, 'application/json'],\n      http_headers: [p.Any, {}],\n      method: [p.HTTPMethod, 'POST'],\n      if_modified: [p.Boolean, false]\n    });\n  }\n\n  destroy() {\n    if (this.interval != null) clearInterval(this.interval);\n    super.destroy();\n  }\n\n  setup() {\n    if (!this.initialized) {\n      this.initialized = true;\n      this.get_data(this.mode);\n\n      if (this.polling_interval) {\n        const callback = () => this.get_data(this.mode, this.max_size, this.if_modified);\n\n        this.interval = setInterval(callback, this.polling_interval);\n      }\n    }\n  }\n\n  get_data(mode, max_size = 0, _if_modified = false) {\n    const xhr = this.prepare_request(); // TODO: if_modified\n\n    xhr.addEventListener(\"load\", () => this.do_load(xhr, mode, max_size));\n    xhr.addEventListener(\"error\", () => this.do_error(xhr));\n    xhr.send();\n  }\n\n  prepare_request() {\n    const xhr = new XMLHttpRequest();\n    xhr.open(this.method, this.data_url, true);\n    xhr.withCredentials = false;\n    xhr.setRequestHeader(\"Content-Type\", this.content_type);\n    const http_headers = this.http_headers;\n\n    for (const name in http_headers) {\n      const value = http_headers[name];\n      xhr.setRequestHeader(name, value);\n    }\n\n    return xhr;\n  }\n\n  do_load(xhr, mode, max_size) {\n    if (xhr.status === 200) {\n      const raw_data = JSON.parse(xhr.responseText);\n      this.load_data(raw_data, mode, max_size);\n    }\n  }\n\n  do_error(xhr) {\n    logger.error(`Failed to fetch JSON from ${this.data_url} with code ${xhr.status}`);\n  }\n\n}\nAjaxDataSource.__name__ = \"AjaxDataSource\";\nAjaxDataSource.init_AjaxDataSource();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/sources/ajax_data_source.js"],"names":["WebDataSource","logger","p","AjaxDataSource","constructor","attrs","initialized","init_AjaxDataSource","define","polling_interval","Number","content_type","String","http_headers","Any","method","HTTPMethod","if_modified","Boolean","destroy","interval","clearInterval","setup","get_data","mode","callback","max_size","setInterval","_if_modified","xhr","prepare_request","addEventListener","do_load","do_error","send","XMLHttpRequest","open","data_url","withCredentials","setRequestHeader","name","value","status","raw_data","JSON","parse","responseText","load_data","error","__name__"],"mappings":"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","sourcesContent":["import { WebDataSource } from \"./web_data_source\";\nimport { logger } from \"../../core/logging\";\nimport * as p from \"../../core/properties\";\nexport class AjaxDataSource extends WebDataSource {\n    constructor(attrs) {\n        super(attrs);\n        this.initialized = false;\n    }\n    static init_AjaxDataSource() {\n        this.define({\n            polling_interval: [p.Number],\n            content_type: [p.String, 'application/json'],\n            http_headers: [p.Any, {}],\n            method: [p.HTTPMethod, 'POST'],\n            if_modified: [p.Boolean, false],\n        });\n    }\n    destroy() {\n        if (this.interval != null)\n            clearInterval(this.interval);\n        super.destroy();\n    }\n    setup() {\n        if (!this.initialized) {\n            this.initialized = true;\n            this.get_data(this.mode);\n            if (this.polling_interval) {\n                const callback = () => this.get_data(this.mode, this.max_size, this.if_modified);\n                this.interval = setInterval(callback, this.polling_interval);\n            }\n        }\n    }\n    get_data(mode, max_size = 0, _if_modified = false) {\n        const xhr = this.prepare_request();\n        // TODO: if_modified\n        xhr.addEventListener(\"load\", () => this.do_load(xhr, mode, max_size));\n        xhr.addEventListener(\"error\", () => this.do_error(xhr));\n        xhr.send();\n    }\n    prepare_request() {\n        const xhr = new XMLHttpRequest();\n        xhr.open(this.method, this.data_url, true);\n        xhr.withCredentials = false;\n        xhr.setRequestHeader(\"Content-Type\", this.content_type);\n        const http_headers = this.http_headers;\n        for (const name in http_headers) {\n            const value = http_headers[name];\n            xhr.setRequestHeader(name, value);\n        }\n        return xhr;\n    }\n    do_load(xhr, mode, max_size) {\n        if (xhr.status === 200) {\n            const raw_data = JSON.parse(xhr.responseText);\n            this.load_data(raw_data, mode, max_size);\n        }\n    }\n    do_error(xhr) {\n        logger.error(`Failed to fetch JSON from ${this.data_url} with code ${xhr.status}`);\n    }\n}\nAjaxDataSource.__name__ = \"AjaxDataSource\";\nAjaxDataSource.init_AjaxDataSource();\n//# sourceMappingURL=ajax_data_source.js.map"]},"metadata":{},"sourceType":"module"}