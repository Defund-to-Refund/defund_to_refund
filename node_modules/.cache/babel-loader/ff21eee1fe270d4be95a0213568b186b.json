{"ast":null,"code":"import { CenterRotatable, CenterRotatableView } from \"./center_rotatable\";\nimport { generic_area_legend } from \"./utils\";\nimport * as hittest from \"../../core/hittest\";\nimport * as p from \"../../core/properties\";\nimport { max } from \"../../core/util/arrayable\";\nexport class RectView extends CenterRotatableView {\n  _set_data() {\n    this.max_w2 = 0;\n    if (this.model.properties.width.units == \"data\") this.max_w2 = this.max_width / 2;\n    this.max_h2 = 0;\n    if (this.model.properties.height.units == \"data\") this.max_h2 = this.max_height / 2;\n  }\n\n  _map_data() {\n    if (this.model.properties.width.units == \"data\") [this.sw, this.sx0] = this._map_dist_corner_for_data_side_length(this._x, this._width, this.renderer.xscale);else {\n      this.sw = this._width;\n      const n = this.sx.length;\n      this.sx0 = new Float64Array(n);\n\n      for (let i = 0; i < n; i++) this.sx0[i] = this.sx[i] - this.sw[i] / 2;\n    }\n    if (this.model.properties.height.units == \"data\") [this.sh, this.sy1] = this._map_dist_corner_for_data_side_length(this._y, this._height, this.renderer.yscale);else {\n      this.sh = this._height;\n      const n = this.sy.length;\n      this.sy1 = new Float64Array(n);\n\n      for (let i = 0; i < n; i++) this.sy1[i] = this.sy[i] - this.sh[i] / 2;\n    }\n    const n = this.sw.length;\n    this.ssemi_diag = new Float64Array(n);\n\n    for (let i = 0; i < n; i++) this.ssemi_diag[i] = Math.sqrt(this.sw[i] / 2 * this.sw[i] / 2 + this.sh[i] / 2 * this.sh[i] / 2);\n  }\n\n  _render(ctx, indices, {\n    sx,\n    sy,\n    sx0,\n    sy1,\n    sw,\n    sh,\n    _angle\n  }) {\n    if (this.visuals.fill.doit) {\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i])) continue; //no need to test the return value, we call fillRect for every glyph anyway\n\n        this.visuals.fill.set_vectorize(ctx, i);\n\n        if (_angle[i]) {\n          ctx.translate(sx[i], sy[i]);\n          ctx.rotate(_angle[i]);\n          ctx.fillRect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n          ctx.rotate(-_angle[i]);\n          ctx.translate(-sx[i], -sy[i]);\n        } else ctx.fillRect(sx0[i], sy1[i], sw[i], sh[i]);\n      }\n    }\n\n    if (this.visuals.line.doit) {\n      ctx.beginPath();\n\n      for (const i of indices) {\n        if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i])) continue; // fillRect does not fill zero-height or -width rects, but rect(...)\n        // does seem to stroke them (1px wide or tall). Explicitly ignore rects\n        // with zero width or height to be consistent\n\n        if (sw[i] == 0 || sh[i] == 0) continue;\n\n        if (_angle[i]) {\n          ctx.translate(sx[i], sy[i]);\n          ctx.rotate(_angle[i]);\n          ctx.rect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n          ctx.rotate(-_angle[i]);\n          ctx.translate(-sx[i], -sy[i]);\n        } else ctx.rect(sx0[i], sy1[i], sw[i], sh[i]);\n\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.stroke();\n        ctx.beginPath();\n      }\n\n      ctx.stroke();\n    }\n  }\n\n  _hit_rect(geometry) {\n    return this._hit_rect_against_index(geometry);\n  }\n\n  _hit_point(geometry) {\n    let {\n      sx,\n      sy\n    } = geometry;\n    const x = this.renderer.xscale.invert(sx);\n    const y = this.renderer.yscale.invert(sy);\n    const scenter_x = [];\n\n    for (let i = 0, end = this.sx0.length; i < end; i++) {\n      scenter_x.push(this.sx0[i] + this.sw[i] / 2);\n    }\n\n    const scenter_y = [];\n\n    for (let i = 0, end = this.sy1.length; i < end; i++) {\n      scenter_y.push(this.sy1[i] + this.sh[i] / 2);\n    }\n\n    const max_x2_ddist = max(this._ddist(0, scenter_x, this.ssemi_diag));\n    const max_y2_ddist = max(this._ddist(1, scenter_y, this.ssemi_diag));\n    const x0 = x - max_x2_ddist;\n    const x1 = x + max_x2_ddist;\n    const y0 = y - max_y2_ddist;\n    const y1 = y + max_y2_ddist;\n    const hits = [];\n\n    for (const i of this.index.indices({\n      x0,\n      x1,\n      y0,\n      y1\n    })) {\n      let height_in, width_in;\n\n      if (this._angle[i]) {\n        const s = Math.sin(-this._angle[i]);\n        const c = Math.cos(-this._angle[i]);\n        const px = c * (sx - this.sx[i]) - s * (sy - this.sy[i]) + this.sx[i];\n        const py = s * (sx - this.sx[i]) + c * (sy - this.sy[i]) + this.sy[i];\n        sx = px;\n        sy = py;\n        width_in = Math.abs(this.sx[i] - sx) <= this.sw[i] / 2;\n        height_in = Math.abs(this.sy[i] - sy) <= this.sh[i] / 2;\n      } else {\n        width_in = sx - this.sx0[i] <= this.sw[i] && sx - this.sx0[i] >= 0;\n        height_in = sy - this.sy1[i] <= this.sh[i] && sy - this.sy1[i] >= 0;\n      }\n\n      if (height_in && width_in) hits.push(i);\n    }\n\n    const result = hittest.create_empty_hit_test_result();\n    result.indices = hits;\n    return result;\n  }\n\n  _map_dist_corner_for_data_side_length(coord, side_length, scale) {\n    const n = coord.length;\n    const pt0 = new Float64Array(n);\n    const pt1 = new Float64Array(n);\n\n    for (let i = 0; i < n; i++) {\n      pt0[i] = Number(coord[i]) - side_length[i] / 2;\n      pt1[i] = Number(coord[i]) + side_length[i] / 2;\n    }\n\n    const spt0 = scale.v_compute(pt0);\n    const spt1 = scale.v_compute(pt1);\n    const sside_length = this.sdist(scale, pt0, side_length, 'edge', this.model.dilate);\n    let spt_corner = spt0;\n\n    for (let i = 0, end = spt0.length; i < end; i++) {\n      if (spt0[i] != spt1[i]) {\n        spt_corner = spt0[i] < spt1[i] ? spt0 : spt1;\n        break;\n      }\n    }\n\n    return [sside_length, spt_corner];\n  }\n\n  _ddist(dim, spts, spans) {\n    const scale = dim == 0 ? this.renderer.xscale : this.renderer.yscale;\n    const spt0 = spts;\n    const m = spt0.length;\n    const spt1 = new Float64Array(m);\n\n    for (let i = 0; i < m; i++) spt1[i] = spt0[i] + spans[i];\n\n    const pt0 = scale.v_invert(spt0);\n    const pt1 = scale.v_invert(spt1);\n    const n = pt0.length;\n    const ddist = new Float64Array(n);\n\n    for (let i = 0; i < n; i++) ddist[i] = Math.abs(pt1[i] - pt0[i]);\n\n    return ddist;\n  }\n\n  draw_legend_for_index(ctx, bbox, index) {\n    generic_area_legend(this.visuals, ctx, bbox, index);\n  }\n\n  _bounds({\n    x0,\n    x1,\n    y0,\n    y1\n  }) {\n    return {\n      x0: x0 - this.max_w2,\n      x1: x1 + this.max_w2,\n      y0: y0 - this.max_h2,\n      y1: y1 + this.max_h2\n    };\n  }\n\n}\nRectView.__name__ = \"RectView\";\nexport class Rect extends CenterRotatable {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Rect() {\n    this.prototype.default_view = RectView;\n    this.define({\n      dilate: [p.Boolean, false]\n    });\n  }\n\n}\nRect.__name__ = \"Rect\";\nRect.init_Rect();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/rect.js"],"names":["CenterRotatable","CenterRotatableView","generic_area_legend","hittest","p","max","RectView","_set_data","max_w2","model","properties","width","units","max_width","max_h2","height","max_height","_map_data","sw","sx0","_map_dist_corner_for_data_side_length","_x","_width","renderer","xscale","n","sx","length","Float64Array","i","sh","sy1","_y","_height","yscale","sy","ssemi_diag","Math","sqrt","_render","ctx","indices","_angle","visuals","fill","doit","isNaN","set_vectorize","translate","rotate","fillRect","line","beginPath","rect","stroke","_hit_rect","geometry","_hit_rect_against_index","_hit_point","x","invert","y","scenter_x","end","push","scenter_y","max_x2_ddist","_ddist","max_y2_ddist","x0","x1","y0","y1","hits","index","height_in","width_in","s","sin","c","cos","px","py","abs","result","create_empty_hit_test_result","coord","side_length","scale","pt0","pt1","Number","spt0","v_compute","spt1","sside_length","sdist","dilate","spt_corner","dim","spts","spans","m","v_invert","ddist","draw_legend_for_index","bbox","_bounds","__name__","Rect","constructor","attrs","init_Rect","prototype","default_view","define","Boolean"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,mBAA1B,QAAqD,oBAArD;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,GAAT,QAAoB,2BAApB;AACA,OAAO,MAAMC,QAAN,SAAuBL,mBAAvB,CAA2C;AAC9CM,EAAAA,SAAS,GAAG;AACR,SAAKC,MAAL,GAAc,CAAd;AACA,QAAI,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,KAAtB,CAA4BC,KAA5B,IAAqC,MAAzC,EACI,KAAKJ,MAAL,GAAc,KAAKK,SAAL,GAAiB,CAA/B;AACJ,SAAKC,MAAL,GAAc,CAAd;AACA,QAAI,KAAKL,KAAL,CAAWC,UAAX,CAAsBK,MAAtB,CAA6BH,KAA7B,IAAsC,MAA1C,EACI,KAAKE,MAAL,GAAc,KAAKE,UAAL,GAAkB,CAAhC;AACP;;AACDC,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKR,KAAL,CAAWC,UAAX,CAAsBC,KAAtB,CAA4BC,KAA5B,IAAqC,MAAzC,EACI,CAAC,KAAKM,EAAN,EAAU,KAAKC,GAAf,IAAsB,KAAKC,qCAAL,CAA2C,KAAKC,EAAhD,EAAoD,KAAKC,MAAzD,EAAiE,KAAKC,QAAL,CAAcC,MAA/E,CAAtB,CADJ,KAEK;AACD,WAAKN,EAAL,GAAU,KAAKI,MAAf;AACA,YAAMG,CAAC,GAAG,KAAKC,EAAL,CAAQC,MAAlB;AACA,WAAKR,GAAL,GAAW,IAAIS,YAAJ,CAAiBH,CAAjB,CAAX;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EACI,KAAKV,GAAL,CAASU,CAAT,IAAc,KAAKH,EAAL,CAAQG,CAAR,IAAa,KAAKX,EAAL,CAAQW,CAAR,IAAa,CAAxC;AACP;AACD,QAAI,KAAKpB,KAAL,CAAWC,UAAX,CAAsBK,MAAtB,CAA6BH,KAA7B,IAAsC,MAA1C,EACI,CAAC,KAAKkB,EAAN,EAAU,KAAKC,GAAf,IAAsB,KAAKX,qCAAL,CAA2C,KAAKY,EAAhD,EAAoD,KAAKC,OAAzD,EAAkE,KAAKV,QAAL,CAAcW,MAAhF,CAAtB,CADJ,KAEK;AACD,WAAKJ,EAAL,GAAU,KAAKG,OAAf;AACA,YAAMR,CAAC,GAAG,KAAKU,EAAL,CAAQR,MAAlB;AACA,WAAKI,GAAL,GAAW,IAAIH,YAAJ,CAAiBH,CAAjB,CAAX;;AACA,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EACI,KAAKE,GAAL,CAASF,CAAT,IAAc,KAAKM,EAAL,CAAQN,CAAR,IAAa,KAAKC,EAAL,CAAQD,CAAR,IAAa,CAAxC;AACP;AACD,UAAMJ,CAAC,GAAG,KAAKP,EAAL,CAAQS,MAAlB;AACA,SAAKS,UAAL,GAAkB,IAAIR,YAAJ,CAAiBH,CAAjB,CAAlB;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EACI,KAAKO,UAAL,CAAgBP,CAAhB,IAAqBQ,IAAI,CAACC,IAAL,CAAW,KAAKpB,EAAL,CAAQW,CAAR,IAAa,CAAb,GAAiB,KAAKX,EAAL,CAAQW,CAAR,CAAlB,GAAgC,CAAhC,GAAqC,KAAKC,EAAL,CAAQD,CAAR,IAAa,CAAb,GAAiB,KAAKC,EAAL,CAAQD,CAAR,CAAlB,GAAgC,CAA9E,CAArB;AACP;;AACDU,EAAAA,OAAO,CAACC,GAAD,EAAMC,OAAN,EAAe;AAAEf,IAAAA,EAAF;AAAMS,IAAAA,EAAN;AAAUhB,IAAAA,GAAV;AAAeY,IAAAA,GAAf;AAAoBb,IAAAA,EAApB;AAAwBY,IAAAA,EAAxB;AAA4BY,IAAAA;AAA5B,GAAf,EAAqD;AACxD,QAAI,KAAKC,OAAL,CAAaC,IAAb,CAAkBC,IAAtB,EAA4B;AACxB,WAAK,MAAMhB,CAAX,IAAgBY,OAAhB,EAAyB;AACrB,YAAIK,KAAK,CAACpB,EAAE,CAACG,CAAD,CAAF,GAAQM,EAAE,CAACN,CAAD,CAAV,GAAgBV,GAAG,CAACU,CAAD,CAAnB,GAAyBE,GAAG,CAACF,CAAD,CAA5B,GAAkCX,EAAE,CAACW,CAAD,CAApC,GAA0CC,EAAE,CAACD,CAAD,CAA5C,GAAkDa,MAAM,CAACb,CAAD,CAAzD,CAAT,EACI,SAFiB,CAGrB;;AACA,aAAKc,OAAL,CAAaC,IAAb,CAAkBG,aAAlB,CAAgCP,GAAhC,EAAqCX,CAArC;;AACA,YAAIa,MAAM,CAACb,CAAD,CAAV,EAAe;AACXW,UAAAA,GAAG,CAACQ,SAAJ,CAActB,EAAE,CAACG,CAAD,CAAhB,EAAqBM,EAAE,CAACN,CAAD,CAAvB;AACAW,UAAAA,GAAG,CAACS,MAAJ,CAAWP,MAAM,CAACb,CAAD,CAAjB;AACAW,UAAAA,GAAG,CAACU,QAAJ,CAAa,CAAChC,EAAE,CAACW,CAAD,CAAH,GAAS,CAAtB,EAAyB,CAACC,EAAE,CAACD,CAAD,CAAH,GAAS,CAAlC,EAAqCX,EAAE,CAACW,CAAD,CAAvC,EAA4CC,EAAE,CAACD,CAAD,CAA9C;AACAW,UAAAA,GAAG,CAACS,MAAJ,CAAW,CAACP,MAAM,CAACb,CAAD,CAAlB;AACAW,UAAAA,GAAG,CAACQ,SAAJ,CAAc,CAACtB,EAAE,CAACG,CAAD,CAAjB,EAAsB,CAACM,EAAE,CAACN,CAAD,CAAzB;AACH,SAND,MAQIW,GAAG,CAACU,QAAJ,CAAa/B,GAAG,CAACU,CAAD,CAAhB,EAAqBE,GAAG,CAACF,CAAD,CAAxB,EAA6BX,EAAE,CAACW,CAAD,CAA/B,EAAoCC,EAAE,CAACD,CAAD,CAAtC;AACP;AACJ;;AACD,QAAI,KAAKc,OAAL,CAAaQ,IAAb,CAAkBN,IAAtB,EAA4B;AACxBL,MAAAA,GAAG,CAACY,SAAJ;;AACA,WAAK,MAAMvB,CAAX,IAAgBY,OAAhB,EAAyB;AACrB,YAAIK,KAAK,CAACpB,EAAE,CAACG,CAAD,CAAF,GAAQM,EAAE,CAACN,CAAD,CAAV,GAAgBV,GAAG,CAACU,CAAD,CAAnB,GAAyBE,GAAG,CAACF,CAAD,CAA5B,GAAkCX,EAAE,CAACW,CAAD,CAApC,GAA0CC,EAAE,CAACD,CAAD,CAA5C,GAAkDa,MAAM,CAACb,CAAD,CAAzD,CAAT,EACI,SAFiB,CAGrB;AACA;AACA;;AACA,YAAIX,EAAE,CAACW,CAAD,CAAF,IAAS,CAAT,IAAcC,EAAE,CAACD,CAAD,CAAF,IAAS,CAA3B,EACI;;AACJ,YAAIa,MAAM,CAACb,CAAD,CAAV,EAAe;AACXW,UAAAA,GAAG,CAACQ,SAAJ,CAActB,EAAE,CAACG,CAAD,CAAhB,EAAqBM,EAAE,CAACN,CAAD,CAAvB;AACAW,UAAAA,GAAG,CAACS,MAAJ,CAAWP,MAAM,CAACb,CAAD,CAAjB;AACAW,UAAAA,GAAG,CAACa,IAAJ,CAAS,CAACnC,EAAE,CAACW,CAAD,CAAH,GAAS,CAAlB,EAAqB,CAACC,EAAE,CAACD,CAAD,CAAH,GAAS,CAA9B,EAAiCX,EAAE,CAACW,CAAD,CAAnC,EAAwCC,EAAE,CAACD,CAAD,CAA1C;AACAW,UAAAA,GAAG,CAACS,MAAJ,CAAW,CAACP,MAAM,CAACb,CAAD,CAAlB;AACAW,UAAAA,GAAG,CAACQ,SAAJ,CAAc,CAACtB,EAAE,CAACG,CAAD,CAAjB,EAAsB,CAACM,EAAE,CAACN,CAAD,CAAzB;AACH,SAND,MAQIW,GAAG,CAACa,IAAJ,CAASlC,GAAG,CAACU,CAAD,CAAZ,EAAiBE,GAAG,CAACF,CAAD,CAApB,EAAyBX,EAAE,CAACW,CAAD,CAA3B,EAAgCC,EAAE,CAACD,CAAD,CAAlC;;AACJ,aAAKc,OAAL,CAAaQ,IAAb,CAAkBJ,aAAlB,CAAgCP,GAAhC,EAAqCX,CAArC;AACAW,QAAAA,GAAG,CAACc,MAAJ;AACAd,QAAAA,GAAG,CAACY,SAAJ;AACH;;AACDZ,MAAAA,GAAG,CAACc,MAAJ;AACH;AACJ;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAW;AAChB,WAAO,KAAKC,uBAAL,CAA6BD,QAA7B,CAAP;AACH;;AACDE,EAAAA,UAAU,CAACF,QAAD,EAAW;AACjB,QAAI;AAAE9B,MAAAA,EAAF;AAAMS,MAAAA;AAAN,QAAaqB,QAAjB;AACA,UAAMG,CAAC,GAAG,KAAKpC,QAAL,CAAcC,MAAd,CAAqBoC,MAArB,CAA4BlC,EAA5B,CAAV;AACA,UAAMmC,CAAC,GAAG,KAAKtC,QAAL,CAAcW,MAAd,CAAqB0B,MAArB,CAA4BzB,EAA5B,CAAV;AACA,UAAM2B,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAIjC,CAAC,GAAG,CAAR,EAAWkC,GAAG,GAAG,KAAK5C,GAAL,CAASQ,MAA/B,EAAuCE,CAAC,GAAGkC,GAA3C,EAAgDlC,CAAC,EAAjD,EAAqD;AACjDiC,MAAAA,SAAS,CAACE,IAAV,CAAe,KAAK7C,GAAL,CAASU,CAAT,IAAc,KAAKX,EAAL,CAAQW,CAAR,IAAa,CAA1C;AACH;;AACD,UAAMoC,SAAS,GAAG,EAAlB;;AACA,SAAK,IAAIpC,CAAC,GAAG,CAAR,EAAWkC,GAAG,GAAG,KAAKhC,GAAL,CAASJ,MAA/B,EAAuCE,CAAC,GAAGkC,GAA3C,EAAgDlC,CAAC,EAAjD,EAAqD;AACjDoC,MAAAA,SAAS,CAACD,IAAV,CAAe,KAAKjC,GAAL,CAASF,CAAT,IAAc,KAAKC,EAAL,CAAQD,CAAR,IAAa,CAA1C;AACH;;AACD,UAAMqC,YAAY,GAAG7D,GAAG,CAAC,KAAK8D,MAAL,CAAY,CAAZ,EAAeL,SAAf,EAA0B,KAAK1B,UAA/B,CAAD,CAAxB;AACA,UAAMgC,YAAY,GAAG/D,GAAG,CAAC,KAAK8D,MAAL,CAAY,CAAZ,EAAeF,SAAf,EAA0B,KAAK7B,UAA/B,CAAD,CAAxB;AACA,UAAMiC,EAAE,GAAGV,CAAC,GAAGO,YAAf;AACA,UAAMI,EAAE,GAAGX,CAAC,GAAGO,YAAf;AACA,UAAMK,EAAE,GAAGV,CAAC,GAAGO,YAAf;AACA,UAAMI,EAAE,GAAGX,CAAC,GAAGO,YAAf;AACA,UAAMK,IAAI,GAAG,EAAb;;AACA,SAAK,MAAM5C,CAAX,IAAgB,KAAK6C,KAAL,CAAWjC,OAAX,CAAmB;AAAE4B,MAAAA,EAAF;AAAMC,MAAAA,EAAN;AAAUC,MAAAA,EAAV;AAAcC,MAAAA;AAAd,KAAnB,CAAhB,EAAwD;AACpD,UAAIG,SAAJ,EAAeC,QAAf;;AACA,UAAI,KAAKlC,MAAL,CAAYb,CAAZ,CAAJ,EAAoB;AAChB,cAAMgD,CAAC,GAAGxC,IAAI,CAACyC,GAAL,CAAS,CAAC,KAAKpC,MAAL,CAAYb,CAAZ,CAAV,CAAV;AACA,cAAMkD,CAAC,GAAG1C,IAAI,CAAC2C,GAAL,CAAS,CAAC,KAAKtC,MAAL,CAAYb,CAAZ,CAAV,CAAV;AACA,cAAMoD,EAAE,GAAGF,CAAC,IAAIrD,EAAE,GAAG,KAAKA,EAAL,CAAQG,CAAR,CAAT,CAAD,GAAwBgD,CAAC,IAAI1C,EAAE,GAAG,KAAKA,EAAL,CAAQN,CAAR,CAAT,CAAzB,GAAgD,KAAKH,EAAL,CAAQG,CAAR,CAA3D;AACA,cAAMqD,EAAE,GAAGL,CAAC,IAAInD,EAAE,GAAG,KAAKA,EAAL,CAAQG,CAAR,CAAT,CAAD,GAAwBkD,CAAC,IAAI5C,EAAE,GAAG,KAAKA,EAAL,CAAQN,CAAR,CAAT,CAAzB,GAAgD,KAAKM,EAAL,CAAQN,CAAR,CAA3D;AACAH,QAAAA,EAAE,GAAGuD,EAAL;AACA9C,QAAAA,EAAE,GAAG+C,EAAL;AACAN,QAAAA,QAAQ,GAAGvC,IAAI,CAAC8C,GAAL,CAAS,KAAKzD,EAAL,CAAQG,CAAR,IAAaH,EAAtB,KAA6B,KAAKR,EAAL,CAAQW,CAAR,IAAa,CAArD;AACA8C,QAAAA,SAAS,GAAGtC,IAAI,CAAC8C,GAAL,CAAS,KAAKhD,EAAL,CAAQN,CAAR,IAAaM,EAAtB,KAA6B,KAAKL,EAAL,CAAQD,CAAR,IAAa,CAAtD;AACH,OATD,MAUK;AACD+C,QAAAA,QAAQ,GAAIlD,EAAE,GAAG,KAAKP,GAAL,CAASU,CAAT,CAAL,IAAoB,KAAKX,EAAL,CAAQW,CAAR,CAArB,IAAqCH,EAAE,GAAG,KAAKP,GAAL,CAASU,CAAT,CAAL,IAAoB,CAApE;AACA8C,QAAAA,SAAS,GAAIxC,EAAE,GAAG,KAAKJ,GAAL,CAASF,CAAT,CAAL,IAAoB,KAAKC,EAAL,CAAQD,CAAR,CAArB,IAAqCM,EAAE,GAAG,KAAKJ,GAAL,CAASF,CAAT,CAAL,IAAoB,CAArE;AACH;;AACD,UAAI8C,SAAS,IAAIC,QAAjB,EACIH,IAAI,CAACT,IAAL,CAAUnC,CAAV;AACP;;AACD,UAAMuD,MAAM,GAAGjF,OAAO,CAACkF,4BAAR,EAAf;AACAD,IAAAA,MAAM,CAAC3C,OAAP,GAAiBgC,IAAjB;AACA,WAAOW,MAAP;AACH;;AACDhE,EAAAA,qCAAqC,CAACkE,KAAD,EAAQC,WAAR,EAAqBC,KAArB,EAA4B;AAC7D,UAAM/D,CAAC,GAAG6D,KAAK,CAAC3D,MAAhB;AACA,UAAM8D,GAAG,GAAG,IAAI7D,YAAJ,CAAiBH,CAAjB,CAAZ;AACA,UAAMiE,GAAG,GAAG,IAAI9D,YAAJ,CAAiBH,CAAjB,CAAZ;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EAA4B;AACxB4D,MAAAA,GAAG,CAAC5D,CAAD,CAAH,GAAS8D,MAAM,CAACL,KAAK,CAACzD,CAAD,CAAN,CAAN,GAAmB0D,WAAW,CAAC1D,CAAD,CAAX,GAAiB,CAA7C;AACA6D,MAAAA,GAAG,CAAC7D,CAAD,CAAH,GAAS8D,MAAM,CAACL,KAAK,CAACzD,CAAD,CAAN,CAAN,GAAmB0D,WAAW,CAAC1D,CAAD,CAAX,GAAiB,CAA7C;AACH;;AACD,UAAM+D,IAAI,GAAGJ,KAAK,CAACK,SAAN,CAAgBJ,GAAhB,CAAb;AACA,UAAMK,IAAI,GAAGN,KAAK,CAACK,SAAN,CAAgBH,GAAhB,CAAb;AACA,UAAMK,YAAY,GAAG,KAAKC,KAAL,CAAWR,KAAX,EAAkBC,GAAlB,EAAuBF,WAAvB,EAAoC,MAApC,EAA4C,KAAK9E,KAAL,CAAWwF,MAAvD,CAArB;AACA,QAAIC,UAAU,GAAGN,IAAjB;;AACA,SAAK,IAAI/D,CAAC,GAAG,CAAR,EAAWkC,GAAG,GAAG6B,IAAI,CAACjE,MAA3B,EAAmCE,CAAC,GAAGkC,GAAvC,EAA4ClC,CAAC,EAA7C,EAAiD;AAC7C,UAAI+D,IAAI,CAAC/D,CAAD,CAAJ,IAAWiE,IAAI,CAACjE,CAAD,CAAnB,EAAwB;AACpBqE,QAAAA,UAAU,GAAGN,IAAI,CAAC/D,CAAD,CAAJ,GAAUiE,IAAI,CAACjE,CAAD,CAAd,GAAoB+D,IAApB,GAA2BE,IAAxC;AACA;AACH;AACJ;;AACD,WAAO,CAACC,YAAD,EAAeG,UAAf,CAAP;AACH;;AACD/B,EAAAA,MAAM,CAACgC,GAAD,EAAMC,IAAN,EAAYC,KAAZ,EAAmB;AACrB,UAAMb,KAAK,GAAGW,GAAG,IAAI,CAAP,GAAW,KAAK5E,QAAL,CAAcC,MAAzB,GAAkC,KAAKD,QAAL,CAAcW,MAA9D;AACA,UAAM0D,IAAI,GAAGQ,IAAb;AACA,UAAME,CAAC,GAAGV,IAAI,CAACjE,MAAf;AACA,UAAMmE,IAAI,GAAG,IAAIlE,YAAJ,CAAiB0E,CAAjB,CAAb;;AACA,SAAK,IAAIzE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGyE,CAApB,EAAuBzE,CAAC,EAAxB,EACIiE,IAAI,CAACjE,CAAD,CAAJ,GAAU+D,IAAI,CAAC/D,CAAD,CAAJ,GAAUwE,KAAK,CAACxE,CAAD,CAAzB;;AACJ,UAAM4D,GAAG,GAAGD,KAAK,CAACe,QAAN,CAAeX,IAAf,CAAZ;AACA,UAAMF,GAAG,GAAGF,KAAK,CAACe,QAAN,CAAeT,IAAf,CAAZ;AACA,UAAMrE,CAAC,GAAGgE,GAAG,CAAC9D,MAAd;AACA,UAAM6E,KAAK,GAAG,IAAI5E,YAAJ,CAAiBH,CAAjB,CAAd;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,CAApB,EAAuBI,CAAC,EAAxB,EACI2E,KAAK,CAAC3E,CAAD,CAAL,GAAWQ,IAAI,CAAC8C,GAAL,CAASO,GAAG,CAAC7D,CAAD,CAAH,GAAS4D,GAAG,CAAC5D,CAAD,CAArB,CAAX;;AACJ,WAAO2E,KAAP;AACH;;AACDC,EAAAA,qBAAqB,CAACjE,GAAD,EAAMkE,IAAN,EAAYhC,KAAZ,EAAmB;AACpCxE,IAAAA,mBAAmB,CAAC,KAAKyC,OAAN,EAAeH,GAAf,EAAoBkE,IAApB,EAA0BhC,KAA1B,CAAnB;AACH;;AACDiC,EAAAA,OAAO,CAAC;AAAEtC,IAAAA,EAAF;AAAMC,IAAAA,EAAN;AAAUC,IAAAA,EAAV;AAAcC,IAAAA;AAAd,GAAD,EAAqB;AACxB,WAAO;AACHH,MAAAA,EAAE,EAAEA,EAAE,GAAG,KAAK7D,MADX;AAEH8D,MAAAA,EAAE,EAAEA,EAAE,GAAG,KAAK9D,MAFX;AAGH+D,MAAAA,EAAE,EAAEA,EAAE,GAAG,KAAKzD,MAHX;AAIH0D,MAAAA,EAAE,EAAEA,EAAE,GAAG,KAAK1D;AAJX,KAAP;AAMH;;AAvK6C;AAyKlDR,QAAQ,CAACsG,QAAT,GAAoB,UAApB;AACA,OAAO,MAAMC,IAAN,SAAmB7G,eAAnB,CAAmC;AACtC8G,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,SAAP,GAAmB;AACf,SAAKC,SAAL,CAAeC,YAAf,GAA8B5G,QAA9B;AACA,SAAK6G,MAAL,CAAY;AACRlB,MAAAA,MAAM,EAAE,CAAC7F,CAAC,CAACgH,OAAH,EAAY,KAAZ;AADA,KAAZ;AAGH;;AATqC;AAW1CP,IAAI,CAACD,QAAL,GAAgB,MAAhB;AACAC,IAAI,CAACG,SAAL","sourcesContent":["import { CenterRotatable, CenterRotatableView } from \"./center_rotatable\";\nimport { generic_area_legend } from \"./utils\";\nimport * as hittest from \"../../core/hittest\";\nimport * as p from \"../../core/properties\";\nimport { max } from \"../../core/util/arrayable\";\nexport class RectView extends CenterRotatableView {\n    _set_data() {\n        this.max_w2 = 0;\n        if (this.model.properties.width.units == \"data\")\n            this.max_w2 = this.max_width / 2;\n        this.max_h2 = 0;\n        if (this.model.properties.height.units == \"data\")\n            this.max_h2 = this.max_height / 2;\n    }\n    _map_data() {\n        if (this.model.properties.width.units == \"data\")\n            [this.sw, this.sx0] = this._map_dist_corner_for_data_side_length(this._x, this._width, this.renderer.xscale);\n        else {\n            this.sw = this._width;\n            const n = this.sx.length;\n            this.sx0 = new Float64Array(n);\n            for (let i = 0; i < n; i++)\n                this.sx0[i] = this.sx[i] - this.sw[i] / 2;\n        }\n        if (this.model.properties.height.units == \"data\")\n            [this.sh, this.sy1] = this._map_dist_corner_for_data_side_length(this._y, this._height, this.renderer.yscale);\n        else {\n            this.sh = this._height;\n            const n = this.sy.length;\n            this.sy1 = new Float64Array(n);\n            for (let i = 0; i < n; i++)\n                this.sy1[i] = this.sy[i] - this.sh[i] / 2;\n        }\n        const n = this.sw.length;\n        this.ssemi_diag = new Float64Array(n);\n        for (let i = 0; i < n; i++)\n            this.ssemi_diag[i] = Math.sqrt((this.sw[i] / 2 * this.sw[i]) / 2 + (this.sh[i] / 2 * this.sh[i]) / 2);\n    }\n    _render(ctx, indices, { sx, sy, sx0, sy1, sw, sh, _angle }) {\n        if (this.visuals.fill.doit) {\n            for (const i of indices) {\n                if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i]))\n                    continue;\n                //no need to test the return value, we call fillRect for every glyph anyway\n                this.visuals.fill.set_vectorize(ctx, i);\n                if (_angle[i]) {\n                    ctx.translate(sx[i], sy[i]);\n                    ctx.rotate(_angle[i]);\n                    ctx.fillRect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n                    ctx.rotate(-_angle[i]);\n                    ctx.translate(-sx[i], -sy[i]);\n                }\n                else\n                    ctx.fillRect(sx0[i], sy1[i], sw[i], sh[i]);\n            }\n        }\n        if (this.visuals.line.doit) {\n            ctx.beginPath();\n            for (const i of indices) {\n                if (isNaN(sx[i] + sy[i] + sx0[i] + sy1[i] + sw[i] + sh[i] + _angle[i]))\n                    continue;\n                // fillRect does not fill zero-height or -width rects, but rect(...)\n                // does seem to stroke them (1px wide or tall). Explicitly ignore rects\n                // with zero width or height to be consistent\n                if (sw[i] == 0 || sh[i] == 0)\n                    continue;\n                if (_angle[i]) {\n                    ctx.translate(sx[i], sy[i]);\n                    ctx.rotate(_angle[i]);\n                    ctx.rect(-sw[i] / 2, -sh[i] / 2, sw[i], sh[i]);\n                    ctx.rotate(-_angle[i]);\n                    ctx.translate(-sx[i], -sy[i]);\n                }\n                else\n                    ctx.rect(sx0[i], sy1[i], sw[i], sh[i]);\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.stroke();\n                ctx.beginPath();\n            }\n            ctx.stroke();\n        }\n    }\n    _hit_rect(geometry) {\n        return this._hit_rect_against_index(geometry);\n    }\n    _hit_point(geometry) {\n        let { sx, sy } = geometry;\n        const x = this.renderer.xscale.invert(sx);\n        const y = this.renderer.yscale.invert(sy);\n        const scenter_x = [];\n        for (let i = 0, end = this.sx0.length; i < end; i++) {\n            scenter_x.push(this.sx0[i] + this.sw[i] / 2);\n        }\n        const scenter_y = [];\n        for (let i = 0, end = this.sy1.length; i < end; i++) {\n            scenter_y.push(this.sy1[i] + this.sh[i] / 2);\n        }\n        const max_x2_ddist = max(this._ddist(0, scenter_x, this.ssemi_diag));\n        const max_y2_ddist = max(this._ddist(1, scenter_y, this.ssemi_diag));\n        const x0 = x - max_x2_ddist;\n        const x1 = x + max_x2_ddist;\n        const y0 = y - max_y2_ddist;\n        const y1 = y + max_y2_ddist;\n        const hits = [];\n        for (const i of this.index.indices({ x0, x1, y0, y1 })) {\n            let height_in, width_in;\n            if (this._angle[i]) {\n                const s = Math.sin(-this._angle[i]);\n                const c = Math.cos(-this._angle[i]);\n                const px = c * (sx - this.sx[i]) - s * (sy - this.sy[i]) + this.sx[i];\n                const py = s * (sx - this.sx[i]) + c * (sy - this.sy[i]) + this.sy[i];\n                sx = px;\n                sy = py;\n                width_in = Math.abs(this.sx[i] - sx) <= this.sw[i] / 2;\n                height_in = Math.abs(this.sy[i] - sy) <= this.sh[i] / 2;\n            }\n            else {\n                width_in = (sx - this.sx0[i] <= this.sw[i]) && (sx - this.sx0[i] >= 0);\n                height_in = (sy - this.sy1[i] <= this.sh[i]) && (sy - this.sy1[i] >= 0);\n            }\n            if (height_in && width_in)\n                hits.push(i);\n        }\n        const result = hittest.create_empty_hit_test_result();\n        result.indices = hits;\n        return result;\n    }\n    _map_dist_corner_for_data_side_length(coord, side_length, scale) {\n        const n = coord.length;\n        const pt0 = new Float64Array(n);\n        const pt1 = new Float64Array(n);\n        for (let i = 0; i < n; i++) {\n            pt0[i] = Number(coord[i]) - side_length[i] / 2;\n            pt1[i] = Number(coord[i]) + side_length[i] / 2;\n        }\n        const spt0 = scale.v_compute(pt0);\n        const spt1 = scale.v_compute(pt1);\n        const sside_length = this.sdist(scale, pt0, side_length, 'edge', this.model.dilate);\n        let spt_corner = spt0;\n        for (let i = 0, end = spt0.length; i < end; i++) {\n            if (spt0[i] != spt1[i]) {\n                spt_corner = spt0[i] < spt1[i] ? spt0 : spt1;\n                break;\n            }\n        }\n        return [sside_length, spt_corner];\n    }\n    _ddist(dim, spts, spans) {\n        const scale = dim == 0 ? this.renderer.xscale : this.renderer.yscale;\n        const spt0 = spts;\n        const m = spt0.length;\n        const spt1 = new Float64Array(m);\n        for (let i = 0; i < m; i++)\n            spt1[i] = spt0[i] + spans[i];\n        const pt0 = scale.v_invert(spt0);\n        const pt1 = scale.v_invert(spt1);\n        const n = pt0.length;\n        const ddist = new Float64Array(n);\n        for (let i = 0; i < n; i++)\n            ddist[i] = Math.abs(pt1[i] - pt0[i]);\n        return ddist;\n    }\n    draw_legend_for_index(ctx, bbox, index) {\n        generic_area_legend(this.visuals, ctx, bbox, index);\n    }\n    _bounds({ x0, x1, y0, y1 }) {\n        return {\n            x0: x0 - this.max_w2,\n            x1: x1 + this.max_w2,\n            y0: y0 - this.max_h2,\n            y1: y1 + this.max_h2,\n        };\n    }\n}\nRectView.__name__ = \"RectView\";\nexport class Rect extends CenterRotatable {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Rect() {\n        this.prototype.default_view = RectView;\n        this.define({\n            dilate: [p.Boolean, false],\n        });\n    }\n}\nRect.__name__ = \"Rect\";\nRect.init_Rect();\n//# sourceMappingURL=rect.js.map"]},"metadata":{},"sourceType":"module"}