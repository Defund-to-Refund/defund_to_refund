{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport { display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { measure_font } from \"../../core/util/text\";\nimport { bk_annotation } from \"../../styles/annotations\";\nimport { unreachable } from \"../../core/util/assert\";\nexport class TextAnnotationView extends AnnotationView {\n  constructor() {\n    super(...arguments);\n    this.rotate = true;\n  }\n\n  initialize() {\n    super.initialize();\n\n    if (this.model.render_mode == 'css') {\n      this.el.classList.add(bk_annotation);\n      this.plot_view.canvas_view.add_overlay(this.el);\n    }\n  }\n\n  connect_signals() {\n    super.connect_signals();\n\n    if (this.model.render_mode == 'css') {\n      // dispatch CSS update immediately\n      this.connect(this.model.change, () => this.render());\n    } else {\n      this.connect(this.model.change, () => this.plot_view.request_render());\n    }\n  }\n\n  _calculate_text_dimensions(ctx, text) {\n    const {\n      width\n    } = ctx.measureText(text);\n    const {\n      height\n    } = measure_font(this.visuals.text.font_value());\n    return [width, height];\n  }\n\n  _calculate_bounding_box_dimensions(ctx, text) {\n    const [width, height] = this._calculate_text_dimensions(ctx, text);\n\n    let x_offset;\n\n    switch (ctx.textAlign) {\n      case 'left':\n        x_offset = 0;\n        break;\n\n      case 'center':\n        x_offset = -width / 2;\n        break;\n\n      case 'right':\n        x_offset = -width;\n        break;\n\n      default:\n        unreachable();\n    } // guestimated from https://www.w3.org/TR/2dcontext/#dom-context-2d-textbaseline\n\n\n    let y_offset;\n\n    switch (ctx.textBaseline) {\n      case 'top':\n        y_offset = 0.0;\n        break;\n\n      case 'middle':\n        y_offset = -0.5 * height;\n        break;\n\n      case 'bottom':\n        y_offset = -1.0 * height;\n        break;\n\n      case 'alphabetic':\n        y_offset = -0.8 * height;\n        break;\n\n      case 'hanging':\n        y_offset = -0.17 * height;\n        break;\n\n      case 'ideographic':\n        y_offset = -0.83 * height;\n        break;\n\n      default:\n        unreachable();\n    }\n\n    return [x_offset, y_offset, width, height];\n  }\n\n  _canvas_text(ctx, text, sx, sy, angle) {\n    this.visuals.text.set_value(ctx);\n\n    const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n\n    ctx.save();\n    ctx.beginPath();\n    ctx.translate(sx, sy);\n    if (angle) ctx.rotate(angle);\n    ctx.rect(bbox_dims[0], bbox_dims[1], bbox_dims[2], bbox_dims[3]);\n\n    if (this.visuals.background_fill.doit) {\n      this.visuals.background_fill.set_value(ctx);\n      ctx.fill();\n    }\n\n    if (this.visuals.border_line.doit) {\n      this.visuals.border_line.set_value(ctx);\n      ctx.stroke();\n    }\n\n    if (this.visuals.text.doit) {\n      this.visuals.text.set_value(ctx);\n      ctx.fillText(text, 0, 0);\n    }\n\n    ctx.restore();\n  }\n\n  _css_text(ctx, text, sx, sy, angle) {\n    undisplay(this.el);\n    this.visuals.text.set_value(ctx);\n\n    const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text); // attempt to support vector string-style (\"8 4 8\") line dashing for css mode\n\n\n    const ld = this.visuals.border_line.line_dash.value();\n    const line_dash = ld.length < 2 ? \"solid\" : \"dashed\";\n    this.visuals.border_line.set_value(ctx);\n    this.visuals.background_fill.set_value(ctx);\n    this.el.style.position = 'absolute';\n    this.el.style.left = `${sx + bbox_dims[0]}px`;\n    this.el.style.top = `${sy + bbox_dims[1]}px`;\n    this.el.style.color = `${this.visuals.text.text_color.value()}`;\n    this.el.style.opacity = `${this.visuals.text.text_alpha.value()}`;\n    this.el.style.font = `${this.visuals.text.font_value()}`;\n    this.el.style.lineHeight = \"normal\"; // needed to prevent ipynb css override\n\n    if (angle) {\n      this.el.style.transform = `rotate(${angle}rad)`;\n    }\n\n    if (this.visuals.background_fill.doit) {\n      this.el.style.backgroundColor = `${this.visuals.background_fill.color_value()}`;\n    }\n\n    if (this.visuals.border_line.doit) {\n      this.el.style.borderStyle = `${line_dash}`;\n      this.el.style.borderWidth = `${this.visuals.border_line.line_width.value()}px`;\n      this.el.style.borderColor = `${this.visuals.border_line.color_value()}`;\n    }\n\n    this.el.textContent = text;\n    display(this.el);\n  }\n\n}\nTextAnnotationView.__name__ = \"TextAnnotationView\";\nexport class TextAnnotation extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_TextAnnotation() {\n    this.define({\n      render_mode: [p.RenderMode, \"canvas\"]\n    });\n  }\n\n}\nTextAnnotation.__name__ = \"TextAnnotation\";\nTextAnnotation.init_TextAnnotation();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/text_annotation.js"],"names":["Annotation","AnnotationView","display","undisplay","p","measure_font","bk_annotation","unreachable","TextAnnotationView","constructor","arguments","rotate","initialize","model","render_mode","el","classList","add","plot_view","canvas_view","add_overlay","connect_signals","connect","change","render","request_render","_calculate_text_dimensions","ctx","text","width","measureText","height","visuals","font_value","_calculate_bounding_box_dimensions","x_offset","textAlign","y_offset","textBaseline","_canvas_text","sx","sy","angle","set_value","bbox_dims","save","beginPath","translate","rect","background_fill","doit","fill","border_line","stroke","fillText","restore","_css_text","ld","line_dash","value","length","style","position","left","top","color","text_color","opacity","text_alpha","font","lineHeight","transform","backgroundColor","color_value","borderStyle","borderWidth","line_width","borderColor","textContent","__name__","TextAnnotation","attrs","init_TextAnnotation","define","RenderMode"],"mappings":"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","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport { display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { measure_font } from \"../../core/util/text\";\nimport { bk_annotation } from \"../../styles/annotations\";\nimport { unreachable } from \"../../core/util/assert\";\nexport class TextAnnotationView extends AnnotationView {\n    constructor() {\n        super(...arguments);\n        this.rotate = true;\n    }\n    initialize() {\n        super.initialize();\n        if (this.model.render_mode == 'css') {\n            this.el.classList.add(bk_annotation);\n            this.plot_view.canvas_view.add_overlay(this.el);\n        }\n    }\n    connect_signals() {\n        super.connect_signals();\n        if (this.model.render_mode == 'css') {\n            // dispatch CSS update immediately\n            this.connect(this.model.change, () => this.render());\n        }\n        else {\n            this.connect(this.model.change, () => this.plot_view.request_render());\n        }\n    }\n    _calculate_text_dimensions(ctx, text) {\n        const { width } = ctx.measureText(text);\n        const { height } = measure_font(this.visuals.text.font_value());\n        return [width, height];\n    }\n    _calculate_bounding_box_dimensions(ctx, text) {\n        const [width, height] = this._calculate_text_dimensions(ctx, text);\n        let x_offset;\n        switch (ctx.textAlign) {\n            case 'left':\n                x_offset = 0;\n                break;\n            case 'center':\n                x_offset = -width / 2;\n                break;\n            case 'right':\n                x_offset = -width;\n                break;\n            default:\n                unreachable();\n        }\n        // guestimated from https://www.w3.org/TR/2dcontext/#dom-context-2d-textbaseline\n        let y_offset;\n        switch (ctx.textBaseline) {\n            case 'top':\n                y_offset = 0.0;\n                break;\n            case 'middle':\n                y_offset = -0.5 * height;\n                break;\n            case 'bottom':\n                y_offset = -1.0 * height;\n                break;\n            case 'alphabetic':\n                y_offset = -0.8 * height;\n                break;\n            case 'hanging':\n                y_offset = -0.17 * height;\n                break;\n            case 'ideographic':\n                y_offset = -0.83 * height;\n                break;\n            default:\n                unreachable();\n        }\n        return [x_offset, y_offset, width, height];\n    }\n    _canvas_text(ctx, text, sx, sy, angle) {\n        this.visuals.text.set_value(ctx);\n        const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        ctx.save();\n        ctx.beginPath();\n        ctx.translate(sx, sy);\n        if (angle)\n            ctx.rotate(angle);\n        ctx.rect(bbox_dims[0], bbox_dims[1], bbox_dims[2], bbox_dims[3]);\n        if (this.visuals.background_fill.doit) {\n            this.visuals.background_fill.set_value(ctx);\n            ctx.fill();\n        }\n        if (this.visuals.border_line.doit) {\n            this.visuals.border_line.set_value(ctx);\n            ctx.stroke();\n        }\n        if (this.visuals.text.doit) {\n            this.visuals.text.set_value(ctx);\n            ctx.fillText(text, 0, 0);\n        }\n        ctx.restore();\n    }\n    _css_text(ctx, text, sx, sy, angle) {\n        undisplay(this.el);\n        this.visuals.text.set_value(ctx);\n        const bbox_dims = this._calculate_bounding_box_dimensions(ctx, text);\n        // attempt to support vector string-style (\"8 4 8\") line dashing for css mode\n        const ld = this.visuals.border_line.line_dash.value();\n        const line_dash = ld.length < 2 ? \"solid\" : \"dashed\";\n        this.visuals.border_line.set_value(ctx);\n        this.visuals.background_fill.set_value(ctx);\n        this.el.style.position = 'absolute';\n        this.el.style.left = `${sx + bbox_dims[0]}px`;\n        this.el.style.top = `${sy + bbox_dims[1]}px`;\n        this.el.style.color = `${this.visuals.text.text_color.value()}`;\n        this.el.style.opacity = `${this.visuals.text.text_alpha.value()}`;\n        this.el.style.font = `${this.visuals.text.font_value()}`;\n        this.el.style.lineHeight = \"normal\"; // needed to prevent ipynb css override\n        if (angle) {\n            this.el.style.transform = `rotate(${angle}rad)`;\n        }\n        if (this.visuals.background_fill.doit) {\n            this.el.style.backgroundColor = `${this.visuals.background_fill.color_value()}`;\n        }\n        if (this.visuals.border_line.doit) {\n            this.el.style.borderStyle = `${line_dash}`;\n            this.el.style.borderWidth = `${this.visuals.border_line.line_width.value()}px`;\n            this.el.style.borderColor = `${this.visuals.border_line.color_value()}`;\n        }\n        this.el.textContent = text;\n        display(this.el);\n    }\n}\nTextAnnotationView.__name__ = \"TextAnnotationView\";\nexport class TextAnnotation extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_TextAnnotation() {\n        this.define({\n            render_mode: [p.RenderMode, \"canvas\"],\n        });\n    }\n}\nTextAnnotation.__name__ = \"TextAnnotation\";\nTextAnnotation.init_TextAnnotation();\n//# sourceMappingURL=text_annotation.js.map"]},"metadata":{},"sourceType":"module"}