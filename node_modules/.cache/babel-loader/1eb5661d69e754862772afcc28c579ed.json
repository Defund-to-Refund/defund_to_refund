{"ast":null,"code":"import { div, span, offset } from \"../dom\";\nconst cache = {};\nexport function measure_font(font) {\n  if (cache[font] != null) return cache[font];\n  const text = span({\n    style: {\n      font\n    }\n  }, \"Hg\");\n  const block = div({\n    style: {\n      display: \"inline-block\",\n      width: \"1px\",\n      height: \"0px\"\n    }\n  });\n  const elem = div({}, text, block);\n  document.body.appendChild(elem);\n\n  try {\n    block.style.verticalAlign = \"baseline\";\n    const ascent = offset(block).top - offset(text).top;\n    block.style.verticalAlign = \"bottom\";\n    const height = offset(block).top - offset(text).top;\n    const result = {\n      height,\n      ascent,\n      descent: height - ascent\n    };\n    cache[font] = result;\n    return result;\n  } finally {\n    document.body.removeChild(elem);\n  }\n}\nconst _cache = {};\nexport function measure_text(text, font) {\n  const text_cache = _cache[font];\n\n  if (text_cache != null) {\n    const size = text_cache[text];\n    if (size != null) return size;\n  } else _cache[font] = {};\n\n  const el = div({\n    style: {\n      display: \"inline-block\",\n      \"white-space\": \"nowrap\",\n      font\n    }\n  }, text);\n  document.body.appendChild(el);\n\n  try {\n    const {\n      width,\n      height\n    } = el.getBoundingClientRect();\n    _cache[font][text] = {\n      width,\n      height\n    };\n    return {\n      width,\n      height\n    };\n  } finally {\n    document.body.removeChild(el);\n  }\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/util/text.js"],"names":["div","span","offset","cache","measure_font","font","text","style","block","display","width","height","elem","document","body","appendChild","verticalAlign","ascent","top","result","descent","removeChild","_cache","measure_text","text_cache","size","el","getBoundingClientRect"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,MAApB,QAAkC,QAAlC;AACA,MAAMC,KAAK,GAAG,EAAd;AACA,OAAO,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AAC/B,MAAIF,KAAK,CAACE,IAAD,CAAL,IAAe,IAAnB,EACI,OAAOF,KAAK,CAACE,IAAD,CAAZ;AACJ,QAAMC,IAAI,GAAGL,IAAI,CAAC;AAAEM,IAAAA,KAAK,EAAE;AAAEF,MAAAA;AAAF;AAAT,GAAD,EAAsB,IAAtB,CAAjB;AACA,QAAMG,KAAK,GAAGR,GAAG,CAAC;AAAEO,IAAAA,KAAK,EAAE;AAAEE,MAAAA,OAAO,EAAE,cAAX;AAA2BC,MAAAA,KAAK,EAAE,KAAlC;AAAyCC,MAAAA,MAAM,EAAE;AAAjD;AAAT,GAAD,CAAjB;AACA,QAAMC,IAAI,GAAGZ,GAAG,CAAC,EAAD,EAAKM,IAAL,EAAWE,KAAX,CAAhB;AACAK,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BH,IAA1B;;AACA,MAAI;AACAJ,IAAAA,KAAK,CAACD,KAAN,CAAYS,aAAZ,GAA4B,UAA5B;AACA,UAAMC,MAAM,GAAGf,MAAM,CAACM,KAAD,CAAN,CAAcU,GAAd,GAAoBhB,MAAM,CAACI,IAAD,CAAN,CAAaY,GAAhD;AACAV,IAAAA,KAAK,CAACD,KAAN,CAAYS,aAAZ,GAA4B,QAA5B;AACA,UAAML,MAAM,GAAGT,MAAM,CAACM,KAAD,CAAN,CAAcU,GAAd,GAAoBhB,MAAM,CAACI,IAAD,CAAN,CAAaY,GAAhD;AACA,UAAMC,MAAM,GAAG;AAAER,MAAAA,MAAF;AAAUM,MAAAA,MAAV;AAAkBG,MAAAA,OAAO,EAAET,MAAM,GAAGM;AAApC,KAAf;AACAd,IAAAA,KAAK,CAACE,IAAD,CAAL,GAAcc,MAAd;AACA,WAAOA,MAAP;AACH,GARD,SASQ;AACJN,IAAAA,QAAQ,CAACC,IAAT,CAAcO,WAAd,CAA0BT,IAA1B;AACH;AACJ;AACD,MAAMU,MAAM,GAAG,EAAf;AACA,OAAO,SAASC,YAAT,CAAsBjB,IAAtB,EAA4BD,IAA5B,EAAkC;AACrC,QAAMmB,UAAU,GAAGF,MAAM,CAACjB,IAAD,CAAzB;;AACA,MAAImB,UAAU,IAAI,IAAlB,EAAwB;AACpB,UAAMC,IAAI,GAAGD,UAAU,CAAClB,IAAD,CAAvB;AACA,QAAImB,IAAI,IAAI,IAAZ,EACI,OAAOA,IAAP;AACP,GAJD,MAMIH,MAAM,CAACjB,IAAD,CAAN,GAAe,EAAf;;AACJ,QAAMqB,EAAE,GAAG1B,GAAG,CAAC;AAAEO,IAAAA,KAAK,EAAE;AAAEE,MAAAA,OAAO,EAAE,cAAX;AAA2B,qBAAe,QAA1C;AAAoDJ,MAAAA;AAApD;AAAT,GAAD,EAAwEC,IAAxE,CAAd;AACAO,EAAAA,QAAQ,CAACC,IAAT,CAAcC,WAAd,CAA0BW,EAA1B;;AACA,MAAI;AACA,UAAM;AAAEhB,MAAAA,KAAF;AAASC,MAAAA;AAAT,QAAoBe,EAAE,CAACC,qBAAH,EAA1B;AACAL,IAAAA,MAAM,CAACjB,IAAD,CAAN,CAAaC,IAAb,IAAqB;AAAEI,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAArB;AACA,WAAO;AAAED,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAAP;AACH,GAJD,SAKQ;AACJE,IAAAA,QAAQ,CAACC,IAAT,CAAcO,WAAd,CAA0BK,EAA1B;AACH;AACJ","sourcesContent":["import { div, span, offset } from \"../dom\";\nconst cache = {};\nexport function measure_font(font) {\n    if (cache[font] != null)\n        return cache[font];\n    const text = span({ style: { font } }, \"Hg\");\n    const block = div({ style: { display: \"inline-block\", width: \"1px\", height: \"0px\" } });\n    const elem = div({}, text, block);\n    document.body.appendChild(elem);\n    try {\n        block.style.verticalAlign = \"baseline\";\n        const ascent = offset(block).top - offset(text).top;\n        block.style.verticalAlign = \"bottom\";\n        const height = offset(block).top - offset(text).top;\n        const result = { height, ascent, descent: height - ascent };\n        cache[font] = result;\n        return result;\n    }\n    finally {\n        document.body.removeChild(elem);\n    }\n}\nconst _cache = {};\nexport function measure_text(text, font) {\n    const text_cache = _cache[font];\n    if (text_cache != null) {\n        const size = text_cache[text];\n        if (size != null)\n            return size;\n    }\n    else\n        _cache[font] = {};\n    const el = div({ style: { display: \"inline-block\", \"white-space\": \"nowrap\", font } }, text);\n    document.body.appendChild(el);\n    try {\n        const { width, height } = el.getBoundingClientRect();\n        _cache[font][text] = { width, height };\n        return { width, height };\n    }\n    finally {\n        document.body.removeChild(el);\n    }\n}\n//# sourceMappingURL=text.js.map"]},"metadata":{},"sourceType":"module"}