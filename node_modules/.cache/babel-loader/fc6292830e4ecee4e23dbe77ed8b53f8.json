{"ast":null,"code":"import { Marker, MarkerView } from \"./marker\";\nconst SQ3 = Math.sqrt(3);\n\nfunction _one_line(ctx, r) {\n  ctx.moveTo(-r, 0);\n  ctx.lineTo(r, 0);\n}\n\nfunction _one_x(ctx, r) {\n  ctx.moveTo(-r, r);\n  ctx.lineTo(r, -r);\n  ctx.moveTo(-r, -r);\n  ctx.lineTo(r, r);\n}\n\nfunction _one_cross(ctx, r) {\n  ctx.moveTo(0, r);\n  ctx.lineTo(0, -r);\n  ctx.moveTo(-r, 0);\n  ctx.lineTo(r, 0);\n}\n\nfunction _one_diamond(ctx, r) {\n  ctx.moveTo(0, r);\n  ctx.lineTo(r / 1.5, 0);\n  ctx.lineTo(0, -r);\n  ctx.lineTo(-r / 1.5, 0);\n  ctx.closePath();\n}\n\nfunction _one_hex(ctx, r) {\n  const r2 = r / 2;\n  const h = SQ3 * r2;\n  ctx.moveTo(r, 0);\n  ctx.lineTo(r2, -h);\n  ctx.lineTo(-r2, -h);\n  ctx.lineTo(-r, 0);\n  ctx.lineTo(-r2, h);\n  ctx.lineTo(r2, h);\n  ctx.closePath();\n}\n\nfunction _one_tri(ctx, r) {\n  const h = r * SQ3;\n  const a = h / 3;\n  ctx.moveTo(-r, a);\n  ctx.lineTo(r, a);\n  ctx.lineTo(0, a - h);\n  ctx.closePath();\n}\n\nfunction asterisk(ctx, i, r, line, _fill) {\n  const r2 = r * 0.65;\n\n  _one_cross(ctx, r);\n\n  _one_x(ctx, r2);\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction circle(ctx, i, r, line, fill) {\n  ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction circle_cross(ctx, i, r, line, fill) {\n  ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n\n    _one_cross(ctx, r);\n\n    ctx.stroke();\n  }\n}\n\nfunction circle_x(ctx, i, r, line, fill) {\n  ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n\n    _one_x(ctx, r);\n\n    ctx.stroke();\n  }\n}\n\nfunction cross(ctx, i, r, line, _fill) {\n  _one_cross(ctx, r);\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction diamond(ctx, i, r, line, fill) {\n  _one_diamond(ctx, r);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction diamond_cross(ctx, i, r, line, fill) {\n  _one_diamond(ctx, r);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n\n    _one_cross(ctx, r);\n\n    ctx.stroke();\n  }\n}\n\nfunction hex(ctx, i, r, line, fill) {\n  _one_hex(ctx, r);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction inverted_triangle(ctx, i, r, line, fill) {\n  ctx.rotate(Math.PI);\n\n  _one_tri(ctx, r);\n\n  ctx.rotate(-Math.PI);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction square(ctx, i, r, line, fill) {\n  const size = 2 * r;\n  ctx.rect(-r, -r, size, size);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction square_cross(ctx, i, r, line, fill) {\n  const size = 2 * r;\n  ctx.rect(-r, -r, size, size);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n\n    _one_cross(ctx, r);\n\n    ctx.stroke();\n  }\n}\n\nfunction square_x(ctx, i, r, line, fill) {\n  const size = 2 * r;\n  ctx.rect(-r, -r, size, size);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n\n    _one_x(ctx, r);\n\n    ctx.stroke();\n  }\n}\n\nfunction triangle(ctx, i, r, line, fill) {\n  _one_tri(ctx, r);\n\n  if (fill.doit) {\n    fill.set_vectorize(ctx, i);\n    ctx.fill();\n  }\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction dash(ctx, i, r, line, _fill) {\n  _one_line(ctx, r);\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction x(ctx, i, r, line, _fill) {\n  _one_x(ctx, r);\n\n  if (line.doit) {\n    line.set_vectorize(ctx, i);\n    ctx.stroke();\n  }\n}\n\nfunction _mk_model(type, f) {\n  var _a;\n\n  const view = class extends MarkerView {\n    static initClass() {\n      this.prototype._render_one = f;\n    }\n\n  };\n  view.initClass();\n  const model = (_a = class extends Marker {\n    static initClass() {\n      this.prototype.default_view = view;\n    }\n\n  }, _a.__name__ = type, _a);\n  model.initClass();\n  return model;\n} // markers are final, so no need to export views\n\n\nexport const Asterisk = _mk_model('Asterisk', asterisk);\nexport const CircleCross = _mk_model('CircleCross', circle_cross);\nexport const CircleX = _mk_model('CircleX', circle_x);\nexport const Cross = _mk_model('Cross', cross);\nexport const Dash = _mk_model('Dash', dash);\nexport const Diamond = _mk_model('Diamond', diamond);\nexport const DiamondCross = _mk_model('DiamondCross', diamond_cross);\nexport const Hex = _mk_model('Hex', hex);\nexport const InvertedTriangle = _mk_model('InvertedTriangle', inverted_triangle);\nexport const Square = _mk_model('Square', square);\nexport const SquareCross = _mk_model('SquareCross', square_cross);\nexport const SquareX = _mk_model('SquareX', square_x);\nexport const Triangle = _mk_model('Triangle', triangle);\nexport const X = _mk_model('X', x);\nexport const marker_funcs = {\n  asterisk,\n  circle,\n  circle_cross,\n  circle_x,\n  cross,\n  diamond,\n  diamond_cross,\n  hex,\n  inverted_triangle,\n  square,\n  square_cross,\n  square_x,\n  triangle,\n  dash,\n  x\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/markers/defs.js"],"names":["Marker","MarkerView","SQ3","Math","sqrt","_one_line","ctx","r","moveTo","lineTo","_one_x","_one_cross","_one_diamond","closePath","_one_hex","r2","h","_one_tri","a","asterisk","i","line","_fill","doit","set_vectorize","stroke","circle","fill","arc","PI","circle_cross","circle_x","cross","diamond","diamond_cross","hex","inverted_triangle","rotate","square","size","rect","square_cross","square_x","triangle","dash","x","_mk_model","type","f","_a","view","initClass","prototype","_render_one","model","default_view","__name__","Asterisk","CircleCross","CircleX","Cross","Dash","Diamond","DiamondCross","Hex","InvertedTriangle","Square","SquareCross","SquareX","Triangle","X","marker_funcs"],"mappings":"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","sourcesContent":["import { Marker, MarkerView } from \"./marker\";\nconst SQ3 = Math.sqrt(3);\nfunction _one_line(ctx, r) {\n    ctx.moveTo(-r, 0);\n    ctx.lineTo(r, 0);\n}\nfunction _one_x(ctx, r) {\n    ctx.moveTo(-r, r);\n    ctx.lineTo(r, -r);\n    ctx.moveTo(-r, -r);\n    ctx.lineTo(r, r);\n}\nfunction _one_cross(ctx, r) {\n    ctx.moveTo(0, r);\n    ctx.lineTo(0, -r);\n    ctx.moveTo(-r, 0);\n    ctx.lineTo(r, 0);\n}\nfunction _one_diamond(ctx, r) {\n    ctx.moveTo(0, r);\n    ctx.lineTo(r / 1.5, 0);\n    ctx.lineTo(0, -r);\n    ctx.lineTo(-r / 1.5, 0);\n    ctx.closePath();\n}\nfunction _one_hex(ctx, r) {\n    const r2 = r / 2;\n    const h = SQ3 * r2;\n    ctx.moveTo(r, 0);\n    ctx.lineTo(r2, -h);\n    ctx.lineTo(-r2, -h);\n    ctx.lineTo(-r, 0);\n    ctx.lineTo(-r2, h);\n    ctx.lineTo(r2, h);\n    ctx.closePath();\n}\nfunction _one_tri(ctx, r) {\n    const h = r * SQ3;\n    const a = h / 3;\n    ctx.moveTo(-r, a);\n    ctx.lineTo(r, a);\n    ctx.lineTo(0, a - h);\n    ctx.closePath();\n}\nfunction asterisk(ctx, i, r, line, _fill) {\n    const r2 = r * 0.65;\n    _one_cross(ctx, r);\n    _one_x(ctx, r2);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction circle(ctx, i, r, line, fill) {\n    ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction circle_cross(ctx, i, r, line, fill) {\n    ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n}\nfunction circle_x(ctx, i, r, line, fill) {\n    ctx.arc(0, 0, r, 0, 2 * Math.PI, false);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_x(ctx, r);\n        ctx.stroke();\n    }\n}\nfunction cross(ctx, i, r, line, _fill) {\n    _one_cross(ctx, r);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction diamond(ctx, i, r, line, fill) {\n    _one_diamond(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction diamond_cross(ctx, i, r, line, fill) {\n    _one_diamond(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n}\nfunction hex(ctx, i, r, line, fill) {\n    _one_hex(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction inverted_triangle(ctx, i, r, line, fill) {\n    ctx.rotate(Math.PI);\n    _one_tri(ctx, r);\n    ctx.rotate(-Math.PI);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction square(ctx, i, r, line, fill) {\n    const size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction square_cross(ctx, i, r, line, fill) {\n    const size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_cross(ctx, r);\n        ctx.stroke();\n    }\n}\nfunction square_x(ctx, i, r, line, fill) {\n    const size = 2 * r;\n    ctx.rect(-r, -r, size, size);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        _one_x(ctx, r);\n        ctx.stroke();\n    }\n}\nfunction triangle(ctx, i, r, line, fill) {\n    _one_tri(ctx, r);\n    if (fill.doit) {\n        fill.set_vectorize(ctx, i);\n        ctx.fill();\n    }\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction dash(ctx, i, r, line, _fill) {\n    _one_line(ctx, r);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction x(ctx, i, r, line, _fill) {\n    _one_x(ctx, r);\n    if (line.doit) {\n        line.set_vectorize(ctx, i);\n        ctx.stroke();\n    }\n}\nfunction _mk_model(type, f) {\n    var _a;\n    const view = class extends MarkerView {\n        static initClass() {\n            this.prototype._render_one = f;\n        }\n    };\n    view.initClass();\n    const model = (_a = class extends Marker {\n            static initClass() {\n                this.prototype.default_view = view;\n            }\n        },\n        _a.__name__ = type,\n        _a);\n    model.initClass();\n    return model;\n}\n// markers are final, so no need to export views\nexport const Asterisk = _mk_model('Asterisk', asterisk);\nexport const CircleCross = _mk_model('CircleCross', circle_cross);\nexport const CircleX = _mk_model('CircleX', circle_x);\nexport const Cross = _mk_model('Cross', cross);\nexport const Dash = _mk_model('Dash', dash);\nexport const Diamond = _mk_model('Diamond', diamond);\nexport const DiamondCross = _mk_model('DiamondCross', diamond_cross);\nexport const Hex = _mk_model('Hex', hex);\nexport const InvertedTriangle = _mk_model('InvertedTriangle', inverted_triangle);\nexport const Square = _mk_model('Square', square);\nexport const SquareCross = _mk_model('SquareCross', square_cross);\nexport const SquareX = _mk_model('SquareX', square_x);\nexport const Triangle = _mk_model('Triangle', triangle);\nexport const X = _mk_model('X', x);\nexport const marker_funcs = {\n    asterisk,\n    circle,\n    circle_cross,\n    circle_x,\n    cross,\n    diamond,\n    diamond_cross,\n    hex,\n    inverted_triangle,\n    square,\n    square_cross,\n    square_x,\n    triangle,\n    dash,\n    x,\n};\n//# sourceMappingURL=defs.js.map"]},"metadata":{},"sourceType":"module"}