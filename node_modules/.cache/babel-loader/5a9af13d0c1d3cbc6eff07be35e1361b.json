{"ast":null,"code":"\"use strict\";\n\nvar $ = require(\"./slick.jquery\");\n\nvar Slick = require(\"./slick.core\");\n/***\n * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\n * This metadata overrides the default behavior and formatting of those rows so that they appear and function\n * correctly when processed by the grid.\n *\n * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\n * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\n *\n * @class GroupItemMetadataProvider\n * @module Data\n * @namespace Slick.Data\n * @constructor\n * @param options\n */\n\n\nfunction GroupItemMetadataProvider(options) {\n  var _grid;\n\n  var _defaults = {\n    checkboxSelect: false,\n    checkboxSelectCssClass: \"slick-group-select-checkbox\",\n    checkboxSelectPlugin: null,\n    groupCssClass: \"slick-group\",\n    groupTitleCssClass: \"slick-group-title\",\n    totalsCssClass: \"slick-group-totals\",\n    groupFocusable: true,\n    totalsFocusable: false,\n    toggleCssClass: \"slick-group-toggle\",\n    toggleExpandedCssClass: \"expanded\",\n    toggleCollapsedCssClass: \"collapsed\",\n    enableExpandCollapse: true,\n    groupFormatter: defaultGroupCellFormatter,\n    totalsFormatter: defaultTotalsCellFormatter\n  };\n  options = $.extend(true, {}, _defaults, options);\n\n  function defaultGroupCellFormatter(row, cell, value, columnDef, item, grid) {\n    if (!options.enableExpandCollapse) {\n      return item.title;\n    }\n\n    var indentation = item.level * 15 + \"px\";\n    return (options.checkboxSelect ? '<span class=\"' + options.checkboxSelectCssClass + ' ' + (item.selectChecked ? 'checked' : 'unchecked') + '\"></span>' : '') + \"<span class='\" + options.toggleCssClass + \" \" + (item.collapsed ? options.toggleCollapsedCssClass : options.toggleExpandedCssClass) + \"' style='margin-left:\" + indentation + \"'>\" + \"</span>\" + \"<span class='\" + options.groupTitleCssClass + \"' level='\" + item.level + \"'>\" + item.title + \"</span>\";\n  }\n\n  function defaultTotalsCellFormatter(row, cell, value, columnDef, item, grid) {\n    return columnDef.groupTotalsFormatter && columnDef.groupTotalsFormatter(item, columnDef, grid) || \"\";\n  }\n\n  function init(grid) {\n    _grid = grid;\n\n    _grid.onClick.subscribe(handleGridClick);\n\n    _grid.onKeyDown.subscribe(handleGridKeyDown);\n  }\n\n  function destroy() {\n    if (_grid) {\n      _grid.onClick.unsubscribe(handleGridClick);\n\n      _grid.onKeyDown.unsubscribe(handleGridKeyDown);\n    }\n  }\n\n  function handleGridClick(e, args) {\n    var $target = $(e.target);\n    var item = this.getDataItem(args.row);\n\n    if (item && item instanceof Slick.Group && $target.hasClass(options.toggleCssClass)) {\n      var range = _grid.getRenderedRange();\n\n      this.getData().setRefreshHints({\n        ignoreDiffsBefore: range.top,\n        ignoreDiffsAfter: range.bottom + 1\n      });\n\n      if (item.collapsed) {\n        this.getData().expandGroup(item.groupingKey);\n      } else {\n        this.getData().collapseGroup(item.groupingKey);\n      }\n\n      e.stopImmediatePropagation();\n      e.preventDefault();\n    }\n\n    if (item && item instanceof Slick.Group && $target.hasClass(options.checkboxSelectCssClass)) {\n      item.selectChecked = !item.selectChecked;\n      $target.removeClass(item.selectChecked ? \"unchecked\" : \"checked\");\n      $target.addClass(item.selectChecked ? \"checked\" : \"unchecked\"); // get rowIndexes array\n\n      var rowIndexes = _grid.getData().mapItemsToRows(item.rows);\n\n      (item.selectChecked ? options.checkboxSelectPlugin.selectRows : options.checkboxSelectPlugin.deSelectRows)(rowIndexes);\n    }\n  } // TODO:  add -/+ handling\n\n\n  function handleGridKeyDown(e, args) {\n    if (options.enableExpandCollapse && e.which == Slick.keyCode.SPACE) {\n      var activeCell = this.getActiveCell();\n\n      if (activeCell) {\n        var item = this.getDataItem(activeCell.row);\n\n        if (item && item instanceof Slick.Group) {\n          var range = _grid.getRenderedRange();\n\n          this.getData().setRefreshHints({\n            ignoreDiffsBefore: range.top,\n            ignoreDiffsAfter: range.bottom + 1\n          });\n\n          if (item.collapsed) {\n            this.getData().expandGroup(item.groupingKey);\n          } else {\n            this.getData().collapseGroup(item.groupingKey);\n          }\n\n          e.stopImmediatePropagation();\n          e.preventDefault();\n        }\n      }\n    }\n  }\n\n  function getGroupRowMetadata(item) {\n    return {\n      selectable: false,\n      focusable: options.groupFocusable,\n      cssClasses: options.groupCssClass,\n      columns: {\n        0: {\n          colspan: \"*\",\n          formatter: options.groupFormatter,\n          editor: null\n        }\n      }\n    };\n  }\n\n  function getTotalsRowMetadata(item) {\n    return {\n      selectable: false,\n      focusable: options.totalsFocusable,\n      cssClasses: options.totalsCssClass,\n      formatter: options.totalsFormatter,\n      editor: null\n    };\n  }\n\n  return {\n    \"init\": init,\n    \"destroy\": destroy,\n    \"getGroupRowMetadata\": getGroupRowMetadata,\n    \"getTotalsRowMetadata\": getTotalsRowMetadata\n  };\n}\n\nmodule.exports = {\n  GroupItemMetadataProvider: GroupItemMetadataProvider\n};","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/slickgrid/slick.groupitemmetadataprovider.js"],"names":["$","require","Slick","GroupItemMetadataProvider","options","_grid","_defaults","checkboxSelect","checkboxSelectCssClass","checkboxSelectPlugin","groupCssClass","groupTitleCssClass","totalsCssClass","groupFocusable","totalsFocusable","toggleCssClass","toggleExpandedCssClass","toggleCollapsedCssClass","enableExpandCollapse","groupFormatter","defaultGroupCellFormatter","totalsFormatter","defaultTotalsCellFormatter","extend","row","cell","value","columnDef","item","grid","title","indentation","level","selectChecked","collapsed","groupTotalsFormatter","init","onClick","subscribe","handleGridClick","onKeyDown","handleGridKeyDown","destroy","unsubscribe","e","args","$target","target","getDataItem","Group","hasClass","range","getRenderedRange","getData","setRefreshHints","ignoreDiffsBefore","top","ignoreDiffsAfter","bottom","expandGroup","groupingKey","collapseGroup","stopImmediatePropagation","preventDefault","removeClass","addClass","rowIndexes","mapItemsToRows","rows","selectRows","deSelectRows","which","keyCode","SPACE","activeCell","getActiveCell","getGroupRowMetadata","selectable","focusable","cssClasses","columns","colspan","formatter","editor","getTotalsRowMetadata","module","exports"],"mappings":"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","sourcesContent":["  \"use strict\";\n  var $ = require(\"./slick.jquery\");\n  var Slick = require(\"./slick.core\");\n\n  /***\n   * Provides item metadata for group (Slick.Group) and totals (Slick.Totals) rows produced by the DataView.\n   * This metadata overrides the default behavior and formatting of those rows so that they appear and function\n   * correctly when processed by the grid.\n   *\n   * This class also acts as a grid plugin providing event handlers to expand & collapse groups.\n   * If \"grid.registerPlugin(...)\" is not called, expand & collapse will not work.\n   *\n   * @class GroupItemMetadataProvider\n   * @module Data\n   * @namespace Slick.Data\n   * @constructor\n   * @param options\n   */\n  function GroupItemMetadataProvider(options) {\n    var _grid;\n    var _defaults = {\n      checkboxSelect: false,\n      checkboxSelectCssClass: \"slick-group-select-checkbox\",\n      checkboxSelectPlugin: null,\n      groupCssClass: \"slick-group\",\n      groupTitleCssClass: \"slick-group-title\",\n      totalsCssClass: \"slick-group-totals\",\n      groupFocusable: true,\n      totalsFocusable: false,\n      toggleCssClass: \"slick-group-toggle\",\n      toggleExpandedCssClass: \"expanded\",\n      toggleCollapsedCssClass: \"collapsed\",\n      enableExpandCollapse: true,\n      groupFormatter: defaultGroupCellFormatter,\n      totalsFormatter: defaultTotalsCellFormatter\n    };\n\n    options = $.extend(true, {}, _defaults, options);\n\n\n    function defaultGroupCellFormatter(row, cell, value, columnDef, item, grid) {\n      if (!options.enableExpandCollapse) {\n        return item.title;\n      }\n\n      var indentation = item.level * 15 + \"px\";\n\n      return (options.checkboxSelect ? '<span class=\"' + options.checkboxSelectCssClass +\n          ' ' + (item.selectChecked ? 'checked' : 'unchecked') + '\"></span>' : '') +\n          \"<span class='\" + options.toggleCssClass + \" \" +\n          (item.collapsed ? options.toggleCollapsedCssClass : options.toggleExpandedCssClass) +\n          \"' style='margin-left:\" + indentation +\"'>\" +\n          \"</span>\" +\n          \"<span class='\" + options.groupTitleCssClass + \"' level='\" + item.level + \"'>\" +\n            item.title +\n          \"</span>\";\n    }\n\n    function defaultTotalsCellFormatter(row, cell, value, columnDef, item, grid) {\n      return (columnDef.groupTotalsFormatter && columnDef.groupTotalsFormatter(item, columnDef, grid)) || \"\";\n    }\n\n\n    function init(grid) {\n      _grid = grid;\n      _grid.onClick.subscribe(handleGridClick);\n      _grid.onKeyDown.subscribe(handleGridKeyDown);\n\n    }\n\n    function destroy() {\n      if (_grid) {\n        _grid.onClick.unsubscribe(handleGridClick);\n        _grid.onKeyDown.unsubscribe(handleGridKeyDown);\n      }\n    }\n\n    function handleGridClick(e, args) {\n      var $target = $(e.target);\n      var item = this.getDataItem(args.row);\n      if (item && item instanceof Slick.Group && $target.hasClass(options.toggleCssClass)) {\n        var range = _grid.getRenderedRange();\n        this.getData().setRefreshHints({\n          ignoreDiffsBefore: range.top,\n          ignoreDiffsAfter: range.bottom + 1\n        });\n\n        if (item.collapsed) {\n          this.getData().expandGroup(item.groupingKey);\n        } else {\n          this.getData().collapseGroup(item.groupingKey);\n        }\n\n        e.stopImmediatePropagation();\n        e.preventDefault();\n      }\n      if (item && item instanceof Slick.Group && $target.hasClass(options.checkboxSelectCssClass)) {\n        item.selectChecked = !item.selectChecked;\n        $target.removeClass((item.selectChecked ? \"unchecked\" : \"checked\"));\n        $target.addClass((item.selectChecked ? \"checked\" : \"unchecked\"));\n        // get rowIndexes array\n        var rowIndexes = _grid.getData().mapItemsToRows(item.rows);\n        (item.selectChecked ? options.checkboxSelectPlugin.selectRows : options.checkboxSelectPlugin.deSelectRows)(rowIndexes);\n      }\n    }\n\n    // TODO:  add -/+ handling\n    function handleGridKeyDown(e, args) {\n      if (options.enableExpandCollapse && (e.which == Slick.keyCode.SPACE)) {\n        var activeCell = this.getActiveCell();\n        if (activeCell) {\n          var item = this.getDataItem(activeCell.row);\n          if (item && item instanceof Slick.Group) {\n            var range = _grid.getRenderedRange();\n            this.getData().setRefreshHints({\n              ignoreDiffsBefore: range.top,\n              ignoreDiffsAfter: range.bottom + 1\n            });\n\n            if (item.collapsed) {\n              this.getData().expandGroup(item.groupingKey);\n            } else {\n              this.getData().collapseGroup(item.groupingKey);\n            }\n\n            e.stopImmediatePropagation();\n            e.preventDefault();\n          }\n        }\n      }\n    }\n\n    function getGroupRowMetadata(item) {\n      return {\n        selectable: false,\n        focusable: options.groupFocusable,\n        cssClasses: options.groupCssClass,\n        columns: {\n          0: {\n            colspan: \"*\",\n            formatter: options.groupFormatter,\n            editor: null\n          }\n        }\n      };\n    }\n\n    function getTotalsRowMetadata(item) {\n      return {\n        selectable: false,\n        focusable: options.totalsFocusable,\n        cssClasses: options.totalsCssClass,\n        formatter: options.totalsFormatter,\n        editor: null\n      };\n    }\n\n\n    return {\n      \"init\": init,\n      \"destroy\": destroy,\n      \"getGroupRowMetadata\": getGroupRowMetadata,\n      \"getTotalsRowMetadata\": getTotalsRowMetadata\n    };\n  }\n\n  module.exports = {\n    GroupItemMetadataProvider: GroupItemMetadataProvider\n  };\n"]},"metadata":{},"sourceType":"script"}