{"ast":null,"code":"import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport * as hittest from \"../../core/hittest\";\nimport * as p from \"../../core/properties\";\nimport { is_ie } from \"../../core/util/compat\";\nexport class AnnulusView extends XYGlyphView {\n  _map_data() {\n    if (this.model.properties.inner_radius.units == \"data\") this.sinner_radius = this.sdist(this.renderer.xscale, this._x, this._inner_radius);else this.sinner_radius = this._inner_radius;\n    if (this.model.properties.outer_radius.units == \"data\") this.souter_radius = this.sdist(this.renderer.xscale, this._x, this._outer_radius);else this.souter_radius = this._outer_radius;\n  }\n\n  _render(ctx, indices, {\n    sx,\n    sy,\n    sinner_radius,\n    souter_radius\n  }) {\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + sinner_radius[i] + souter_radius[i])) continue; // Because this visual has a whole in it, it proved \"challenging\"\n      // for some browsers to render if drawn in one go --- i.e. it did not\n      // work on IE. If we render in two parts (upper and lower part),\n      // it is unambiguous what part should be filled. The line is\n      // better drawn in one go though, otherwise the part where the pieces\n      // meet will not be fully closed due to aa.\n\n      if (this.visuals.fill.doit) {\n        this.visuals.fill.set_vectorize(ctx, i);\n        ctx.beginPath();\n\n        if (is_ie) {\n          // Draw two halves of the donut. Works on IE, but causes an aa line on Safari.\n          for (const clockwise of [false, true]) {\n            ctx.arc(sx[i], sy[i], sinner_radius[i], 0, Math.PI, clockwise);\n            ctx.arc(sx[i], sy[i], souter_radius[i], Math.PI, 0, !clockwise);\n          }\n        } else {\n          // Draw donut in one go. Does not work on iE.\n          ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI, true);\n          ctx.arc(sx[i], sy[i], souter_radius[i], 2 * Math.PI, 0, false);\n        }\n\n        ctx.fill();\n      }\n\n      if (this.visuals.line.doit) {\n        this.visuals.line.set_vectorize(ctx, i);\n        ctx.beginPath();\n        ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI);\n        ctx.moveTo(sx[i] + souter_radius[i], sy[i]);\n        ctx.arc(sx[i], sy[i], souter_radius[i], 0, 2 * Math.PI);\n        ctx.stroke();\n      }\n    }\n  }\n\n  _hit_point(geometry) {\n    const {\n      sx,\n      sy\n    } = geometry;\n    const x = this.renderer.xscale.invert(sx);\n    const y = this.renderer.yscale.invert(sy);\n    let x0, y0;\n    let x1, y1;\n\n    if (this.model.properties.outer_radius.units == \"data\") {\n      x0 = x - this.max_outer_radius;\n      x1 = x + this.max_outer_radius;\n      y0 = y - this.max_outer_radius;\n      y1 = y + this.max_outer_radius;\n    } else {\n      const sx0 = sx - this.max_outer_radius;\n      const sx1 = sx + this.max_outer_radius;\n      [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1);\n      const sy0 = sy - this.max_outer_radius;\n      const sy1 = sy + this.max_outer_radius;\n      [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1);\n    }\n\n    const hits = [];\n\n    for (const i of this.index.indices({\n      x0,\n      x1,\n      y0,\n      y1\n    })) {\n      const or2 = this.souter_radius[i] ** 2;\n      const ir2 = this.sinner_radius[i] ** 2;\n      const [sx0, sx1] = this.renderer.xscale.r_compute(x, this._x[i]);\n      const [sy0, sy1] = this.renderer.yscale.r_compute(y, this._y[i]);\n      const dist = (sx0 - sx1) ** 2 + (sy0 - sy1) ** 2;\n      if (dist <= or2 && dist >= ir2) hits.push([i, dist]);\n    }\n\n    return hittest.create_hit_test_result_from_hits(hits);\n  }\n\n  draw_legend_for_index(ctx, {\n    x0,\n    y0,\n    x1,\n    y1\n  }, index) {\n    const len = index + 1;\n    const sx = new Array(len);\n    sx[index] = (x0 + x1) / 2;\n    const sy = new Array(len);\n    sy[index] = (y0 + y1) / 2;\n    const r = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.5;\n    const sinner_radius = new Array(len);\n    sinner_radius[index] = r * 0.4;\n    const souter_radius = new Array(len);\n    souter_radius[index] = r * 0.8;\n\n    this._render(ctx, [index], {\n      sx,\n      sy,\n      sinner_radius,\n      souter_radius\n    }); // XXX\n\n  }\n\n}\nAnnulusView.__name__ = \"AnnulusView\";\nexport class Annulus extends XYGlyph {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Annulus() {\n    this.prototype.default_view = AnnulusView;\n    this.mixins(['line', 'fill']);\n    this.define({\n      inner_radius: [p.DistanceSpec],\n      outer_radius: [p.DistanceSpec]\n    });\n  }\n\n}\nAnnulus.__name__ = \"Annulus\";\nAnnulus.init_Annulus();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/annulus.js"],"names":["XYGlyph","XYGlyphView","hittest","p","is_ie","AnnulusView","_map_data","model","properties","inner_radius","units","sinner_radius","sdist","renderer","xscale","_x","_inner_radius","outer_radius","souter_radius","_outer_radius","_render","ctx","indices","sx","sy","i","isNaN","visuals","fill","doit","set_vectorize","beginPath","clockwise","arc","Math","PI","line","moveTo","stroke","_hit_point","geometry","x","invert","y","yscale","x0","y0","x1","y1","max_outer_radius","sx0","sx1","r_invert","sy0","sy1","hits","index","or2","ir2","r_compute","_y","dist","push","create_hit_test_result_from_hits","draw_legend_for_index","len","Array","r","min","abs","__name__","Annulus","constructor","attrs","init_Annulus","prototype","default_view","mixins","define","DistanceSpec"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,WAAlB,QAAqC,YAArC;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,SAASC,KAAT,QAAsB,wBAAtB;AACA,OAAO,MAAMC,WAAN,SAA0BJ,WAA1B,CAAsC;AACzCK,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKC,KAAL,CAAWC,UAAX,CAAsBC,YAAtB,CAAmCC,KAAnC,IAA4C,MAAhD,EACI,KAAKC,aAAL,GAAqB,KAAKC,KAAL,CAAW,KAAKC,QAAL,CAAcC,MAAzB,EAAiC,KAAKC,EAAtC,EAA0C,KAAKC,aAA/C,CAArB,CADJ,KAGI,KAAKL,aAAL,GAAqB,KAAKK,aAA1B;AACJ,QAAI,KAAKT,KAAL,CAAWC,UAAX,CAAsBS,YAAtB,CAAmCP,KAAnC,IAA4C,MAAhD,EACI,KAAKQ,aAAL,GAAqB,KAAKN,KAAL,CAAW,KAAKC,QAAL,CAAcC,MAAzB,EAAiC,KAAKC,EAAtC,EAA0C,KAAKI,aAA/C,CAArB,CADJ,KAGI,KAAKD,aAAL,GAAqB,KAAKC,aAA1B;AACP;;AACDC,EAAAA,OAAO,CAACC,GAAD,EAAMC,OAAN,EAAe;AAAEC,IAAAA,EAAF;AAAMC,IAAAA,EAAN;AAAUb,IAAAA,aAAV;AAAyBO,IAAAA;AAAzB,GAAf,EAAyD;AAC5D,SAAK,MAAMO,CAAX,IAAgBH,OAAhB,EAAyB;AACrB,UAAII,KAAK,CAACH,EAAE,CAACE,CAAD,CAAF,GAAQD,EAAE,CAACC,CAAD,CAAV,GAAgBd,aAAa,CAACc,CAAD,CAA7B,GAAmCP,aAAa,CAACO,CAAD,CAAjD,CAAT,EACI,SAFiB,CAGrB;AACA;AACA;AACA;AACA;AACA;;AACA,UAAI,KAAKE,OAAL,CAAaC,IAAb,CAAkBC,IAAtB,EAA4B;AACxB,aAAKF,OAAL,CAAaC,IAAb,CAAkBE,aAAlB,CAAgCT,GAAhC,EAAqCI,CAArC;AACAJ,QAAAA,GAAG,CAACU,SAAJ;;AACA,YAAI3B,KAAJ,EAAW;AACP;AACA,eAAK,MAAM4B,SAAX,IAAwB,CAAC,KAAD,EAAQ,IAAR,CAAxB,EAAuC;AACnCX,YAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBd,aAAa,CAACc,CAAD,CAAnC,EAAwC,CAAxC,EAA2CS,IAAI,CAACC,EAAhD,EAAoDH,SAApD;AACAX,YAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBP,aAAa,CAACO,CAAD,CAAnC,EAAwCS,IAAI,CAACC,EAA7C,EAAiD,CAAjD,EAAoD,CAACH,SAArD;AACH;AACJ,SAND,MAOK;AACD;AACAX,UAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBd,aAAa,CAACc,CAAD,CAAnC,EAAwC,CAAxC,EAA2C,IAAIS,IAAI,CAACC,EAApD,EAAwD,IAAxD;AACAd,UAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBP,aAAa,CAACO,CAAD,CAAnC,EAAwC,IAAIS,IAAI,CAACC,EAAjD,EAAqD,CAArD,EAAwD,KAAxD;AACH;;AACDd,QAAAA,GAAG,CAACO,IAAJ;AACH;;AACD,UAAI,KAAKD,OAAL,CAAaS,IAAb,CAAkBP,IAAtB,EAA4B;AACxB,aAAKF,OAAL,CAAaS,IAAb,CAAkBN,aAAlB,CAAgCT,GAAhC,EAAqCI,CAArC;AACAJ,QAAAA,GAAG,CAACU,SAAJ;AACAV,QAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBd,aAAa,CAACc,CAAD,CAAnC,EAAwC,CAAxC,EAA2C,IAAIS,IAAI,CAACC,EAApD;AACAd,QAAAA,GAAG,CAACgB,MAAJ,CAAWd,EAAE,CAACE,CAAD,CAAF,GAAQP,aAAa,CAACO,CAAD,CAAhC,EAAqCD,EAAE,CAACC,CAAD,CAAvC;AACAJ,QAAAA,GAAG,CAACY,GAAJ,CAAQV,EAAE,CAACE,CAAD,CAAV,EAAeD,EAAE,CAACC,CAAD,CAAjB,EAAsBP,aAAa,CAACO,CAAD,CAAnC,EAAwC,CAAxC,EAA2C,IAAIS,IAAI,CAACC,EAApD;AACAd,QAAAA,GAAG,CAACiB,MAAJ;AACH;AACJ;AACJ;;AACDC,EAAAA,UAAU,CAACC,QAAD,EAAW;AACjB,UAAM;AAAEjB,MAAAA,EAAF;AAAMC,MAAAA;AAAN,QAAagB,QAAnB;AACA,UAAMC,CAAC,GAAG,KAAK5B,QAAL,CAAcC,MAAd,CAAqB4B,MAArB,CAA4BnB,EAA5B,CAAV;AACA,UAAMoB,CAAC,GAAG,KAAK9B,QAAL,CAAc+B,MAAd,CAAqBF,MAArB,CAA4BlB,EAA5B,CAAV;AACA,QAAIqB,EAAJ,EAAQC,EAAR;AACA,QAAIC,EAAJ,EAAQC,EAAR;;AACA,QAAI,KAAKzC,KAAL,CAAWC,UAAX,CAAsBS,YAAtB,CAAmCP,KAAnC,IAA4C,MAAhD,EAAwD;AACpDmC,MAAAA,EAAE,GAAGJ,CAAC,GAAG,KAAKQ,gBAAd;AACAF,MAAAA,EAAE,GAAGN,CAAC,GAAG,KAAKQ,gBAAd;AACAH,MAAAA,EAAE,GAAGH,CAAC,GAAG,KAAKM,gBAAd;AACAD,MAAAA,EAAE,GAAGL,CAAC,GAAG,KAAKM,gBAAd;AACH,KALD,MAMK;AACD,YAAMC,GAAG,GAAG3B,EAAE,GAAG,KAAK0B,gBAAtB;AACA,YAAME,GAAG,GAAG5B,EAAE,GAAG,KAAK0B,gBAAtB;AACA,OAACJ,EAAD,EAAKE,EAAL,IAAW,KAAKlC,QAAL,CAAcC,MAAd,CAAqBsC,QAArB,CAA8BF,GAA9B,EAAmCC,GAAnC,CAAX;AACA,YAAME,GAAG,GAAG7B,EAAE,GAAG,KAAKyB,gBAAtB;AACA,YAAMK,GAAG,GAAG9B,EAAE,GAAG,KAAKyB,gBAAtB;AACA,OAACH,EAAD,EAAKE,EAAL,IAAW,KAAKnC,QAAL,CAAc+B,MAAd,CAAqBQ,QAArB,CAA8BC,GAA9B,EAAmCC,GAAnC,CAAX;AACH;;AACD,UAAMC,IAAI,GAAG,EAAb;;AACA,SAAK,MAAM9B,CAAX,IAAgB,KAAK+B,KAAL,CAAWlC,OAAX,CAAmB;AAAEuB,MAAAA,EAAF;AAAME,MAAAA,EAAN;AAAUD,MAAAA,EAAV;AAAcE,MAAAA;AAAd,KAAnB,CAAhB,EAAwD;AACpD,YAAMS,GAAG,GAAG,KAAKvC,aAAL,CAAmBO,CAAnB,KAAyB,CAArC;AACA,YAAMiC,GAAG,GAAG,KAAK/C,aAAL,CAAmBc,CAAnB,KAAyB,CAArC;AACA,YAAM,CAACyB,GAAD,EAAMC,GAAN,IAAa,KAAKtC,QAAL,CAAcC,MAAd,CAAqB6C,SAArB,CAA+BlB,CAA/B,EAAkC,KAAK1B,EAAL,CAAQU,CAAR,CAAlC,CAAnB;AACA,YAAM,CAAC4B,GAAD,EAAMC,GAAN,IAAa,KAAKzC,QAAL,CAAc+B,MAAd,CAAqBe,SAArB,CAA+BhB,CAA/B,EAAkC,KAAKiB,EAAL,CAAQnC,CAAR,CAAlC,CAAnB;AACA,YAAMoC,IAAI,GAAG,CAACX,GAAG,GAAGC,GAAP,KAAe,CAAf,GAAmB,CAACE,GAAG,GAAGC,GAAP,KAAe,CAA/C;AACA,UAAIO,IAAI,IAAIJ,GAAR,IAAeI,IAAI,IAAIH,GAA3B,EACIH,IAAI,CAACO,IAAL,CAAU,CAACrC,CAAD,EAAIoC,IAAJ,CAAV;AACP;;AACD,WAAO3D,OAAO,CAAC6D,gCAAR,CAAyCR,IAAzC,CAAP;AACH;;AACDS,EAAAA,qBAAqB,CAAC3C,GAAD,EAAM;AAAEwB,IAAAA,EAAF;AAAMC,IAAAA,EAAN;AAAUC,IAAAA,EAAV;AAAcC,IAAAA;AAAd,GAAN,EAA0BQ,KAA1B,EAAiC;AAClD,UAAMS,GAAG,GAAGT,KAAK,GAAG,CAApB;AACA,UAAMjC,EAAE,GAAG,IAAI2C,KAAJ,CAAUD,GAAV,CAAX;AACA1C,IAAAA,EAAE,CAACiC,KAAD,CAAF,GAAY,CAACX,EAAE,GAAGE,EAAN,IAAY,CAAxB;AACA,UAAMvB,EAAE,GAAG,IAAI0C,KAAJ,CAAUD,GAAV,CAAX;AACAzC,IAAAA,EAAE,CAACgC,KAAD,CAAF,GAAY,CAACV,EAAE,GAAGE,EAAN,IAAY,CAAxB;AACA,UAAMmB,CAAC,GAAGjC,IAAI,CAACkC,GAAL,CAASlC,IAAI,CAACmC,GAAL,CAAStB,EAAE,GAAGF,EAAd,CAAT,EAA4BX,IAAI,CAACmC,GAAL,CAASrB,EAAE,GAAGF,EAAd,CAA5B,IAAiD,GAA3D;AACA,UAAMnC,aAAa,GAAG,IAAIuD,KAAJ,CAAUD,GAAV,CAAtB;AACAtD,IAAAA,aAAa,CAAC6C,KAAD,CAAb,GAAuBW,CAAC,GAAG,GAA3B;AACA,UAAMjD,aAAa,GAAG,IAAIgD,KAAJ,CAAUD,GAAV,CAAtB;AACA/C,IAAAA,aAAa,CAACsC,KAAD,CAAb,GAAuBW,CAAC,GAAG,GAA3B;;AACA,SAAK/C,OAAL,CAAaC,GAAb,EAAkB,CAACmC,KAAD,CAAlB,EAA2B;AAAEjC,MAAAA,EAAF;AAAMC,MAAAA,EAAN;AAAUb,MAAAA,aAAV;AAAyBO,MAAAA;AAAzB,KAA3B,EAXkD,CAWoB;;AACzE;;AA5FwC;AA8F7Cb,WAAW,CAACiE,QAAZ,GAAuB,aAAvB;AACA,OAAO,MAAMC,OAAN,SAAsBvE,OAAtB,CAA8B;AACjCwE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,YAAP,GAAsB;AAClB,SAAKC,SAAL,CAAeC,YAAf,GAA8BvE,WAA9B;AACA,SAAKwE,MAAL,CAAY,CAAC,MAAD,EAAS,MAAT,CAAZ;AACA,SAAKC,MAAL,CAAY;AACRrE,MAAAA,YAAY,EAAE,CAACN,CAAC,CAAC4E,YAAH,CADN;AAER9D,MAAAA,YAAY,EAAE,CAACd,CAAC,CAAC4E,YAAH;AAFN,KAAZ;AAIH;;AAXgC;AAarCR,OAAO,CAACD,QAAR,GAAmB,SAAnB;AACAC,OAAO,CAACG,YAAR","sourcesContent":["import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport * as hittest from \"../../core/hittest\";\nimport * as p from \"../../core/properties\";\nimport { is_ie } from \"../../core/util/compat\";\nexport class AnnulusView extends XYGlyphView {\n    _map_data() {\n        if (this.model.properties.inner_radius.units == \"data\")\n            this.sinner_radius = this.sdist(this.renderer.xscale, this._x, this._inner_radius);\n        else\n            this.sinner_radius = this._inner_radius;\n        if (this.model.properties.outer_radius.units == \"data\")\n            this.souter_radius = this.sdist(this.renderer.xscale, this._x, this._outer_radius);\n        else\n            this.souter_radius = this._outer_radius;\n    }\n    _render(ctx, indices, { sx, sy, sinner_radius, souter_radius }) {\n        for (const i of indices) {\n            if (isNaN(sx[i] + sy[i] + sinner_radius[i] + souter_radius[i]))\n                continue;\n            // Because this visual has a whole in it, it proved \"challenging\"\n            // for some browsers to render if drawn in one go --- i.e. it did not\n            // work on IE. If we render in two parts (upper and lower part),\n            // it is unambiguous what part should be filled. The line is\n            // better drawn in one go though, otherwise the part where the pieces\n            // meet will not be fully closed due to aa.\n            if (this.visuals.fill.doit) {\n                this.visuals.fill.set_vectorize(ctx, i);\n                ctx.beginPath();\n                if (is_ie) {\n                    // Draw two halves of the donut. Works on IE, but causes an aa line on Safari.\n                    for (const clockwise of [false, true]) {\n                        ctx.arc(sx[i], sy[i], sinner_radius[i], 0, Math.PI, clockwise);\n                        ctx.arc(sx[i], sy[i], souter_radius[i], Math.PI, 0, !clockwise);\n                    }\n                }\n                else {\n                    // Draw donut in one go. Does not work on iE.\n                    ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI, true);\n                    ctx.arc(sx[i], sy[i], souter_radius[i], 2 * Math.PI, 0, false);\n                }\n                ctx.fill();\n            }\n            if (this.visuals.line.doit) {\n                this.visuals.line.set_vectorize(ctx, i);\n                ctx.beginPath();\n                ctx.arc(sx[i], sy[i], sinner_radius[i], 0, 2 * Math.PI);\n                ctx.moveTo(sx[i] + souter_radius[i], sy[i]);\n                ctx.arc(sx[i], sy[i], souter_radius[i], 0, 2 * Math.PI);\n                ctx.stroke();\n            }\n        }\n    }\n    _hit_point(geometry) {\n        const { sx, sy } = geometry;\n        const x = this.renderer.xscale.invert(sx);\n        const y = this.renderer.yscale.invert(sy);\n        let x0, y0;\n        let x1, y1;\n        if (this.model.properties.outer_radius.units == \"data\") {\n            x0 = x - this.max_outer_radius;\n            x1 = x + this.max_outer_radius;\n            y0 = y - this.max_outer_radius;\n            y1 = y + this.max_outer_radius;\n        }\n        else {\n            const sx0 = sx - this.max_outer_radius;\n            const sx1 = sx + this.max_outer_radius;\n            [x0, x1] = this.renderer.xscale.r_invert(sx0, sx1);\n            const sy0 = sy - this.max_outer_radius;\n            const sy1 = sy + this.max_outer_radius;\n            [y0, y1] = this.renderer.yscale.r_invert(sy0, sy1);\n        }\n        const hits = [];\n        for (const i of this.index.indices({ x0, x1, y0, y1 })) {\n            const or2 = this.souter_radius[i] ** 2;\n            const ir2 = this.sinner_radius[i] ** 2;\n            const [sx0, sx1] = this.renderer.xscale.r_compute(x, this._x[i]);\n            const [sy0, sy1] = this.renderer.yscale.r_compute(y, this._y[i]);\n            const dist = (sx0 - sx1) ** 2 + (sy0 - sy1) ** 2;\n            if (dist <= or2 && dist >= ir2)\n                hits.push([i, dist]);\n        }\n        return hittest.create_hit_test_result_from_hits(hits);\n    }\n    draw_legend_for_index(ctx, { x0, y0, x1, y1 }, index) {\n        const len = index + 1;\n        const sx = new Array(len);\n        sx[index] = (x0 + x1) / 2;\n        const sy = new Array(len);\n        sy[index] = (y0 + y1) / 2;\n        const r = Math.min(Math.abs(x1 - x0), Math.abs(y1 - y0)) * 0.5;\n        const sinner_radius = new Array(len);\n        sinner_radius[index] = r * 0.4;\n        const souter_radius = new Array(len);\n        souter_radius[index] = r * 0.8;\n        this._render(ctx, [index], { sx, sy, sinner_radius, souter_radius }); // XXX\n    }\n}\nAnnulusView.__name__ = \"AnnulusView\";\nexport class Annulus extends XYGlyph {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Annulus() {\n        this.prototype.default_view = AnnulusView;\n        this.mixins(['line', 'fill']);\n        this.define({\n            inner_radius: [p.DistanceSpec],\n            outer_radius: [p.DistanceSpec],\n        });\n    }\n}\nAnnulus.__name__ = \"Annulus\";\nAnnulus.init_Annulus();\n//# sourceMappingURL=annulus.js.map"]},"metadata":{},"sourceType":"module"}