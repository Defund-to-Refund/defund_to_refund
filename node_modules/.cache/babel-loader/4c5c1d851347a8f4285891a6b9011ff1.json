{"ast":null,"code":"import { ColumnDataSource } from \"./column_data_source\";\nimport * as p from \"../../core/properties\";\nexport class WebDataSource extends ColumnDataSource {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  get_column(colname) {\n    const column = this.data[colname];\n    return column != null ? column : [];\n  }\n\n  initialize() {\n    super.initialize();\n    this.setup();\n  }\n\n  load_data(raw_data, mode, max_size) {\n    const {\n      adapter\n    } = this;\n    let data;\n    if (adapter != null) data = adapter.execute(this, {\n      response: raw_data\n    });else data = raw_data;\n\n    switch (mode) {\n      case \"replace\":\n        {\n          this.data = data;\n          break;\n        }\n\n      case \"append\":\n        {\n          const original_data = this.data;\n\n          for (const column of this.columns()) {\n            // XXX: support typed arrays\n            const old_col = Array.from(original_data[column]);\n            const new_col = Array.from(data[column]);\n            data[column] = old_col.concat(new_col).slice(-max_size);\n          }\n\n          this.data = data;\n          break;\n        }\n    }\n  }\n\n  static init_WebDataSource() {\n    this.define({\n      mode: [p.UpdateMode, 'replace'],\n      max_size: [p.Number],\n      adapter: [p.Any, null],\n      data_url: [p.String]\n    });\n  }\n\n}\nWebDataSource.__name__ = \"WebDataSource\";\nWebDataSource.init_WebDataSource();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/sources/web_data_source.js"],"names":["ColumnDataSource","p","WebDataSource","constructor","attrs","get_column","colname","column","data","initialize","setup","load_data","raw_data","mode","max_size","adapter","execute","response","original_data","columns","old_col","Array","from","new_col","concat","slice","init_WebDataSource","define","UpdateMode","Number","Any","data_url","String","__name__"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,sBAAjC;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,OAAO,MAAMC,aAAN,SAA4BF,gBAA5B,CAA6C;AAChDG,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACDC,EAAAA,UAAU,CAACC,OAAD,EAAU;AAChB,UAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUF,OAAV,CAAf;AACA,WAAOC,MAAM,IAAI,IAAV,GAAiBA,MAAjB,GAA0B,EAAjC;AACH;;AACDE,EAAAA,UAAU,GAAG;AACT,UAAMA,UAAN;AACA,SAAKC,KAAL;AACH;;AACDC,EAAAA,SAAS,CAACC,QAAD,EAAWC,IAAX,EAAiBC,QAAjB,EAA2B;AAChC,UAAM;AAAEC,MAAAA;AAAF,QAAc,IAApB;AACA,QAAIP,IAAJ;AACA,QAAIO,OAAO,IAAI,IAAf,EACIP,IAAI,GAAGO,OAAO,CAACC,OAAR,CAAgB,IAAhB,EAAsB;AAAEC,MAAAA,QAAQ,EAAEL;AAAZ,KAAtB,CAAP,CADJ,KAGIJ,IAAI,GAAGI,QAAP;;AACJ,YAAQC,IAAR;AACI,WAAK,SAAL;AAAgB;AACZ,eAAKL,IAAL,GAAYA,IAAZ;AACA;AACH;;AACD,WAAK,QAAL;AAAe;AACX,gBAAMU,aAAa,GAAG,KAAKV,IAA3B;;AACA,eAAK,MAAMD,MAAX,IAAqB,KAAKY,OAAL,EAArB,EAAqC;AACjC;AACA,kBAAMC,OAAO,GAAGC,KAAK,CAACC,IAAN,CAAWJ,aAAa,CAACX,MAAD,CAAxB,CAAhB;AACA,kBAAMgB,OAAO,GAAGF,KAAK,CAACC,IAAN,CAAWd,IAAI,CAACD,MAAD,CAAf,CAAhB;AACAC,YAAAA,IAAI,CAACD,MAAD,CAAJ,GAAea,OAAO,CAACI,MAAR,CAAeD,OAAf,EAAwBE,KAAxB,CAA8B,CAACX,QAA/B,CAAf;AACH;;AACD,eAAKN,IAAL,GAAYA,IAAZ;AACA;AACH;AAfL;AAiBH;;AACD,SAAOkB,kBAAP,GAA4B;AACxB,SAAKC,MAAL,CAAY;AACRd,MAAAA,IAAI,EAAE,CAACZ,CAAC,CAAC2B,UAAH,EAAe,SAAf,CADE;AAERd,MAAAA,QAAQ,EAAE,CAACb,CAAC,CAAC4B,MAAH,CAFF;AAGRd,MAAAA,OAAO,EAAE,CAACd,CAAC,CAAC6B,GAAH,EAAQ,IAAR,CAHD;AAIRC,MAAAA,QAAQ,EAAE,CAAC9B,CAAC,CAAC+B,MAAH;AAJF,KAAZ;AAMH;;AA5C+C;AA8CpD9B,aAAa,CAAC+B,QAAd,GAAyB,eAAzB;AACA/B,aAAa,CAACwB,kBAAd","sourcesContent":["import { ColumnDataSource } from \"./column_data_source\";\nimport * as p from \"../../core/properties\";\nexport class WebDataSource extends ColumnDataSource {\n    constructor(attrs) {\n        super(attrs);\n    }\n    get_column(colname) {\n        const column = this.data[colname];\n        return column != null ? column : [];\n    }\n    initialize() {\n        super.initialize();\n        this.setup();\n    }\n    load_data(raw_data, mode, max_size) {\n        const { adapter } = this;\n        let data;\n        if (adapter != null)\n            data = adapter.execute(this, { response: raw_data });\n        else\n            data = raw_data;\n        switch (mode) {\n            case \"replace\": {\n                this.data = data;\n                break;\n            }\n            case \"append\": {\n                const original_data = this.data;\n                for (const column of this.columns()) {\n                    // XXX: support typed arrays\n                    const old_col = Array.from(original_data[column]);\n                    const new_col = Array.from(data[column]);\n                    data[column] = old_col.concat(new_col).slice(-max_size);\n                }\n                this.data = data;\n                break;\n            }\n        }\n    }\n    static init_WebDataSource() {\n        this.define({\n            mode: [p.UpdateMode, 'replace'],\n            max_size: [p.Number],\n            adapter: [p.Any, null],\n            data_url: [p.String],\n        });\n    }\n}\nWebDataSource.__name__ = \"WebDataSource\";\nWebDataSource.init_WebDataSource();\n//# sourceMappingURL=web_data_source.js.map"]},"metadata":{},"sourceType":"module"}