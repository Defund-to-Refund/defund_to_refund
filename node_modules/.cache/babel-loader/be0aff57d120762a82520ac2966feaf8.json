{"ast":null,"code":"import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport * as p from \"../../core/properties\";\nimport * as hittest from \"../../core/hittest\";\nimport { SpatialIndex } from \"../../core/util/spatial\";\nexport class ImageBaseView extends XYGlyphView {\n  _render(_ctx, _indices, _data) {}\n\n  _index_data() {\n    const points = [];\n\n    for (let i = 0, end = this._x.length; i < end; i++) {\n      const [l, r, t, b] = this._lrtb(i);\n\n      if (isNaN(l + r + t + b) || !isFinite(l + r + t + b)) {\n        continue;\n      }\n\n      points.push({\n        x0: l,\n        y0: b,\n        x1: r,\n        y1: t,\n        i\n      });\n    }\n\n    return new SpatialIndex(points);\n  }\n\n  _lrtb(i) {\n    const xr = this.renderer.xscale.source_range;\n    const x1 = this._x[i];\n    const x2 = xr.is_reversed ? x1 - this._dw[i] : x1 + this._dw[i];\n    const yr = this.renderer.yscale.source_range;\n    const y1 = this._y[i];\n    const y2 = yr.is_reversed ? y1 - this._dh[i] : y1 + this._dh[i];\n    const [l, r] = x1 < x2 ? [x1, x2] : [x2, x1];\n    const [b, t] = y1 < y2 ? [y1, y2] : [y2, y1];\n    return [l, r, t, b];\n  }\n\n  _set_width_heigh_data() {\n    if (this.image_data == null || this.image_data.length != this._image.length) this.image_data = new Array(this._image.length);\n    if (this._width == null || this._width.length != this._image.length) this._width = new Array(this._image.length);\n    if (this._height == null || this._height.length != this._image.length) this._height = new Array(this._image.length);\n  }\n\n  _get_or_create_canvas(i) {\n    const _image_data = this.image_data[i];\n    if (_image_data != null && _image_data.width == this._width[i] && _image_data.height == this._height[i]) return _image_data;else {\n      const canvas = document.createElement('canvas');\n      canvas.width = this._width[i];\n      canvas.height = this._height[i];\n      return canvas;\n    }\n  }\n\n  _set_image_data_from_buffer(i, buf8) {\n    const canvas = this._get_or_create_canvas(i);\n\n    const ctx = canvas.getContext('2d');\n    const image_data = ctx.getImageData(0, 0, this._width[i], this._height[i]);\n    image_data.data.set(buf8);\n    ctx.putImageData(image_data, 0, 0);\n    this.image_data[i] = canvas;\n  }\n\n  _map_data() {\n    switch (this.model.properties.dw.units) {\n      case \"data\":\n        {\n          this.sw = this.sdist(this.renderer.xscale, this._x, this._dw, 'edge', this.model.dilate);\n          break;\n        }\n\n      case \"screen\":\n        {\n          this.sw = this._dw;\n          break;\n        }\n    }\n\n    switch (this.model.properties.dh.units) {\n      case \"data\":\n        {\n          this.sh = this.sdist(this.renderer.yscale, this._y, this._dh, 'edge', this.model.dilate);\n          break;\n        }\n\n      case \"screen\":\n        {\n          this.sh = this._dh;\n          break;\n        }\n    }\n  }\n\n  _image_index(index, x, y) {\n    const [l, r, t, b] = this._lrtb(index);\n\n    const width = this._width[index];\n    const height = this._height[index];\n    const dx = (r - l) / width;\n    const dy = (t - b) / height;\n    let dim1 = Math.floor((x - l) / dx);\n    let dim2 = Math.floor((y - b) / dy);\n    if (this.renderer.xscale.source_range.is_reversed) dim1 = width - dim1 - 1;\n    if (this.renderer.yscale.source_range.is_reversed) dim2 = height - dim2 - 1;\n    return {\n      index,\n      dim1,\n      dim2,\n      flat_index: dim2 * width + dim1\n    };\n  }\n\n  _hit_point(geometry) {\n    const {\n      sx,\n      sy\n    } = geometry;\n    const x = this.renderer.xscale.invert(sx);\n    const y = this.renderer.yscale.invert(sy);\n    const candidates = this.index.indices({\n      x0: x,\n      x1: x,\n      y0: y,\n      y1: y\n    });\n    const result = hittest.create_empty_hit_test_result();\n    result.image_indices = [];\n\n    for (const index of candidates) {\n      if (sx != Infinity && sy != Infinity) {\n        result.image_indices.push(this._image_index(index, x, y));\n      }\n    }\n\n    return result;\n  }\n\n}\nImageBaseView.__name__ = \"ImageBaseView\";\nexport class ImageBase extends XYGlyph {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ImageBase() {\n    this.prototype.default_view = ImageBaseView;\n    this.define({\n      image: [p.NumberSpec],\n      dw: [p.DistanceSpec],\n      dh: [p.DistanceSpec],\n      dilate: [p.Boolean, false],\n      global_alpha: [p.Number, 1.0]\n    });\n  }\n\n}\nImageBase.__name__ = \"ImageBase\";\nImageBase.init_ImageBase();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/image_base.js"],"names":["XYGlyph","XYGlyphView","p","hittest","SpatialIndex","ImageBaseView","_render","_ctx","_indices","_data","_index_data","points","i","end","_x","length","l","r","t","b","_lrtb","isNaN","isFinite","push","x0","y0","x1","y1","xr","renderer","xscale","source_range","x2","is_reversed","_dw","yr","yscale","_y","y2","_dh","_set_width_heigh_data","image_data","_image","Array","_width","_height","_get_or_create_canvas","_image_data","width","height","canvas","document","createElement","_set_image_data_from_buffer","buf8","ctx","getContext","getImageData","data","set","putImageData","_map_data","model","properties","dw","units","sw","sdist","dilate","dh","sh","_image_index","index","x","y","dx","dy","dim1","Math","floor","dim2","flat_index","_hit_point","geometry","sx","sy","invert","candidates","indices","result","create_empty_hit_test_result","image_indices","Infinity","__name__","ImageBase","constructor","attrs","init_ImageBase","prototype","default_view","define","image","NumberSpec","DistanceSpec","Boolean","global_alpha","Number"],"mappings":"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","sourcesContent":["import { XYGlyph, XYGlyphView } from \"./xy_glyph\";\nimport * as p from \"../../core/properties\";\nimport * as hittest from \"../../core/hittest\";\nimport { SpatialIndex } from \"../../core/util/spatial\";\nexport class ImageBaseView extends XYGlyphView {\n    _render(_ctx, _indices, _data) { }\n    _index_data() {\n        const points = [];\n        for (let i = 0, end = this._x.length; i < end; i++) {\n            const [l, r, t, b] = this._lrtb(i);\n            if (isNaN(l + r + t + b) || !isFinite(l + r + t + b)) {\n                continue;\n            }\n            points.push({ x0: l, y0: b, x1: r, y1: t, i });\n        }\n        return new SpatialIndex(points);\n    }\n    _lrtb(i) {\n        const xr = this.renderer.xscale.source_range;\n        const x1 = this._x[i];\n        const x2 = xr.is_reversed ? x1 - this._dw[i] : x1 + this._dw[i];\n        const yr = this.renderer.yscale.source_range;\n        const y1 = this._y[i];\n        const y2 = yr.is_reversed ? y1 - this._dh[i] : y1 + this._dh[i];\n        const [l, r] = x1 < x2 ? [x1, x2] : [x2, x1];\n        const [b, t] = y1 < y2 ? [y1, y2] : [y2, y1];\n        return [l, r, t, b];\n    }\n    _set_width_heigh_data() {\n        if (this.image_data == null || this.image_data.length != this._image.length)\n            this.image_data = new Array(this._image.length);\n        if (this._width == null || this._width.length != this._image.length)\n            this._width = new Array(this._image.length);\n        if (this._height == null || this._height.length != this._image.length)\n            this._height = new Array(this._image.length);\n    }\n    _get_or_create_canvas(i) {\n        const _image_data = this.image_data[i];\n        if (_image_data != null && _image_data.width == this._width[i] &&\n            _image_data.height == this._height[i])\n            return _image_data;\n        else {\n            const canvas = document.createElement('canvas');\n            canvas.width = this._width[i];\n            canvas.height = this._height[i];\n            return canvas;\n        }\n    }\n    _set_image_data_from_buffer(i, buf8) {\n        const canvas = this._get_or_create_canvas(i);\n        const ctx = canvas.getContext('2d');\n        const image_data = ctx.getImageData(0, 0, this._width[i], this._height[i]);\n        image_data.data.set(buf8);\n        ctx.putImageData(image_data, 0, 0);\n        this.image_data[i] = canvas;\n    }\n    _map_data() {\n        switch (this.model.properties.dw.units) {\n            case \"data\": {\n                this.sw = this.sdist(this.renderer.xscale, this._x, this._dw, 'edge', this.model.dilate);\n                break;\n            }\n            case \"screen\": {\n                this.sw = this._dw;\n                break;\n            }\n        }\n        switch (this.model.properties.dh.units) {\n            case \"data\": {\n                this.sh = this.sdist(this.renderer.yscale, this._y, this._dh, 'edge', this.model.dilate);\n                break;\n            }\n            case \"screen\": {\n                this.sh = this._dh;\n                break;\n            }\n        }\n    }\n    _image_index(index, x, y) {\n        const [l, r, t, b] = this._lrtb(index);\n        const width = this._width[index];\n        const height = this._height[index];\n        const dx = (r - l) / width;\n        const dy = (t - b) / height;\n        let dim1 = Math.floor((x - l) / dx);\n        let dim2 = Math.floor((y - b) / dy);\n        if (this.renderer.xscale.source_range.is_reversed)\n            dim1 = width - dim1 - 1;\n        if (this.renderer.yscale.source_range.is_reversed)\n            dim2 = height - dim2 - 1;\n        return { index, dim1, dim2, flat_index: dim2 * width + dim1 };\n    }\n    _hit_point(geometry) {\n        const { sx, sy } = geometry;\n        const x = this.renderer.xscale.invert(sx);\n        const y = this.renderer.yscale.invert(sy);\n        const candidates = this.index.indices({ x0: x, x1: x, y0: y, y1: y });\n        const result = hittest.create_empty_hit_test_result();\n        result.image_indices = [];\n        for (const index of candidates) {\n            if ((sx != Infinity) && (sy != Infinity)) {\n                result.image_indices.push(this._image_index(index, x, y));\n            }\n        }\n        return result;\n    }\n}\nImageBaseView.__name__ = \"ImageBaseView\";\nexport class ImageBase extends XYGlyph {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ImageBase() {\n        this.prototype.default_view = ImageBaseView;\n        this.define({\n            image: [p.NumberSpec],\n            dw: [p.DistanceSpec],\n            dh: [p.DistanceSpec],\n            dilate: [p.Boolean, false],\n            global_alpha: [p.Number, 1.0],\n        });\n    }\n}\nImageBase.__name__ = \"ImageBase\";\nImageBase.init_ImageBase();\n//# sourceMappingURL=image_base.js.map"]},"metadata":{},"sourceType":"module"}