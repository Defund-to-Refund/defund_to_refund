{"ast":null,"code":"import { ImageBase, ImageBaseView } from \"./image_base\";\nimport { LinearColorMapper } from \"../mappers/linear_color_mapper\";\nimport * as p from \"../../core/properties\";\nimport { concat } from \"../../core/util/array\";\nexport class ImageView extends ImageBaseView {\n  initialize() {\n    super.initialize();\n    this.connect(this.model.color_mapper.change, () => this._update_image());\n    this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render());\n  }\n\n  _update_image() {\n    // Only reset image_data if already initialized\n    if (this.image_data != null) {\n      this._set_data();\n\n      this.renderer.plot_view.request_render();\n    }\n  }\n\n  _set_data() {\n    this._set_width_heigh_data();\n\n    const cmap = this.model.color_mapper.rgba_mapper;\n\n    for (let i = 0, end = this._image.length; i < end; i++) {\n      let img;\n\n      if (this._image_shape != null && this._image_shape[i].length > 0) {\n        img = this._image[i];\n        const shape = this._image_shape[i];\n        this._height[i] = shape[0];\n        this._width[i] = shape[1];\n      } else {\n        const _image = this._image[i];\n        img = concat(_image);\n        this._height[i] = _image.length;\n        this._width[i] = _image[0].length;\n      }\n\n      const buf8 = cmap.v_compute(img);\n\n      this._set_image_data_from_buffer(i, buf8);\n    }\n  }\n\n  _render(ctx, indices, {\n    image_data,\n    sx,\n    sy,\n    sw,\n    sh\n  }) {\n    const old_smoothing = ctx.getImageSmoothingEnabled();\n    ctx.setImageSmoothingEnabled(false);\n    ctx.globalAlpha = this.model.global_alpha;\n\n    for (const i of indices) {\n      if (image_data[i] == null) continue;\n      if (isNaN(sx[i] + sy[i] + sw[i] + sh[i])) continue;\n      const y_offset = sy[i];\n      ctx.translate(0, y_offset);\n      ctx.scale(1, -1);\n      ctx.translate(0, -y_offset);\n      ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n      ctx.translate(0, y_offset);\n      ctx.scale(1, -1);\n      ctx.translate(0, -y_offset);\n    }\n\n    ctx.setImageSmoothingEnabled(old_smoothing);\n  }\n\n}\nImageView.__name__ = \"ImageView\"; // NOTE: this needs to be redefined here, because palettes are located in bokeh-api.js bundle\n\nconst Greys9 = () => [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"];\n\nexport class Image extends ImageBase {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Image() {\n    this.prototype.default_view = ImageView;\n    this.define({\n      color_mapper: [p.Instance, () => new LinearColorMapper({\n        palette: Greys9()\n      })]\n    });\n  }\n\n}\nImage.__name__ = \"Image\";\nImage.init_Image();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/image.js"],"names":["ImageBase","ImageBaseView","LinearColorMapper","p","concat","ImageView","initialize","connect","model","color_mapper","change","_update_image","properties","global_alpha","renderer","request_render","image_data","_set_data","plot_view","_set_width_heigh_data","cmap","rgba_mapper","i","end","_image","length","img","_image_shape","shape","_height","_width","buf8","v_compute","_set_image_data_from_buffer","_render","ctx","indices","sx","sy","sw","sh","old_smoothing","getImageSmoothingEnabled","setImageSmoothingEnabled","globalAlpha","isNaN","y_offset","translate","scale","drawImage","__name__","Greys9","Image","constructor","attrs","init_Image","prototype","default_view","define","Instance","palette"],"mappings":"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","sourcesContent":["import { ImageBase, ImageBaseView } from \"./image_base\";\nimport { LinearColorMapper } from \"../mappers/linear_color_mapper\";\nimport * as p from \"../../core/properties\";\nimport { concat } from \"../../core/util/array\";\nexport class ImageView extends ImageBaseView {\n    initialize() {\n        super.initialize();\n        this.connect(this.model.color_mapper.change, () => this._update_image());\n        this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render());\n    }\n    _update_image() {\n        // Only reset image_data if already initialized\n        if (this.image_data != null) {\n            this._set_data();\n            this.renderer.plot_view.request_render();\n        }\n    }\n    _set_data() {\n        this._set_width_heigh_data();\n        const cmap = this.model.color_mapper.rgba_mapper;\n        for (let i = 0, end = this._image.length; i < end; i++) {\n            let img;\n            if (this._image_shape != null && this._image_shape[i].length > 0) {\n                img = this._image[i];\n                const shape = this._image_shape[i];\n                this._height[i] = shape[0];\n                this._width[i] = shape[1];\n            }\n            else {\n                const _image = this._image[i];\n                img = concat(_image);\n                this._height[i] = _image.length;\n                this._width[i] = _image[0].length;\n            }\n            const buf8 = cmap.v_compute(img);\n            this._set_image_data_from_buffer(i, buf8);\n        }\n    }\n    _render(ctx, indices, { image_data, sx, sy, sw, sh }) {\n        const old_smoothing = ctx.getImageSmoothingEnabled();\n        ctx.setImageSmoothingEnabled(false);\n        ctx.globalAlpha = this.model.global_alpha;\n        for (const i of indices) {\n            if (image_data[i] == null)\n                continue;\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i]))\n                continue;\n            const y_offset = sy[i];\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n            ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n        }\n        ctx.setImageSmoothingEnabled(old_smoothing);\n    }\n}\nImageView.__name__ = \"ImageView\";\n// NOTE: this needs to be redefined here, because palettes are located in bokeh-api.js bundle\nconst Greys9 = () => [\"#000000\", \"#252525\", \"#525252\", \"#737373\", \"#969696\", \"#bdbdbd\", \"#d9d9d9\", \"#f0f0f0\", \"#ffffff\"];\nexport class Image extends ImageBase {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Image() {\n        this.prototype.default_view = ImageView;\n        this.define({\n            color_mapper: [p.Instance, () => new LinearColorMapper({ palette: Greys9() })],\n        });\n    }\n}\nImage.__name__ = \"Image\";\nImage.init_Image();\n//# sourceMappingURL=image.js.map"]},"metadata":{},"sourceType":"module"}