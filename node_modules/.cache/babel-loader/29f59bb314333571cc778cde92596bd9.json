{"ast":null,"code":"import { Annotation, AnnotationView } from \"./annotation\";\nimport * as p from \"../../core/properties\";\nexport class SlopeView extends AnnotationView {\n  initialize() {\n    super.initialize();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.change, () => this.plot_view.request_render());\n  }\n\n  render() {\n    if (!this.model.visible) return;\n\n    this._draw_slope();\n  }\n\n  _draw_slope() {\n    const gradient = this.model.gradient;\n    const y_intercept = this.model.y_intercept;\n\n    if (gradient == null || y_intercept == null) {\n      return;\n    }\n\n    const {\n      frame\n    } = this.plot_view;\n    const xscale = frame.xscales[this.model.x_range_name];\n    const yscale = frame.yscales[this.model.y_range_name];\n    const sy_start = frame._top.value;\n    const sy_end = sy_start + frame._height.value;\n    const y_start = yscale.invert(sy_start);\n    const y_end = yscale.invert(sy_end);\n    const x_start = (y_start - y_intercept) / gradient;\n    const x_end = (y_end - y_intercept) / gradient;\n    const sx_start = xscale.compute(x_start);\n    const sx_end = xscale.compute(x_end);\n    const {\n      ctx\n    } = this.plot_view.canvas_view;\n    ctx.save();\n    ctx.beginPath();\n    this.visuals.line.set_value(ctx);\n    ctx.moveTo(sx_start, sy_start);\n    ctx.lineTo(sx_end, sy_end);\n    ctx.stroke();\n    ctx.restore();\n  }\n\n}\nSlopeView.__name__ = \"SlopeView\";\nexport class Slope extends Annotation {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Slope() {\n    this.prototype.default_view = SlopeView;\n    this.mixins(['line']);\n    this.define({\n      gradient: [p.Number, null],\n      y_intercept: [p.Number, null],\n      x_range_name: [p.String, 'default'],\n      y_range_name: [p.String, 'default']\n    });\n    this.override({\n      line_color: 'black'\n    });\n  }\n\n}\nSlope.__name__ = \"Slope\";\nSlope.init_Slope();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/annotations/slope.js"],"names":["Annotation","AnnotationView","p","SlopeView","initialize","connect_signals","connect","model","change","plot_view","request_render","render","visible","_draw_slope","gradient","y_intercept","frame","xscale","xscales","x_range_name","yscale","yscales","y_range_name","sy_start","_top","value","sy_end","_height","y_start","invert","y_end","x_start","x_end","sx_start","compute","sx_end","ctx","canvas_view","save","beginPath","visuals","line","set_value","moveTo","lineTo","stroke","restore","__name__","Slope","constructor","attrs","init_Slope","prototype","default_view","mixins","define","Number","String","override","line_color"],"mappings":"AAAA,SAASA,UAAT,EAAqBC,cAArB,QAA2C,cAA3C;AACA,OAAO,KAAKC,CAAZ,MAAmB,uBAAnB;AACA,OAAO,MAAMC,SAAN,SAAwBF,cAAxB,CAAuC;AAC1CG,EAAAA,UAAU,GAAG;AACT,UAAMA,UAAN;AACH;;AACDC,EAAAA,eAAe,GAAG;AACd,UAAMA,eAAN;AACA,SAAKC,OAAL,CAAa,KAAKC,KAAL,CAAWC,MAAxB,EAAgC,MAAM,KAAKC,SAAL,CAAeC,cAAf,EAAtC;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,QAAI,CAAC,KAAKJ,KAAL,CAAWK,OAAhB,EACI;;AACJ,SAAKC,WAAL;AACH;;AACDA,EAAAA,WAAW,GAAG;AACV,UAAMC,QAAQ,GAAG,KAAKP,KAAL,CAAWO,QAA5B;AACA,UAAMC,WAAW,GAAG,KAAKR,KAAL,CAAWQ,WAA/B;;AACA,QAAID,QAAQ,IAAI,IAAZ,IAAoBC,WAAW,IAAI,IAAvC,EAA6C;AACzC;AACH;;AACD,UAAM;AAAEC,MAAAA;AAAF,QAAY,KAAKP,SAAvB;AACA,UAAMQ,MAAM,GAAGD,KAAK,CAACE,OAAN,CAAc,KAAKX,KAAL,CAAWY,YAAzB,CAAf;AACA,UAAMC,MAAM,GAAGJ,KAAK,CAACK,OAAN,CAAc,KAAKd,KAAL,CAAWe,YAAzB,CAAf;AACA,UAAMC,QAAQ,GAAGP,KAAK,CAACQ,IAAN,CAAWC,KAA5B;AACA,UAAMC,MAAM,GAAGH,QAAQ,GAAGP,KAAK,CAACW,OAAN,CAAcF,KAAxC;AACA,UAAMG,OAAO,GAAGR,MAAM,CAACS,MAAP,CAAcN,QAAd,CAAhB;AACA,UAAMO,KAAK,GAAGV,MAAM,CAACS,MAAP,CAAcH,MAAd,CAAd;AACA,UAAMK,OAAO,GAAG,CAACH,OAAO,GAAGb,WAAX,IAA0BD,QAA1C;AACA,UAAMkB,KAAK,GAAG,CAACF,KAAK,GAAGf,WAAT,IAAwBD,QAAtC;AACA,UAAMmB,QAAQ,GAAGhB,MAAM,CAACiB,OAAP,CAAeH,OAAf,CAAjB;AACA,UAAMI,MAAM,GAAGlB,MAAM,CAACiB,OAAP,CAAeF,KAAf,CAAf;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAU,KAAK3B,SAAL,CAAe4B,WAA/B;AACAD,IAAAA,GAAG,CAACE,IAAJ;AACAF,IAAAA,GAAG,CAACG,SAAJ;AACA,SAAKC,OAAL,CAAaC,IAAb,CAAkBC,SAAlB,CAA4BN,GAA5B;AACAA,IAAAA,GAAG,CAACO,MAAJ,CAAWV,QAAX,EAAqBV,QAArB;AACAa,IAAAA,GAAG,CAACQ,MAAJ,CAAWT,MAAX,EAAmBT,MAAnB;AACAU,IAAAA,GAAG,CAACS,MAAJ;AACAT,IAAAA,GAAG,CAACU,OAAJ;AACH;;AAtCyC;AAwC9C3C,SAAS,CAAC4C,QAAV,GAAqB,WAArB;AACA,OAAO,MAAMC,KAAN,SAAoBhD,UAApB,CAA+B;AAClCiD,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACH;;AACD,SAAOC,UAAP,GAAoB;AAChB,SAAKC,SAAL,CAAeC,YAAf,GAA8BlD,SAA9B;AACA,SAAKmD,MAAL,CAAY,CAAC,MAAD,CAAZ;AACA,SAAKC,MAAL,CAAY;AACRzC,MAAAA,QAAQ,EAAE,CAACZ,CAAC,CAACsD,MAAH,EAAW,IAAX,CADF;AAERzC,MAAAA,WAAW,EAAE,CAACb,CAAC,CAACsD,MAAH,EAAW,IAAX,CAFL;AAGRrC,MAAAA,YAAY,EAAE,CAACjB,CAAC,CAACuD,MAAH,EAAW,SAAX,CAHN;AAIRnC,MAAAA,YAAY,EAAE,CAACpB,CAAC,CAACuD,MAAH,EAAW,SAAX;AAJN,KAAZ;AAMA,SAAKC,QAAL,CAAc;AACVC,MAAAA,UAAU,EAAE;AADF,KAAd;AAGH;;AAhBiC;AAkBtCX,KAAK,CAACD,QAAN,GAAiB,OAAjB;AACAC,KAAK,CAACG,UAAN","sourcesContent":["import { Annotation, AnnotationView } from \"./annotation\";\nimport * as p from \"../../core/properties\";\nexport class SlopeView extends AnnotationView {\n    initialize() {\n        super.initialize();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.change, () => this.plot_view.request_render());\n    }\n    render() {\n        if (!this.model.visible)\n            return;\n        this._draw_slope();\n    }\n    _draw_slope() {\n        const gradient = this.model.gradient;\n        const y_intercept = this.model.y_intercept;\n        if (gradient == null || y_intercept == null) {\n            return;\n        }\n        const { frame } = this.plot_view;\n        const xscale = frame.xscales[this.model.x_range_name];\n        const yscale = frame.yscales[this.model.y_range_name];\n        const sy_start = frame._top.value;\n        const sy_end = sy_start + frame._height.value;\n        const y_start = yscale.invert(sy_start);\n        const y_end = yscale.invert(sy_end);\n        const x_start = (y_start - y_intercept) / gradient;\n        const x_end = (y_end - y_intercept) / gradient;\n        const sx_start = xscale.compute(x_start);\n        const sx_end = xscale.compute(x_end);\n        const { ctx } = this.plot_view.canvas_view;\n        ctx.save();\n        ctx.beginPath();\n        this.visuals.line.set_value(ctx);\n        ctx.moveTo(sx_start, sy_start);\n        ctx.lineTo(sx_end, sy_end);\n        ctx.stroke();\n        ctx.restore();\n    }\n}\nSlopeView.__name__ = \"SlopeView\";\nexport class Slope extends Annotation {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Slope() {\n        this.prototype.default_view = SlopeView;\n        this.mixins(['line']);\n        this.define({\n            gradient: [p.Number, null],\n            y_intercept: [p.Number, null],\n            x_range_name: [p.String, 'default'],\n            y_range_name: [p.String, 'default'],\n        });\n        this.override({\n            line_color: 'black',\n        });\n    }\n}\nSlope.__name__ = \"Slope\";\nSlope.init_Slope();\n//# sourceMappingURL=slope.js.map"]},"metadata":{},"sourceType":"module"}