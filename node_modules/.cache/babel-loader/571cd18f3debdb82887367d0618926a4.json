{"ast":null,"code":"import { ImageBase, ImageBaseView } from \"./image_base\";\nimport { concat } from \"../../core/util/array\";\nexport class ImageRGBAView extends ImageBaseView {\n  initialize() {\n    super.initialize();\n    this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render());\n  }\n\n  _set_data(indices) {\n    this._set_width_heigh_data();\n\n    for (let i = 0, end = this._image.length; i < end; i++) {\n      if (indices != null && indices.indexOf(i) < 0) continue;\n      let buf;\n\n      if (this._image_shape != null && this._image_shape[i].length > 0) {\n        buf = this._image[i].buffer;\n        const shape = this._image_shape[i];\n        this._height[i] = shape[0];\n        this._width[i] = shape[1];\n      } else {\n        const _image = this._image[i];\n        const flat = concat(_image);\n        buf = new ArrayBuffer(flat.length * 4);\n        const color = new Uint32Array(buf);\n\n        for (let j = 0, endj = flat.length; j < endj; j++) {\n          color[j] = flat[j];\n        }\n\n        this._height[i] = _image.length;\n        this._width[i] = _image[0].length;\n      }\n\n      const buf8 = new Uint8Array(buf);\n\n      this._set_image_data_from_buffer(i, buf8);\n    }\n  }\n\n  _render(ctx, indices, {\n    image_data,\n    sx,\n    sy,\n    sw,\n    sh\n  }) {\n    const old_smoothing = ctx.getImageSmoothingEnabled();\n    ctx.setImageSmoothingEnabled(false);\n    ctx.globalAlpha = this.model.global_alpha;\n\n    for (const i of indices) {\n      if (isNaN(sx[i] + sy[i] + sw[i] + sh[i])) continue;\n      const y_offset = sy[i];\n      ctx.translate(0, y_offset);\n      ctx.scale(1, -1);\n      ctx.translate(0, -y_offset);\n      ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n      ctx.translate(0, y_offset);\n      ctx.scale(1, -1);\n      ctx.translate(0, -y_offset);\n    }\n\n    ctx.setImageSmoothingEnabled(old_smoothing);\n  }\n\n}\nImageRGBAView.__name__ = \"ImageRGBAView\";\nexport class ImageRGBA extends ImageBase {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ImageRGBA() {\n    this.prototype.default_view = ImageRGBAView;\n  }\n\n}\nImageRGBA.__name__ = \"ImageRGBA\";\nImageRGBA.init_ImageRGBA();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/glyphs/image_rgba.js"],"names":["ImageBase","ImageBaseView","concat","ImageRGBAView","initialize","connect","model","properties","global_alpha","change","renderer","request_render","_set_data","indices","_set_width_heigh_data","i","end","_image","length","indexOf","buf","_image_shape","buffer","shape","_height","_width","flat","ArrayBuffer","color","Uint32Array","j","endj","buf8","Uint8Array","_set_image_data_from_buffer","_render","ctx","image_data","sx","sy","sw","sh","old_smoothing","getImageSmoothingEnabled","setImageSmoothingEnabled","globalAlpha","isNaN","y_offset","translate","scale","drawImage","__name__","ImageRGBA","constructor","attrs","init_ImageRGBA","prototype","default_view"],"mappings":"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","sourcesContent":["import { ImageBase, ImageBaseView } from \"./image_base\";\nimport { concat } from \"../../core/util/array\";\nexport class ImageRGBAView extends ImageBaseView {\n    initialize() {\n        super.initialize();\n        this.connect(this.model.properties.global_alpha.change, () => this.renderer.request_render());\n    }\n    _set_data(indices) {\n        this._set_width_heigh_data();\n        for (let i = 0, end = this._image.length; i < end; i++) {\n            if (indices != null && indices.indexOf(i) < 0)\n                continue;\n            let buf;\n            if (this._image_shape != null && this._image_shape[i].length > 0) {\n                buf = this._image[i].buffer;\n                const shape = this._image_shape[i];\n                this._height[i] = shape[0];\n                this._width[i] = shape[1];\n            }\n            else {\n                const _image = this._image[i];\n                const flat = concat(_image);\n                buf = new ArrayBuffer(flat.length * 4);\n                const color = new Uint32Array(buf);\n                for (let j = 0, endj = flat.length; j < endj; j++) {\n                    color[j] = flat[j];\n                }\n                this._height[i] = _image.length;\n                this._width[i] = _image[0].length;\n            }\n            const buf8 = new Uint8Array(buf);\n            this._set_image_data_from_buffer(i, buf8);\n        }\n    }\n    _render(ctx, indices, { image_data, sx, sy, sw, sh }) {\n        const old_smoothing = ctx.getImageSmoothingEnabled();\n        ctx.setImageSmoothingEnabled(false);\n        ctx.globalAlpha = this.model.global_alpha;\n        for (const i of indices) {\n            if (isNaN(sx[i] + sy[i] + sw[i] + sh[i]))\n                continue;\n            const y_offset = sy[i];\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n            ctx.drawImage(image_data[i], sx[i] | 0, sy[i] | 0, sw[i], sh[i]);\n            ctx.translate(0, y_offset);\n            ctx.scale(1, -1);\n            ctx.translate(0, -y_offset);\n        }\n        ctx.setImageSmoothingEnabled(old_smoothing);\n    }\n}\nImageRGBAView.__name__ = \"ImageRGBAView\";\nexport class ImageRGBA extends ImageBase {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ImageRGBA() {\n        this.prototype.default_view = ImageRGBAView;\n    }\n}\nImageRGBA.__name__ = \"ImageRGBA\";\nImageRGBA.init_ImageRGBA();\n//# sourceMappingURL=image_rgba.js.map"]},"metadata":{},"sourceType":"module"}