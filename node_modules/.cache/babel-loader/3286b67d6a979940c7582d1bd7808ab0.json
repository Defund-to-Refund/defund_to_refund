{"ast":null,"code":"import { logger } from \"../../core/logging\";\nimport { empty, div, a } from \"../../core/dom\";\nimport { build_views, remove_views } from \"../../core/build_views\";\nimport * as p from \"../../core/properties\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { some, every } from \"../../core/util/array\";\nimport { Set } from \"../../core/util/data_structures\";\nimport { isString } from \"../../core/util/types\";\nimport { Model } from \"../../model\";\nimport { GestureTool } from \"./gestures/gesture_tool\";\nimport { ActionTool } from \"./actions/action_tool\";\nimport { HelpTool } from \"./actions/help_tool\";\nimport { InspectTool } from \"./inspectors/inspect_tool\";\nimport { bk_toolbar, bk_toolbar_hidden, bk_button_bar } from \"../../styles/toolbar\";\nimport { bk_logo, bk_logo_small, bk_grey } from \"../../styles/logo\";\nimport { bk_side } from \"../../styles/mixins\";\nexport class ToolbarViewModel extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ToolbarViewModel() {\n    this.define({\n      _visible: [p.Any, null],\n      autohide: [p.Boolean, false]\n    });\n  }\n\n  get visible() {\n    return !this.autohide ? true : this._visible == null ? false : this._visible;\n  }\n\n}\nToolbarViewModel.__name__ = \"ToolbarViewModel\";\nToolbarViewModel.init_ToolbarViewModel();\nexport class ToolbarBaseView extends DOMView {\n  initialize() {\n    super.initialize();\n    this._tool_button_views = {};\n    this._toolbar_view_model = new ToolbarViewModel({\n      autohide: this.model.autohide\n    });\n  }\n\n  async lazy_initialize() {\n    await this._build_tool_button_views();\n  }\n\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.tools.change, async () => {\n      await this._build_tool_button_views();\n      this.render();\n    });\n    this.connect(this.model.properties.autohide.change, () => {\n      this._toolbar_view_model.autohide = this.model.autohide;\n\n      this._on_visible_change();\n    });\n    this.connect(this._toolbar_view_model.properties._visible.change, () => this._on_visible_change());\n  }\n\n  remove() {\n    remove_views(this._tool_button_views);\n    super.remove();\n  }\n\n  async _build_tool_button_views() {\n    const tools = this.model._proxied_tools != null ? this.model._proxied_tools : this.model.tools; // XXX\n\n    await build_views(this._tool_button_views, tools, {\n      parent: this\n    }, tool => tool.button_view);\n  }\n\n  set_visibility(visible) {\n    if (visible != this._toolbar_view_model._visible) {\n      this._toolbar_view_model._visible = visible;\n    }\n  }\n\n  _on_visible_change() {\n    const visible = this._toolbar_view_model.visible;\n    const hidden_class = bk_toolbar_hidden;\n\n    if (this.el.classList.contains(hidden_class) && visible) {\n      this.el.classList.remove(hidden_class);\n    } else if (!visible) {\n      this.el.classList.add(hidden_class);\n    }\n  }\n\n  render() {\n    empty(this.el);\n    this.el.classList.add(bk_toolbar);\n    this.el.classList.add(bk_side(this.model.toolbar_location));\n    this._toolbar_view_model.autohide = this.model.autohide;\n\n    this._on_visible_change();\n\n    if (this.model.logo != null) {\n      const gray = this.model.logo === \"grey\" ? bk_grey : null;\n      const logo = a({\n        href: \"https://bokeh.org/\",\n        target: \"_blank\",\n        class: [bk_logo, bk_logo_small, gray]\n      });\n      this.el.appendChild(logo);\n    }\n\n    const bars = [];\n\n    const el = tool => {\n      return this._tool_button_views[tool.id].el;\n    };\n\n    const {\n      gestures\n    } = this.model;\n\n    for (const et in gestures) {\n      bars.push(gestures[et].tools.map(el));\n    }\n\n    bars.push(this.model.actions.map(el));\n    bars.push(this.model.inspectors.filter(tool => tool.toggleable).map(el));\n\n    for (const bar of bars) {\n      if (bar.length !== 0) {\n        const el = div({\n          class: bk_button_bar\n        }, bar);\n        this.el.appendChild(el);\n      }\n    }\n  }\n\n  update_layout() {}\n\n  update_position() {}\n\n  after_layout() {\n    this._has_finished = true;\n  }\n\n}\nToolbarBaseView.__name__ = \"ToolbarBaseView\";\n\nfunction createGestureMap() {\n  return {\n    pan: {\n      tools: [],\n      active: null\n    },\n    scroll: {\n      tools: [],\n      active: null\n    },\n    pinch: {\n      tools: [],\n      active: null\n    },\n    tap: {\n      tools: [],\n      active: null\n    },\n    doubletap: {\n      tools: [],\n      active: null\n    },\n    press: {\n      tools: [],\n      active: null\n    },\n    pressup: {\n      tools: [],\n      active: null\n    },\n    rotate: {\n      tools: [],\n      active: null\n    },\n    move: {\n      tools: [],\n      active: null\n    },\n    multi: {\n      tools: [],\n      active: null\n    }\n  };\n}\n\nexport class ToolbarBase extends Model {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_ToolbarBase() {\n    this.prototype.default_view = ToolbarBaseView;\n    this.define({\n      tools: [p.Array, []],\n      logo: [p.Logo, 'normal'],\n      autohide: [p.Boolean, false]\n    });\n    this.internal({\n      gestures: [p.Any, createGestureMap],\n      actions: [p.Array, []],\n      inspectors: [p.Array, []],\n      help: [p.Array, []],\n      toolbar_location: [p.Location, 'right']\n    });\n  }\n\n  initialize() {\n    super.initialize();\n\n    this._init_tools();\n  }\n\n  _init_tools() {\n    // The only purpose of this function is to avoid unnecessary property churning.\n    const tools_changed = function (old_tools, new_tools) {\n      if (old_tools.length != new_tools.length) {\n        return true;\n      }\n\n      const new_ids = new Set(new_tools.map(t => t.id));\n      return some(old_tools, t => !new_ids.has(t.id));\n    };\n\n    const new_inspectors = this.tools.filter(t => t instanceof InspectTool);\n\n    if (tools_changed(this.inspectors, new_inspectors)) {\n      this.inspectors = new_inspectors;\n    }\n\n    const new_help = this.tools.filter(t => t instanceof HelpTool);\n\n    if (tools_changed(this.help, new_help)) {\n      this.help = new_help;\n    }\n\n    const new_actions = this.tools.filter(t => t instanceof ActionTool);\n\n    if (tools_changed(this.actions, new_actions)) {\n      this.actions = new_actions;\n    }\n\n    const check_event_type = (et, tool) => {\n      if (!(et in this.gestures)) {\n        logger.warn(`Toolbar: unknown event type '${et}' for tool: ${tool.type} (${tool.id})`);\n      }\n    };\n\n    const new_gestures = createGestureMap();\n\n    for (const tool of this.tools) {\n      if (tool instanceof GestureTool && tool.event_type) {\n        if (isString(tool.event_type)) {\n          new_gestures[tool.event_type].tools.push(tool);\n          check_event_type(tool.event_type, tool);\n        } else {\n          new_gestures.multi.tools.push(tool);\n\n          for (const et of tool.event_type) {\n            check_event_type(et, tool);\n          }\n        }\n      }\n    }\n\n    for (const et of Object.keys(new_gestures)) {\n      const gm = this.gestures[et];\n\n      if (tools_changed(gm.tools, new_gestures[et].tools)) {\n        gm.tools = new_gestures[et].tools;\n      }\n\n      if (gm.active && every(gm.tools, t => t.id != gm.active.id)) {\n        gm.active = null;\n      }\n    }\n  }\n\n  get horizontal() {\n    return this.toolbar_location === \"above\" || this.toolbar_location === \"below\";\n  }\n\n  get vertical() {\n    return this.toolbar_location === \"left\" || this.toolbar_location === \"right\";\n  }\n\n  _active_change(tool) {\n    const {\n      event_type\n    } = tool;\n    if (event_type == null) return;\n    const event_types = isString(event_type) ? [event_type] : event_type;\n\n    for (const et of event_types) {\n      if (tool.active) {\n        const currently_active_tool = this.gestures[et].active;\n\n        if (currently_active_tool != null && tool != currently_active_tool) {\n          logger.debug(`Toolbar: deactivating tool: ${currently_active_tool.type} (${currently_active_tool.id}) for event type '${et}'`);\n          currently_active_tool.active = false;\n        }\n\n        this.gestures[et].active = tool;\n        logger.debug(`Toolbar: activating tool: ${tool.type} (${tool.id}) for event type '${et}'`);\n      } else this.gestures[et].active = null;\n    }\n  }\n\n}\nToolbarBase.__name__ = \"ToolbarBase\";\nToolbarBase.init_ToolbarBase();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/toolbar_base.js"],"names":["logger","empty","div","a","build_views","remove_views","p","DOMView","some","every","Set","isString","Model","GestureTool","ActionTool","HelpTool","InspectTool","bk_toolbar","bk_toolbar_hidden","bk_button_bar","bk_logo","bk_logo_small","bk_grey","bk_side","ToolbarViewModel","constructor","attrs","init_ToolbarViewModel","define","_visible","Any","autohide","Boolean","visible","__name__","ToolbarBaseView","initialize","_tool_button_views","_toolbar_view_model","model","lazy_initialize","_build_tool_button_views","connect_signals","connect","properties","tools","change","render","_on_visible_change","remove","_proxied_tools","parent","tool","button_view","set_visibility","hidden_class","el","classList","contains","add","toolbar_location","logo","gray","href","target","class","appendChild","bars","id","gestures","et","push","map","actions","inspectors","filter","toggleable","bar","length","update_layout","update_position","after_layout","_has_finished","createGestureMap","pan","active","scroll","pinch","tap","doubletap","press","pressup","rotate","move","multi","ToolbarBase","init_ToolbarBase","prototype","default_view","Array","Logo","internal","help","Location","_init_tools","tools_changed","old_tools","new_tools","new_ids","t","has","new_inspectors","new_help","new_actions","check_event_type","warn","type","new_gestures","event_type","Object","keys","gm","horizontal","vertical","_active_change","event_types","currently_active_tool","debug"],"mappings":"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","sourcesContent":["import { logger } from \"../../core/logging\";\nimport { empty, div, a } from \"../../core/dom\";\nimport { build_views, remove_views } from \"../../core/build_views\";\nimport * as p from \"../../core/properties\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { some, every } from \"../../core/util/array\";\nimport { Set } from \"../../core/util/data_structures\";\nimport { isString } from \"../../core/util/types\";\nimport { Model } from \"../../model\";\nimport { GestureTool } from \"./gestures/gesture_tool\";\nimport { ActionTool } from \"./actions/action_tool\";\nimport { HelpTool } from \"./actions/help_tool\";\nimport { InspectTool } from \"./inspectors/inspect_tool\";\nimport { bk_toolbar, bk_toolbar_hidden, bk_button_bar } from \"../../styles/toolbar\";\nimport { bk_logo, bk_logo_small, bk_grey } from \"../../styles/logo\";\nimport { bk_side } from \"../../styles/mixins\";\nexport class ToolbarViewModel extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ToolbarViewModel() {\n        this.define({\n            _visible: [p.Any, null],\n            autohide: [p.Boolean, false],\n        });\n    }\n    get visible() {\n        return (!this.autohide) ? true : (this._visible == null) ? false : this._visible;\n    }\n}\nToolbarViewModel.__name__ = \"ToolbarViewModel\";\nToolbarViewModel.init_ToolbarViewModel();\nexport class ToolbarBaseView extends DOMView {\n    initialize() {\n        super.initialize();\n        this._tool_button_views = {};\n        this._toolbar_view_model = new ToolbarViewModel({ autohide: this.model.autohide });\n    }\n    async lazy_initialize() {\n        await this._build_tool_button_views();\n    }\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.tools.change, async () => {\n            await this._build_tool_button_views();\n            this.render();\n        });\n        this.connect(this.model.properties.autohide.change, () => {\n            this._toolbar_view_model.autohide = this.model.autohide;\n            this._on_visible_change();\n        });\n        this.connect(this._toolbar_view_model.properties._visible.change, () => this._on_visible_change());\n    }\n    remove() {\n        remove_views(this._tool_button_views);\n        super.remove();\n    }\n    async _build_tool_button_views() {\n        const tools = (this.model._proxied_tools != null ? this.model._proxied_tools : this.model.tools); // XXX\n        await build_views(this._tool_button_views, tools, { parent: this }, (tool) => tool.button_view);\n    }\n    set_visibility(visible) {\n        if (visible != this._toolbar_view_model._visible) {\n            this._toolbar_view_model._visible = visible;\n        }\n    }\n    _on_visible_change() {\n        const visible = this._toolbar_view_model.visible;\n        const hidden_class = bk_toolbar_hidden;\n        if (this.el.classList.contains(hidden_class) && visible) {\n            this.el.classList.remove(hidden_class);\n        }\n        else if (!visible) {\n            this.el.classList.add(hidden_class);\n        }\n    }\n    render() {\n        empty(this.el);\n        this.el.classList.add(bk_toolbar);\n        this.el.classList.add(bk_side(this.model.toolbar_location));\n        this._toolbar_view_model.autohide = this.model.autohide;\n        this._on_visible_change();\n        if (this.model.logo != null) {\n            const gray = this.model.logo === \"grey\" ? bk_grey : null;\n            const logo = a({ href: \"https://bokeh.org/\", target: \"_blank\", class: [bk_logo, bk_logo_small, gray] });\n            this.el.appendChild(logo);\n        }\n        const bars = [];\n        const el = (tool) => {\n            return this._tool_button_views[tool.id].el;\n        };\n        const { gestures } = this.model;\n        for (const et in gestures) {\n            bars.push(gestures[et].tools.map(el));\n        }\n        bars.push(this.model.actions.map(el));\n        bars.push(this.model.inspectors.filter((tool) => tool.toggleable).map(el));\n        for (const bar of bars) {\n            if (bar.length !== 0) {\n                const el = div({ class: bk_button_bar }, bar);\n                this.el.appendChild(el);\n            }\n        }\n    }\n    update_layout() { }\n    update_position() { }\n    after_layout() {\n        this._has_finished = true;\n    }\n}\nToolbarBaseView.__name__ = \"ToolbarBaseView\";\nfunction createGestureMap() {\n    return {\n        pan: { tools: [], active: null },\n        scroll: { tools: [], active: null },\n        pinch: { tools: [], active: null },\n        tap: { tools: [], active: null },\n        doubletap: { tools: [], active: null },\n        press: { tools: [], active: null },\n        pressup: { tools: [], active: null },\n        rotate: { tools: [], active: null },\n        move: { tools: [], active: null },\n        multi: { tools: [], active: null },\n    };\n}\nexport class ToolbarBase extends Model {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_ToolbarBase() {\n        this.prototype.default_view = ToolbarBaseView;\n        this.define({\n            tools: [p.Array, []],\n            logo: [p.Logo, 'normal'],\n            autohide: [p.Boolean, false],\n        });\n        this.internal({\n            gestures: [p.Any, createGestureMap],\n            actions: [p.Array, []],\n            inspectors: [p.Array, []],\n            help: [p.Array, []],\n            toolbar_location: [p.Location, 'right'],\n        });\n    }\n    initialize() {\n        super.initialize();\n        this._init_tools();\n    }\n    _init_tools() {\n        // The only purpose of this function is to avoid unnecessary property churning.\n        const tools_changed = function (old_tools, new_tools) {\n            if (old_tools.length != new_tools.length) {\n                return true;\n            }\n            const new_ids = new Set(new_tools.map(t => t.id));\n            return some(old_tools, t => !new_ids.has(t.id));\n        };\n        const new_inspectors = this.tools.filter(t => t instanceof InspectTool);\n        if (tools_changed(this.inspectors, new_inspectors)) {\n            this.inspectors = new_inspectors;\n        }\n        const new_help = this.tools.filter(t => t instanceof HelpTool);\n        if (tools_changed(this.help, new_help)) {\n            this.help = new_help;\n        }\n        const new_actions = this.tools.filter(t => t instanceof ActionTool);\n        if (tools_changed(this.actions, new_actions)) {\n            this.actions = new_actions;\n        }\n        const check_event_type = (et, tool) => {\n            if (!(et in this.gestures)) {\n                logger.warn(`Toolbar: unknown event type '${et}' for tool: ${tool.type} (${tool.id})`);\n            }\n        };\n        const new_gestures = createGestureMap();\n        for (const tool of this.tools) {\n            if (tool instanceof GestureTool && tool.event_type) {\n                if (isString(tool.event_type)) {\n                    new_gestures[tool.event_type].tools.push(tool);\n                    check_event_type(tool.event_type, tool);\n                }\n                else {\n                    new_gestures.multi.tools.push(tool);\n                    for (const et of tool.event_type) {\n                        check_event_type(et, tool);\n                    }\n                }\n            }\n        }\n        for (const et of Object.keys(new_gestures)) {\n            const gm = this.gestures[et];\n            if (tools_changed(gm.tools, new_gestures[et].tools)) {\n                gm.tools = new_gestures[et].tools;\n            }\n            if (gm.active && every(gm.tools, t => t.id != gm.active.id)) {\n                gm.active = null;\n            }\n        }\n    }\n    get horizontal() {\n        return this.toolbar_location === \"above\" || this.toolbar_location === \"below\";\n    }\n    get vertical() {\n        return this.toolbar_location === \"left\" || this.toolbar_location === \"right\";\n    }\n    _active_change(tool) {\n        const { event_type } = tool;\n        if (event_type == null)\n            return;\n        const event_types = isString(event_type) ? [event_type] : event_type;\n        for (const et of event_types) {\n            if (tool.active) {\n                const currently_active_tool = this.gestures[et].active;\n                if (currently_active_tool != null && tool != currently_active_tool) {\n                    logger.debug(`Toolbar: deactivating tool: ${currently_active_tool.type} (${currently_active_tool.id}) for event type '${et}'`);\n                    currently_active_tool.active = false;\n                }\n                this.gestures[et].active = tool;\n                logger.debug(`Toolbar: activating tool: ${tool.type} (${tool.id}) for event type '${et}'`);\n            }\n            else\n                this.gestures[et].active = null;\n        }\n    }\n}\nToolbarBase.__name__ = \"ToolbarBase\";\nToolbarBase.init_ToolbarBase();\n//# sourceMappingURL=toolbar_base.js.map"]},"metadata":{},"sourceType":"module"}