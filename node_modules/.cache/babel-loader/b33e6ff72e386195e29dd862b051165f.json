{"ast":null,"code":"import { AbstractButton, AbstractButtonView } from \"./abstract_button\";\nimport { ButtonClick, MenuItemClick } from \"../../core/bokeh_events\";\nimport { div, display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { isString } from \"../../core/util/types\";\nimport { bk_below, bk_down } from \"../../styles/mixins\";\nimport { bk_dropdown_toggle } from \"../../styles/buttons\";\nimport { bk_menu, bk_caret, bk_divider } from \"../../styles/menus\";\nexport class DropdownView extends AbstractButtonView {\n  constructor() {\n    super(...arguments);\n    this._open = false;\n  }\n\n  render() {\n    super.render();\n    const caret = div({\n      class: [bk_caret, bk_down]\n    });\n    if (!this.model.is_split) this.button_el.appendChild(caret);else {\n      const toggle = this._render_button(caret);\n\n      toggle.classList.add(bk_dropdown_toggle);\n      toggle.addEventListener(\"click\", () => this._toggle_menu());\n      this.group_el.appendChild(toggle);\n    }\n    const items = this.model.menu.map((item, i) => {\n      if (item == null) return div({\n        class: bk_divider\n      });else {\n        const label = isString(item) ? item : item[0];\n        const el = div({}, label);\n        el.addEventListener(\"click\", () => this._item_click(i));\n        return el;\n      }\n    });\n    this.menu = div({\n      class: [bk_menu, bk_below]\n    }, items);\n    this.el.appendChild(this.menu);\n    undisplay(this.menu);\n  }\n\n  _show_menu() {\n    if (!this._open) {\n      this._open = true;\n      display(this.menu);\n\n      const listener = event => {\n        const {\n          target\n        } = event;\n\n        if (target instanceof HTMLElement && !this.el.contains(target)) {\n          document.removeEventListener(\"click\", listener);\n\n          this._hide_menu();\n        }\n      };\n\n      document.addEventListener(\"click\", listener);\n    }\n  }\n\n  _hide_menu() {\n    if (this._open) {\n      this._open = false;\n      undisplay(this.menu);\n    }\n  }\n\n  _toggle_menu() {\n    if (this._open) this._hide_menu();else this._show_menu();\n  }\n\n  click() {\n    if (!this.model.is_split) this._toggle_menu();else {\n      this._hide_menu();\n\n      this.model.trigger_event(new ButtonClick());\n      super.click();\n    }\n  }\n\n  _item_click(i) {\n    this._hide_menu();\n\n    const item = this.model.menu[i];\n\n    if (item != null) {\n      const value_or_callback = isString(item) ? item : item[1];\n\n      if (isString(value_or_callback)) {\n        this.model.trigger_event(new MenuItemClick(value_or_callback));\n      } else {\n        value_or_callback.execute(this.model, {\n          index: i\n        }); // TODO\n      }\n    }\n  }\n\n}\nDropdownView.__name__ = \"DropdownView\";\nexport class Dropdown extends AbstractButton {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Dropdown() {\n    this.prototype.default_view = DropdownView;\n    this.define({\n      split: [p.Boolean, false],\n      menu: [p.Array, []]\n    });\n    this.override({\n      label: \"Dropdown\"\n    });\n  }\n\n  get is_split() {\n    return this.split;\n  }\n\n}\nDropdown.__name__ = \"Dropdown\";\nDropdown.init_Dropdown();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/dropdown.js"],"names":["AbstractButton","AbstractButtonView","ButtonClick","MenuItemClick","div","display","undisplay","p","isString","bk_below","bk_down","bk_dropdown_toggle","bk_menu","bk_caret","bk_divider","DropdownView","constructor","arguments","_open","render","caret","class","model","is_split","button_el","appendChild","toggle","_render_button","classList","add","addEventListener","_toggle_menu","group_el","items","menu","map","item","i","label","el","_item_click","_show_menu","listener","event","target","HTMLElement","contains","document","removeEventListener","_hide_menu","click","trigger_event","value_or_callback","execute","index","__name__","Dropdown","attrs","init_Dropdown","prototype","default_view","define","split","Boolean","Array","override"],"mappings":"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","sourcesContent":["import { AbstractButton, AbstractButtonView } from \"./abstract_button\";\nimport { ButtonClick, MenuItemClick } from \"../../core/bokeh_events\";\nimport { div, display, undisplay } from \"../../core/dom\";\nimport * as p from \"../../core/properties\";\nimport { isString } from \"../../core/util/types\";\nimport { bk_below, bk_down } from \"../../styles/mixins\";\nimport { bk_dropdown_toggle } from \"../../styles/buttons\";\nimport { bk_menu, bk_caret, bk_divider } from \"../../styles/menus\";\nexport class DropdownView extends AbstractButtonView {\n    constructor() {\n        super(...arguments);\n        this._open = false;\n    }\n    render() {\n        super.render();\n        const caret = div({ class: [bk_caret, bk_down] });\n        if (!this.model.is_split)\n            this.button_el.appendChild(caret);\n        else {\n            const toggle = this._render_button(caret);\n            toggle.classList.add(bk_dropdown_toggle);\n            toggle.addEventListener(\"click\", () => this._toggle_menu());\n            this.group_el.appendChild(toggle);\n        }\n        const items = this.model.menu.map((item, i) => {\n            if (item == null)\n                return div({ class: bk_divider });\n            else {\n                const label = isString(item) ? item : item[0];\n                const el = div({}, label);\n                el.addEventListener(\"click\", () => this._item_click(i));\n                return el;\n            }\n        });\n        this.menu = div({ class: [bk_menu, bk_below] }, items);\n        this.el.appendChild(this.menu);\n        undisplay(this.menu);\n    }\n    _show_menu() {\n        if (!this._open) {\n            this._open = true;\n            display(this.menu);\n            const listener = (event) => {\n                const { target } = event;\n                if (target instanceof HTMLElement && !this.el.contains(target)) {\n                    document.removeEventListener(\"click\", listener);\n                    this._hide_menu();\n                }\n            };\n            document.addEventListener(\"click\", listener);\n        }\n    }\n    _hide_menu() {\n        if (this._open) {\n            this._open = false;\n            undisplay(this.menu);\n        }\n    }\n    _toggle_menu() {\n        if (this._open)\n            this._hide_menu();\n        else\n            this._show_menu();\n    }\n    click() {\n        if (!this.model.is_split)\n            this._toggle_menu();\n        else {\n            this._hide_menu();\n            this.model.trigger_event(new ButtonClick());\n            super.click();\n        }\n    }\n    _item_click(i) {\n        this._hide_menu();\n        const item = this.model.menu[i];\n        if (item != null) {\n            const value_or_callback = isString(item) ? item : item[1];\n            if (isString(value_or_callback)) {\n                this.model.trigger_event(new MenuItemClick(value_or_callback));\n            }\n            else {\n                value_or_callback.execute(this.model, { index: i }); // TODO\n            }\n        }\n    }\n}\nDropdownView.__name__ = \"DropdownView\";\nexport class Dropdown extends AbstractButton {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Dropdown() {\n        this.prototype.default_view = DropdownView;\n        this.define({\n            split: [p.Boolean, false],\n            menu: [p.Array, []],\n        });\n        this.override({\n            label: \"Dropdown\",\n        });\n    }\n    get is_split() {\n        return this.split;\n    }\n}\nDropdown.__name__ = \"Dropdown\";\nDropdown.init_Dropdown();\n//# sourceMappingURL=dropdown.js.map"]},"metadata":{},"sourceType":"module"}