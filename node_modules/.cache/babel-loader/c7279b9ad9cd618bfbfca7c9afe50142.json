{"ast":null,"code":"import { svg_colors, is_svg_color } from \"./svg_colors\";\nimport { includes } from \"./array\";\nexport function is_color(value) {\n  return is_svg_color(value.toLowerCase()) || value.substring(0, 1) == \"#\" || valid_rgb(value);\n}\n\nfunction _component2hex(v) {\n  const h = Number(v).toString(16);\n  return h.length == 1 ? `0${h}` : h;\n}\n\nexport function rgb2hex(r, g, b) {\n  const R = _component2hex(r & 0xFF);\n\n  const G = _component2hex(g & 0xFF);\n\n  const B = _component2hex(b & 0xFF);\n\n  return `#${R}${G}${B}`;\n}\nexport function color2hex(color) {\n  color = color + '';\n  if (color.indexOf('#') == 0) return color;else if (is_svg_color(color)) return svg_colors[color];else if (color.indexOf('rgb') == 0) {\n    const rgb = color.replace(/^rgba?\\(|\\s+|\\)$/g, '').split(',');\n    let hex = rgb.slice(0, 3).map(_component2hex).join('');\n    if (rgb.length == 4) hex += _component2hex(Math.floor(parseFloat(rgb[3]) * 255));\n    return `#${hex.slice(0, 8)}`; // can also be rgba\n  } else return color;\n}\nexport function color2rgba(color, alpha = 1.0) {\n  if (!color) // NaN, null, '', etc.\n    return [0, 0, 0, 0]; // transparent\n  // Convert to hex and then to clean version of 6 or 8 chars\n\n  let hex = color2hex(color);\n  hex = hex.replace(/ |#/g, '');\n\n  if (hex.length <= 4) {\n    hex = hex.replace(/(.)/g, '$1$1');\n  } // Convert pairs to numbers\n\n\n  const rgba = hex.match(/../g).map(i => parseInt(i, 16) / 255); // Ensure correct length, add alpha if necessary\n\n  while (rgba.length < 3) rgba.push(0);\n\n  if (rgba.length < 4) rgba.push(alpha);\n  return rgba.slice(0, 4);\n}\nexport function valid_rgb(value) {\n  let params;\n\n  switch (value.substring(0, 4)) {\n    case \"rgba\":\n      {\n        params = {\n          start: \"rgba(\",\n          len: 4,\n          alpha: true\n        };\n        break;\n      }\n\n    case \"rgb(\":\n      {\n        params = {\n          start: \"rgb(\",\n          len: 3,\n          alpha: false\n        };\n        break;\n      }\n\n    default:\n      return false;\n  } // if '.' and then ',' found, we know decimals are used on rgb\n\n\n  if (new RegExp(\".*?(\\\\.).*(,)\").test(value)) throw new Error(`color expects integers for rgb in rgb/rgba tuple, received ${value}`); // extract the numerical values from inside parens\n\n  const contents = value.replace(params.start, \"\").replace(\")\", \"\").split(',').map(parseFloat); // check length of array based on rgb/rgba\n\n  if (contents.length != params.len) throw new Error(`color expects rgba ${params.len}-tuple, received ${value}`); // check for valid numerical values for rgba\n\n  if (params.alpha && !(0 <= contents[3] && contents[3] <= 1)) throw new Error(\"color expects rgba 4-tuple to have alpha value between 0 and 1\");\n  if (includes(contents.slice(0, 3).map(rgb => 0 <= rgb && rgb <= 255), false)) throw new Error(\"color expects rgb to have value between 0 and 255\");\n  return true;\n}","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/util/color.js"],"names":["svg_colors","is_svg_color","includes","is_color","value","toLowerCase","substring","valid_rgb","_component2hex","v","h","Number","toString","length","rgb2hex","r","g","b","R","G","B","color2hex","color","indexOf","rgb","replace","split","hex","slice","map","join","Math","floor","parseFloat","color2rgba","alpha","rgba","match","i","parseInt","push","params","start","len","RegExp","test","Error","contents"],"mappings":"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","sourcesContent":["import { svg_colors, is_svg_color } from \"./svg_colors\";\nimport { includes } from \"./array\";\nexport function is_color(value) {\n    return is_svg_color(value.toLowerCase()) || value.substring(0, 1) == \"#\" || valid_rgb(value);\n}\nfunction _component2hex(v) {\n    const h = Number(v).toString(16);\n    return h.length == 1 ? `0${h}` : h;\n}\nexport function rgb2hex(r, g, b) {\n    const R = _component2hex(r & 0xFF);\n    const G = _component2hex(g & 0xFF);\n    const B = _component2hex(b & 0xFF);\n    return `#${R}${G}${B}`;\n}\nexport function color2hex(color) {\n    color = color + '';\n    if (color.indexOf('#') == 0)\n        return color;\n    else if (is_svg_color(color))\n        return svg_colors[color];\n    else if (color.indexOf('rgb') == 0) {\n        const rgb = color.replace(/^rgba?\\(|\\s+|\\)$/g, '').split(',');\n        let hex = rgb.slice(0, 3).map(_component2hex).join('');\n        if (rgb.length == 4)\n            hex += _component2hex(Math.floor(parseFloat(rgb[3]) * 255));\n        return `#${hex.slice(0, 8)}`; // can also be rgba\n    }\n    else\n        return color;\n}\nexport function color2rgba(color, alpha = 1.0) {\n    if (!color) // NaN, null, '', etc.\n        return [0, 0, 0, 0]; // transparent\n    // Convert to hex and then to clean version of 6 or 8 chars\n    let hex = color2hex(color);\n    hex = hex.replace(/ |#/g, '');\n    if (hex.length <= 4) {\n        hex = hex.replace(/(.)/g, '$1$1');\n    }\n    // Convert pairs to numbers\n    const rgba = hex.match(/../g).map((i) => parseInt(i, 16) / 255);\n    // Ensure correct length, add alpha if necessary\n    while (rgba.length < 3)\n        rgba.push(0);\n    if (rgba.length < 4)\n        rgba.push(alpha);\n    return rgba.slice(0, 4);\n}\nexport function valid_rgb(value) {\n    let params;\n    switch (value.substring(0, 4)) {\n        case \"rgba\": {\n            params = { start: \"rgba(\", len: 4, alpha: true };\n            break;\n        }\n        case \"rgb(\": {\n            params = { start: \"rgb(\", len: 3, alpha: false };\n            break;\n        }\n        default:\n            return false;\n    }\n    // if '.' and then ',' found, we know decimals are used on rgb\n    if (new RegExp(\".*?(\\\\.).*(,)\").test(value))\n        throw new Error(`color expects integers for rgb in rgb/rgba tuple, received ${value}`);\n    // extract the numerical values from inside parens\n    const contents = value.replace(params.start, \"\").replace(\")\", \"\").split(',').map(parseFloat);\n    // check length of array based on rgb/rgba\n    if (contents.length != params.len)\n        throw new Error(`color expects rgba ${params.len}-tuple, received ${value}`);\n    // check for valid numerical values for rgba\n    if (params.alpha && !(0 <= contents[3] && contents[3] <= 1))\n        throw new Error(\"color expects rgba 4-tuple to have alpha value between 0 and 1\");\n    if (includes(contents.slice(0, 3).map((rgb) => 0 <= rgb && rgb <= 255), false))\n        throw new Error(\"color expects rgb to have value between 0 and 255\");\n    return true;\n}\n//# sourceMappingURL=color.js.map"]},"metadata":{},"sourceType":"module"}