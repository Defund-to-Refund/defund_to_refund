{"ast":null,"code":"import { HasProps } from \"../../core/has_props\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { logger } from \"../../core/logging\";\nimport * as p from \"../../core/properties\";\nimport { div, canvas, append } from \"../../core/dom\";\nimport { BBox } from \"../../core/util/bbox\";\nimport { fixup_ctx } from \"../../core/util/canvas\";\nimport { bk_canvas, bk_canvas_underlays, bk_canvas_overlays, bk_canvas_events } from \"../../styles/canvas\";\n\nconst global_webgl = (() => {\n  // We use a global invisible canvas and gl context. By having a global context,\n  // we avoid the limitation of max 16 contexts that most browsers have.\n  const canvas = document.createElement(\"canvas\");\n  const gl = canvas.getContext(\"webgl\", {\n    premultipliedAlpha: true\n  }); // If WebGL is available, we store a reference to the gl canvas on\n  // the ctx object, because that's what gets passed everywhere.\n\n  if (gl != null) return {\n    canvas,\n    gl\n  };else {\n    logger.trace(\"WebGL is not supported\");\n    return undefined;\n  }\n})();\n\nimport canvas2svg from \"@bokeh/canvas2svg\";\nexport class CanvasView extends DOMView {\n  get ctx() {\n    return this._ctx;\n  }\n\n  initialize() {\n    super.initialize();\n    const style = {\n      position: \"absolute\",\n      top: \"0\",\n      left: \"0\",\n      width: \"100%\",\n      height: \"100%\"\n    };\n\n    switch (this.model.output_backend) {\n      case \"webgl\":\n        this.webgl = global_webgl;\n\n      case \"canvas\":\n        {\n          this.canvas_el = canvas({\n            class: bk_canvas,\n            style\n          });\n          const ctx = this.canvas_el.getContext('2d');\n          if (ctx == null) throw new Error(\"unable to obtain 2D rendering context\");\n          this._ctx = ctx;\n          break;\n        }\n\n      case \"svg\":\n        {\n          const ctx = new canvas2svg();\n          this._ctx = ctx;\n          this.canvas_el = ctx.getSvg();\n          break;\n        }\n    }\n\n    this.underlays_el = div({\n      class: bk_canvas_underlays,\n      style\n    });\n    this.overlays_el = div({\n      class: bk_canvas_overlays,\n      style\n    });\n    this.events_el = div({\n      class: bk_canvas_events,\n      style\n    });\n    append(this.el, this.underlays_el, this.canvas_el, this.overlays_el, this.events_el);\n    fixup_ctx(this._ctx);\n    logger.debug(\"CanvasView initialized\");\n  }\n\n  add_underlay(el) {\n    this.underlays_el.appendChild(el);\n  }\n\n  add_overlay(el) {\n    this.overlays_el.appendChild(el);\n  }\n\n  add_event(el) {\n    this.events_el.appendChild(el);\n  }\n\n  prepare_canvas(width, height) {\n    this.bbox = new BBox({\n      left: 0,\n      top: 0,\n      width,\n      height\n    });\n    this.el.style.width = `${width}px`;\n    this.el.style.height = `${height}px`;\n    const {\n      use_hidpi,\n      output_backend\n    } = this.model;\n    const pixel_ratio = use_hidpi && output_backend != \"svg\" ? devicePixelRatio : 1;\n    this.model.pixel_ratio = pixel_ratio;\n    this.canvas_el.style.width = `${width}px`;\n    this.canvas_el.style.height = `${height}px`; // XXX: io.export and canvas2svg don't like this\n    // this.canvas_el.width = width*pixel_ratio\n    // this.canvas_el.height = height*pixel_ratio\n\n    this.canvas_el.setAttribute(\"width\", `${width * pixel_ratio}`);\n    this.canvas_el.setAttribute(\"height\", `${height * pixel_ratio}`);\n    logger.debug(`Rendering CanvasView with width: ${width}, height: ${height}, pixel ratio: ${pixel_ratio}`);\n  }\n\n  save(name) {\n    if (this.canvas_el instanceof HTMLCanvasElement) {\n      const canvas = this.canvas_el;\n\n      if (canvas.msToBlob != null) {\n        const blob = canvas.msToBlob();\n        window.navigator.msSaveBlob(blob, name);\n      } else {\n        const link = document.createElement(\"a\");\n        link.href = canvas.toDataURL(\"image/png\");\n        link.download = name + \".png\";\n        link.target = \"_blank\";\n        link.dispatchEvent(new MouseEvent(\"click\"));\n      }\n    } else {\n      const ctx = this._ctx;\n      const svg = ctx.getSerializedSvg(true);\n      const svgblob = new Blob([svg], {\n        type: \"text/plain\"\n      });\n      const downloadLink = document.createElement(\"a\");\n      downloadLink.download = name + \".svg\";\n      downloadLink.innerHTML = \"Download svg\";\n      downloadLink.href = window.URL.createObjectURL(svgblob);\n\n      downloadLink.onclick = event => document.body.removeChild(event.target);\n\n      downloadLink.style.display = \"none\";\n      document.body.appendChild(downloadLink);\n      downloadLink.click();\n    }\n  }\n\n}\nCanvasView.__name__ = \"CanvasView\";\nexport class Canvas extends HasProps {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_Canvas() {\n    this.prototype.default_view = CanvasView;\n    this.internal({\n      use_hidpi: [p.Boolean, true],\n      pixel_ratio: [p.Number, 1],\n      output_backend: [p.OutputBackend, \"canvas\"]\n    });\n  }\n\n}\nCanvas.__name__ = \"Canvas\";\nCanvas.init_Canvas();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/canvas/canvas.js"],"names":["HasProps","DOMView","logger","p","div","canvas","append","BBox","fixup_ctx","bk_canvas","bk_canvas_underlays","bk_canvas_overlays","bk_canvas_events","global_webgl","document","createElement","gl","getContext","premultipliedAlpha","trace","undefined","canvas2svg","CanvasView","ctx","_ctx","initialize","style","position","top","left","width","height","model","output_backend","webgl","canvas_el","class","Error","getSvg","underlays_el","overlays_el","events_el","el","debug","add_underlay","appendChild","add_overlay","add_event","prepare_canvas","bbox","use_hidpi","pixel_ratio","devicePixelRatio","setAttribute","save","name","HTMLCanvasElement","msToBlob","blob","window","navigator","msSaveBlob","link","href","toDataURL","download","target","dispatchEvent","MouseEvent","svg","getSerializedSvg","svgblob","Blob","type","downloadLink","innerHTML","URL","createObjectURL","onclick","event","body","removeChild","display","click","__name__","Canvas","constructor","attrs","init_Canvas","prototype","default_view","internal","Boolean","Number","OutputBackend"],"mappings":"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","sourcesContent":["import { HasProps } from \"../../core/has_props\";\nimport { DOMView } from \"../../core/dom_view\";\nimport { logger } from \"../../core/logging\";\nimport * as p from \"../../core/properties\";\nimport { div, canvas, append } from \"../../core/dom\";\nimport { BBox } from \"../../core/util/bbox\";\nimport { fixup_ctx } from \"../../core/util/canvas\";\nimport { bk_canvas, bk_canvas_underlays, bk_canvas_overlays, bk_canvas_events } from \"../../styles/canvas\";\nconst global_webgl = (() => {\n    // We use a global invisible canvas and gl context. By having a global context,\n    // we avoid the limitation of max 16 contexts that most browsers have.\n    const canvas = document.createElement(\"canvas\");\n    const gl = canvas.getContext(\"webgl\", { premultipliedAlpha: true });\n    // If WebGL is available, we store a reference to the gl canvas on\n    // the ctx object, because that's what gets passed everywhere.\n    if (gl != null)\n        return { canvas, gl };\n    else {\n        logger.trace(\"WebGL is not supported\");\n        return undefined;\n    }\n})();\nimport canvas2svg from \"@bokeh/canvas2svg\";\nexport class CanvasView extends DOMView {\n    get ctx() {\n        return this._ctx;\n    }\n    initialize() {\n        super.initialize();\n        const style = {\n            position: \"absolute\",\n            top: \"0\",\n            left: \"0\",\n            width: \"100%\",\n            height: \"100%\",\n        };\n        switch (this.model.output_backend) {\n            case \"webgl\":\n                this.webgl = global_webgl;\n            case \"canvas\": {\n                this.canvas_el = canvas({ class: bk_canvas, style });\n                const ctx = this.canvas_el.getContext('2d');\n                if (ctx == null)\n                    throw new Error(\"unable to obtain 2D rendering context\");\n                this._ctx = ctx;\n                break;\n            }\n            case \"svg\": {\n                const ctx = new canvas2svg();\n                this._ctx = ctx;\n                this.canvas_el = ctx.getSvg();\n                break;\n            }\n        }\n        this.underlays_el = div({ class: bk_canvas_underlays, style });\n        this.overlays_el = div({ class: bk_canvas_overlays, style });\n        this.events_el = div({ class: bk_canvas_events, style });\n        append(this.el, this.underlays_el, this.canvas_el, this.overlays_el, this.events_el);\n        fixup_ctx(this._ctx);\n        logger.debug(\"CanvasView initialized\");\n    }\n    add_underlay(el) {\n        this.underlays_el.appendChild(el);\n    }\n    add_overlay(el) {\n        this.overlays_el.appendChild(el);\n    }\n    add_event(el) {\n        this.events_el.appendChild(el);\n    }\n    prepare_canvas(width, height) {\n        this.bbox = new BBox({ left: 0, top: 0, width, height });\n        this.el.style.width = `${width}px`;\n        this.el.style.height = `${height}px`;\n        const { use_hidpi, output_backend } = this.model;\n        const pixel_ratio = use_hidpi && output_backend != \"svg\" ? devicePixelRatio : 1;\n        this.model.pixel_ratio = pixel_ratio;\n        this.canvas_el.style.width = `${width}px`;\n        this.canvas_el.style.height = `${height}px`;\n        // XXX: io.export and canvas2svg don't like this\n        // this.canvas_el.width = width*pixel_ratio\n        // this.canvas_el.height = height*pixel_ratio\n        this.canvas_el.setAttribute(\"width\", `${width * pixel_ratio}`);\n        this.canvas_el.setAttribute(\"height\", `${height * pixel_ratio}`);\n        logger.debug(`Rendering CanvasView with width: ${width}, height: ${height}, pixel ratio: ${pixel_ratio}`);\n    }\n    save(name) {\n        if (this.canvas_el instanceof HTMLCanvasElement) {\n            const canvas = this.canvas_el;\n            if (canvas.msToBlob != null) {\n                const blob = canvas.msToBlob();\n                window.navigator.msSaveBlob(blob, name);\n            }\n            else {\n                const link = document.createElement(\"a\");\n                link.href = canvas.toDataURL(\"image/png\");\n                link.download = name + \".png\";\n                link.target = \"_blank\";\n                link.dispatchEvent(new MouseEvent(\"click\"));\n            }\n        }\n        else {\n            const ctx = this._ctx;\n            const svg = ctx.getSerializedSvg(true);\n            const svgblob = new Blob([svg], { type: \"text/plain\" });\n            const downloadLink = document.createElement(\"a\");\n            downloadLink.download = name + \".svg\";\n            downloadLink.innerHTML = \"Download svg\";\n            downloadLink.href = window.URL.createObjectURL(svgblob);\n            downloadLink.onclick = (event) => document.body.removeChild(event.target);\n            downloadLink.style.display = \"none\";\n            document.body.appendChild(downloadLink);\n            downloadLink.click();\n        }\n    }\n}\nCanvasView.__name__ = \"CanvasView\";\nexport class Canvas extends HasProps {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_Canvas() {\n        this.prototype.default_view = CanvasView;\n        this.internal({\n            use_hidpi: [p.Boolean, true],\n            pixel_ratio: [p.Number, 1],\n            output_backend: [p.OutputBackend, \"canvas\"],\n        });\n    }\n}\nCanvas.__name__ = \"Canvas\";\nCanvas.init_Canvas();\n//# sourceMappingURL=canvas.js.map"]},"metadata":{},"sourceType":"module"}