{"ast":null,"code":"import { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { isArray } from \"../../../core/util/types\";\nimport { PolyTool, PolyToolView } from \"./poly_tool\";\nimport { bk_tool_icon_poly_draw } from \"../../../styles/icons\";\nexport class PolyDrawToolView extends PolyToolView {\n  constructor() {\n    super(...arguments);\n    this._drawing = false;\n    this._initialized = false;\n  }\n\n  _tap(ev) {\n    if (this._drawing) this._draw(ev, 'add', true);else this._select_event(ev, ev.shiftKey, this.model.renderers);\n  }\n\n  _draw(ev, mode, emit = false) {\n    const renderer = this.model.renderers[0];\n\n    const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n    if (!this._initialized) this.activate(); // Ensure that activate has been called\n\n    if (point == null) return;\n\n    const [x, y] = this._snap_to_vertex(ev, ...point);\n\n    const cds = renderer.data_source;\n    const glyph = renderer.glyph;\n    const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n\n    if (mode == 'new') {\n      this._pop_glyphs(cds, this.model.num_objects);\n\n      if (xkey) cds.get_array(xkey).push([x, x]);\n      if (ykey) cds.get_array(ykey).push([y, y]);\n\n      this._pad_empty_columns(cds, [xkey, ykey]);\n    } else if (mode == 'edit') {\n      if (xkey) {\n        const xs = cds.data[xkey][cds.data[xkey].length - 1];\n        xs[xs.length - 1] = x;\n      }\n\n      if (ykey) {\n        const ys = cds.data[ykey][cds.data[ykey].length - 1];\n        ys[ys.length - 1] = y;\n      }\n    } else if (mode == 'add') {\n      if (xkey) {\n        const xidx = cds.data[xkey].length - 1;\n        let xs = cds.get_array(xkey)[xidx];\n        const nx = xs[xs.length - 1];\n        xs[xs.length - 1] = x;\n\n        if (!isArray(xs)) {\n          xs = Array.from(xs);\n          cds.data[xkey][xidx] = xs;\n        }\n\n        xs.push(nx);\n      }\n\n      if (ykey) {\n        const yidx = cds.data[ykey].length - 1;\n        let ys = cds.get_array(ykey)[yidx];\n        const ny = ys[ys.length - 1];\n        ys[ys.length - 1] = y;\n\n        if (!isArray(ys)) {\n          ys = Array.from(ys);\n          cds.data[ykey][yidx] = ys;\n        }\n\n        ys.push(ny);\n      }\n    }\n\n    this._emit_cds_changes(cds, true, false, emit);\n  }\n\n  _show_vertices() {\n    if (!this.model.active) {\n      return;\n    }\n\n    const xs = [];\n    const ys = [];\n\n    for (let i = 0; i < this.model.renderers.length; i++) {\n      const renderer = this.model.renderers[i];\n      const cds = renderer.data_source;\n      const glyph = renderer.glyph;\n      const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n\n      if (xkey) {\n        for (const array of cds.get_array(xkey)) Array.prototype.push.apply(xs, array);\n      }\n\n      if (ykey) {\n        for (const array of cds.get_array(ykey)) Array.prototype.push.apply(ys, array);\n      }\n\n      if (this._drawing && i == this.model.renderers.length - 1) {\n        // Skip currently drawn vertex\n        xs.splice(xs.length - 1, 1);\n        ys.splice(ys.length - 1, 1);\n      }\n    }\n\n    this._set_vertices(xs, ys);\n  }\n\n  _doubletap(ev) {\n    if (!this.model.active) return;\n\n    if (this._drawing) {\n      this._drawing = false;\n\n      this._draw(ev, 'edit', true);\n    } else {\n      this._drawing = true;\n\n      this._draw(ev, 'new', true);\n    }\n  }\n\n  _move(ev) {\n    if (this._drawing) {\n      this._draw(ev, 'edit');\n    }\n  }\n\n  _remove() {\n    const renderer = this.model.renderers[0];\n    const cds = renderer.data_source;\n    const glyph = renderer.glyph;\n    const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n\n    if (xkey) {\n      const xidx = cds.data[xkey].length - 1;\n      const xs = cds.get_array(xkey)[xidx];\n      xs.splice(xs.length - 1, 1);\n    }\n\n    if (ykey) {\n      const yidx = cds.data[ykey].length - 1;\n      const ys = cds.get_array(ykey)[yidx];\n      ys.splice(ys.length - 1, 1);\n    }\n\n    this._emit_cds_changes(cds);\n  }\n\n  _keyup(ev) {\n    if (!this.model.active || !this._mouse_in_frame) return;\n\n    for (const renderer of this.model.renderers) {\n      if (ev.keyCode === Keys.Backspace) {\n        this._delete_selected(renderer);\n      } else if (ev.keyCode == Keys.Esc) {\n        if (this._drawing) {\n          this._remove();\n\n          this._drawing = false;\n        }\n\n        renderer.data_source.selection_manager.clear();\n      }\n    }\n  }\n\n  _pan_start(ev) {\n    if (!this.model.drag) return;\n\n    this._select_event(ev, true, this.model.renderers);\n\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pan(ev) {\n    if (this._basepoint == null || !this.model.drag) return;\n    const [bx, by] = this._basepoint; // Process polygon/line dragging\n\n    for (const renderer of this.model.renderers) {\n      const basepoint = this._map_drag(bx, by, renderer);\n\n      const point = this._map_drag(ev.sx, ev.sy, renderer);\n\n      if (point == null || basepoint == null) continue;\n      const cds = renderer.data_source; // Type once dataspecs are typed\n\n      const glyph = renderer.glyph;\n      const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n      if (!xkey && !ykey) continue;\n      const [x, y] = point;\n      const [px, py] = basepoint;\n      const [dx, dy] = [x - px, y - py];\n\n      for (const index of cds.selected.indices) {\n        let length, xs, ys;\n        if (xkey) xs = cds.data[xkey][index];\n\n        if (ykey) {\n          ys = cds.data[ykey][index];\n          length = ys.length;\n        } else {\n          length = xs.length;\n        }\n\n        for (let i = 0; i < length; i++) {\n          if (xs) xs[i] += dx;\n          if (ys) ys[i] += dy;\n        }\n      }\n\n      cds.change.emit();\n    }\n\n    this._basepoint = [ev.sx, ev.sy];\n  }\n\n  _pan_end(ev) {\n    if (!this.model.drag) return;\n\n    this._pan(ev);\n\n    for (const renderer of this.model.renderers) this._emit_cds_changes(renderer.data_source);\n\n    this._basepoint = null;\n  }\n\n  activate() {\n    if (!this.model.vertex_renderer || !this.model.active) return;\n\n    this._show_vertices();\n\n    if (!this._initialized) {\n      for (const renderer of this.model.renderers) {\n        const cds = renderer.data_source;\n        cds.connect(cds.properties.data.change, () => this._show_vertices());\n      }\n    }\n\n    this._initialized = true;\n  }\n\n  deactivate() {\n    if (this._drawing) {\n      this._remove();\n\n      this._drawing = false;\n    }\n\n    if (this.model.vertex_renderer) this._hide_vertices();\n  }\n\n}\nPolyDrawToolView.__name__ = \"PolyDrawToolView\";\nexport class PolyDrawTool extends PolyTool {\n  constructor(attrs) {\n    super(attrs);\n    this.tool_name = \"Polygon Draw Tool\";\n    this.icon = bk_tool_icon_poly_draw;\n    this.event_type = [\"pan\", \"tap\", \"move\"];\n    this.default_order = 3;\n  }\n\n  static init_PolyDrawTool() {\n    this.prototype.default_view = PolyDrawToolView;\n    this.define({\n      drag: [p.Boolean, true],\n      num_objects: [p.Int, 0]\n    });\n  }\n\n}\nPolyDrawTool.__name__ = \"PolyDrawTool\";\nPolyDrawTool.init_PolyDrawTool();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/tools/edit/poly_draw_tool.js"],"names":["Keys","p","isArray","PolyTool","PolyToolView","bk_tool_icon_poly_draw","PolyDrawToolView","constructor","arguments","_drawing","_initialized","_tap","ev","_draw","_select_event","shiftKey","model","renderers","mode","emit","renderer","point","_map_drag","sx","sy","activate","x","y","_snap_to_vertex","cds","data_source","glyph","xkey","ykey","xs","field","ys","_pop_glyphs","num_objects","get_array","push","_pad_empty_columns","data","length","xidx","nx","Array","from","yidx","ny","_emit_cds_changes","_show_vertices","active","i","array","prototype","apply","splice","_set_vertices","_doubletap","_move","_remove","_keyup","_mouse_in_frame","keyCode","Backspace","_delete_selected","Esc","selection_manager","clear","_pan_start","drag","_basepoint","_pan","bx","by","basepoint","px","py","dx","dy","index","selected","indices","change","_pan_end","vertex_renderer","connect","properties","deactivate","_hide_vertices","__name__","PolyDrawTool","attrs","tool_name","icon","event_type","default_order","init_PolyDrawTool","default_view","define","Boolean","Int"],"mappings":"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","sourcesContent":["import { Keys } from \"../../../core/dom\";\nimport * as p from \"../../../core/properties\";\nimport { isArray } from \"../../../core/util/types\";\nimport { PolyTool, PolyToolView } from \"./poly_tool\";\nimport { bk_tool_icon_poly_draw } from \"../../../styles/icons\";\nexport class PolyDrawToolView extends PolyToolView {\n    constructor() {\n        super(...arguments);\n        this._drawing = false;\n        this._initialized = false;\n    }\n    _tap(ev) {\n        if (this._drawing)\n            this._draw(ev, 'add', true);\n        else\n            this._select_event(ev, ev.shiftKey, this.model.renderers);\n    }\n    _draw(ev, mode, emit = false) {\n        const renderer = this.model.renderers[0];\n        const point = this._map_drag(ev.sx, ev.sy, renderer);\n        if (!this._initialized)\n            this.activate(); // Ensure that activate has been called\n        if (point == null)\n            return;\n        const [x, y] = this._snap_to_vertex(ev, ...point);\n        const cds = renderer.data_source;\n        const glyph = renderer.glyph;\n        const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n        if (mode == 'new') {\n            this._pop_glyphs(cds, this.model.num_objects);\n            if (xkey)\n                cds.get_array(xkey).push([x, x]);\n            if (ykey)\n                cds.get_array(ykey).push([y, y]);\n            this._pad_empty_columns(cds, [xkey, ykey]);\n        }\n        else if (mode == 'edit') {\n            if (xkey) {\n                const xs = cds.data[xkey][cds.data[xkey].length - 1];\n                xs[xs.length - 1] = x;\n            }\n            if (ykey) {\n                const ys = cds.data[ykey][cds.data[ykey].length - 1];\n                ys[ys.length - 1] = y;\n            }\n        }\n        else if (mode == 'add') {\n            if (xkey) {\n                const xidx = cds.data[xkey].length - 1;\n                let xs = cds.get_array(xkey)[xidx];\n                const nx = xs[xs.length - 1];\n                xs[xs.length - 1] = x;\n                if (!isArray(xs)) {\n                    xs = Array.from(xs);\n                    cds.data[xkey][xidx] = xs;\n                }\n                xs.push(nx);\n            }\n            if (ykey) {\n                const yidx = cds.data[ykey].length - 1;\n                let ys = cds.get_array(ykey)[yidx];\n                const ny = ys[ys.length - 1];\n                ys[ys.length - 1] = y;\n                if (!isArray(ys)) {\n                    ys = Array.from(ys);\n                    cds.data[ykey][yidx] = ys;\n                }\n                ys.push(ny);\n            }\n        }\n        this._emit_cds_changes(cds, true, false, emit);\n    }\n    _show_vertices() {\n        if (!this.model.active) {\n            return;\n        }\n        const xs = [];\n        const ys = [];\n        for (let i = 0; i < this.model.renderers.length; i++) {\n            const renderer = this.model.renderers[i];\n            const cds = renderer.data_source;\n            const glyph = renderer.glyph;\n            const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n            if (xkey) {\n                for (const array of cds.get_array(xkey))\n                    Array.prototype.push.apply(xs, array);\n            }\n            if (ykey) {\n                for (const array of cds.get_array(ykey))\n                    Array.prototype.push.apply(ys, array);\n            }\n            if (this._drawing && (i == (this.model.renderers.length - 1))) {\n                // Skip currently drawn vertex\n                xs.splice(xs.length - 1, 1);\n                ys.splice(ys.length - 1, 1);\n            }\n        }\n        this._set_vertices(xs, ys);\n    }\n    _doubletap(ev) {\n        if (!this.model.active)\n            return;\n        if (this._drawing) {\n            this._drawing = false;\n            this._draw(ev, 'edit', true);\n        }\n        else {\n            this._drawing = true;\n            this._draw(ev, 'new', true);\n        }\n    }\n    _move(ev) {\n        if (this._drawing) {\n            this._draw(ev, 'edit');\n        }\n    }\n    _remove() {\n        const renderer = this.model.renderers[0];\n        const cds = renderer.data_source;\n        const glyph = renderer.glyph;\n        const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n        if (xkey) {\n            const xidx = cds.data[xkey].length - 1;\n            const xs = cds.get_array(xkey)[xidx];\n            xs.splice(xs.length - 1, 1);\n        }\n        if (ykey) {\n            const yidx = cds.data[ykey].length - 1;\n            const ys = cds.get_array(ykey)[yidx];\n            ys.splice(ys.length - 1, 1);\n        }\n        this._emit_cds_changes(cds);\n    }\n    _keyup(ev) {\n        if (!this.model.active || !this._mouse_in_frame)\n            return;\n        for (const renderer of this.model.renderers) {\n            if (ev.keyCode === Keys.Backspace) {\n                this._delete_selected(renderer);\n            }\n            else if (ev.keyCode == Keys.Esc) {\n                if (this._drawing) {\n                    this._remove();\n                    this._drawing = false;\n                }\n                renderer.data_source.selection_manager.clear();\n            }\n        }\n    }\n    _pan_start(ev) {\n        if (!this.model.drag)\n            return;\n        this._select_event(ev, true, this.model.renderers);\n        this._basepoint = [ev.sx, ev.sy];\n    }\n    _pan(ev) {\n        if (this._basepoint == null || !this.model.drag)\n            return;\n        const [bx, by] = this._basepoint;\n        // Process polygon/line dragging\n        for (const renderer of this.model.renderers) {\n            const basepoint = this._map_drag(bx, by, renderer);\n            const point = this._map_drag(ev.sx, ev.sy, renderer);\n            if (point == null || basepoint == null)\n                continue;\n            const cds = renderer.data_source;\n            // Type once dataspecs are typed\n            const glyph = renderer.glyph;\n            const [xkey, ykey] = [glyph.xs.field, glyph.ys.field];\n            if (!xkey && !ykey)\n                continue;\n            const [x, y] = point;\n            const [px, py] = basepoint;\n            const [dx, dy] = [x - px, y - py];\n            for (const index of cds.selected.indices) {\n                let length, xs, ys;\n                if (xkey)\n                    xs = cds.data[xkey][index];\n                if (ykey) {\n                    ys = cds.data[ykey][index];\n                    length = ys.length;\n                }\n                else {\n                    length = xs.length;\n                }\n                for (let i = 0; i < length; i++) {\n                    if (xs)\n                        xs[i] += dx;\n                    if (ys)\n                        ys[i] += dy;\n                }\n            }\n            cds.change.emit();\n        }\n        this._basepoint = [ev.sx, ev.sy];\n    }\n    _pan_end(ev) {\n        if (!this.model.drag)\n            return;\n        this._pan(ev);\n        for (const renderer of this.model.renderers)\n            this._emit_cds_changes(renderer.data_source);\n        this._basepoint = null;\n    }\n    activate() {\n        if (!this.model.vertex_renderer || !this.model.active)\n            return;\n        this._show_vertices();\n        if (!this._initialized) {\n            for (const renderer of this.model.renderers) {\n                const cds = renderer.data_source;\n                cds.connect(cds.properties.data.change, () => this._show_vertices());\n            }\n        }\n        this._initialized = true;\n    }\n    deactivate() {\n        if (this._drawing) {\n            this._remove();\n            this._drawing = false;\n        }\n        if (this.model.vertex_renderer)\n            this._hide_vertices();\n    }\n}\nPolyDrawToolView.__name__ = \"PolyDrawToolView\";\nexport class PolyDrawTool extends PolyTool {\n    constructor(attrs) {\n        super(attrs);\n        this.tool_name = \"Polygon Draw Tool\";\n        this.icon = bk_tool_icon_poly_draw;\n        this.event_type = [\"pan\", \"tap\", \"move\"];\n        this.default_order = 3;\n    }\n    static init_PolyDrawTool() {\n        this.prototype.default_view = PolyDrawToolView;\n        this.define({\n            drag: [p.Boolean, true],\n            num_objects: [p.Int, 0],\n        });\n    }\n}\nPolyDrawTool.__name__ = \"PolyDrawTool\";\nPolyDrawTool.init_PolyDrawTool();\n//# sourceMappingURL=poly_draw_tool.js.map"]},"metadata":{},"sourceType":"module"}