{"ast":null,"code":"import Choices from \"choices.js\";\nimport { select, option } from \"../../core/dom\";\nimport { isString } from \"../../core/util/types\";\nimport * as p from \"../../core/properties\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nimport \"../../styles/widgets/choices\";\nimport { InputWidget, InputWidgetView } from \"./input_widget\";\nexport class MultiChoiceView extends InputWidgetView {\n  connect_signals() {\n    super.connect_signals();\n    this.connect(this.model.properties.value.change, () => this.render_selection());\n    this.connect(this.model.properties.disabled.change, () => this.set_disabled());\n    this.connect(this.model.properties.max_items.change, () => this.render());\n    this.connect(this.model.properties.option_limit.change, () => this.render());\n    this.connect(this.model.properties.delete_button.change, () => this.render());\n    this.connect(this.model.properties.placeholder.change, () => this.render());\n    this.connect(this.model.properties.options.change, () => this.render());\n    this.connect(this.model.properties.name.change, () => this.render());\n    this.connect(this.model.properties.title.change, () => this.render());\n  }\n\n  render() {\n    super.render();\n    const options = this.model.options.map(opt => {\n      let value, _label;\n\n      if (isString(opt)) value = _label = opt;else [value, _label] = opt;\n      return option({\n        value\n      }, _label);\n    });\n    this.select_el = select({\n      multiple: true,\n      class: bk_input,\n      name: this.model.name,\n      disabled: this.model.disabled\n    }, options);\n    this.group_el.appendChild(this.select_el);\n    this.render_selection();\n    let item = \"choices__item\";\n    let button = \"choices__button\";\n\n    if (this.model.solid) {\n      item = item + \" solid\";\n      button = button + \" solid\";\n    } else {\n      item = item + \" light\";\n      button = button + \" light\";\n    }\n\n    const opts = {\n      removeItemButton: this.model.delete_button,\n      classNames: {\n        item,\n        button\n      }\n    };\n    if (this.model.placeholder !== null) opts.placeholderValue = this.model.placeholder;\n    if (this.model.max_items !== null) opts.maxItemCount = this.model.max_items;\n    if (this.model.option_limit !== null) opts.renderChoiceLimit = this.model.option_limit;\n    this.choice_el = new Choices(this.select_el, opts);\n    this.select_el.addEventListener(\"change\", () => this.change_input());\n  }\n\n  render_selection() {\n    const selected = new Set(this.model.value);\n\n    for (const el of Array.from(this.el.querySelectorAll('option'))) el.selected = selected.has(el.value);\n  }\n\n  set_disabled() {\n    if (this.model.disabled) this.choice_el.disable();else this.choice_el.enable();\n  }\n\n  change_input() {\n    const is_focused = this.el.querySelector('select:focus') != null;\n    const values = [];\n\n    for (const el of Array.from(this.el.querySelectorAll('option'))) {\n      if (el.selected) values.push(el.value);\n    }\n\n    this.model.value = values;\n    super.change_input(); // Restore focus back to the <select> afterwards,\n    // so that even if python on_change callback is invoked,\n    // focus remains on <select> and one can seamlessly scroll\n    // up/down.\n\n    if (is_focused) this.select_el.focus();\n  }\n\n}\nMultiChoiceView.__name__ = \"MultiChoiceView\";\nexport class MultiChoice extends InputWidget {\n  constructor(attrs) {\n    super(attrs);\n  }\n\n  static init_MultiChoice() {\n    this.prototype.default_view = MultiChoiceView;\n    this.define({\n      value: [p.Array, []],\n      options: [p.Array, []],\n      max_items: [p.Number, null],\n      delete_button: [p.Boolean, true],\n      placeholder: [p.String, null],\n      option_limit: [p.Number, null],\n      solid: [p.Boolean, true]\n    });\n  }\n\n}\nMultiChoice.__name__ = \"MultiChoice\";\nMultiChoice.init_MultiChoice();","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/models/widgets/multichoice.js"],"names":["Choices","select","option","isString","p","bk_input","InputWidget","InputWidgetView","MultiChoiceView","connect_signals","connect","model","properties","value","change","render_selection","disabled","set_disabled","max_items","render","option_limit","delete_button","placeholder","options","name","title","map","opt","_label","select_el","multiple","class","group_el","appendChild","item","button","solid","opts","removeItemButton","classNames","placeholderValue","maxItemCount","renderChoiceLimit","choice_el","addEventListener","change_input","selected","Set","el","Array","from","querySelectorAll","has","disable","enable","is_focused","querySelector","values","push","focus","__name__","MultiChoice","constructor","attrs","init_MultiChoice","prototype","default_view","define","Number","Boolean","String"],"mappings":"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","sourcesContent":["import Choices from \"choices.js\";\nimport { select, option } from \"../../core/dom\";\nimport { isString } from \"../../core/util/types\";\nimport * as p from \"../../core/properties\";\nimport { bk_input } from \"../../styles/widgets/inputs\";\nimport \"../../styles/widgets/choices\";\nimport { InputWidget, InputWidgetView } from \"./input_widget\";\nexport class MultiChoiceView extends InputWidgetView {\n    connect_signals() {\n        super.connect_signals();\n        this.connect(this.model.properties.value.change, () => this.render_selection());\n        this.connect(this.model.properties.disabled.change, () => this.set_disabled());\n        this.connect(this.model.properties.max_items.change, () => this.render());\n        this.connect(this.model.properties.option_limit.change, () => this.render());\n        this.connect(this.model.properties.delete_button.change, () => this.render());\n        this.connect(this.model.properties.placeholder.change, () => this.render());\n        this.connect(this.model.properties.options.change, () => this.render());\n        this.connect(this.model.properties.name.change, () => this.render());\n        this.connect(this.model.properties.title.change, () => this.render());\n    }\n    render() {\n        super.render();\n        const options = this.model.options.map((opt) => {\n            let value, _label;\n            if (isString(opt))\n                value = _label = opt;\n            else\n                [value, _label] = opt;\n            return option({ value }, _label);\n        });\n        this.select_el = select({\n            multiple: true,\n            class: bk_input,\n            name: this.model.name,\n            disabled: this.model.disabled,\n        }, options);\n        this.group_el.appendChild(this.select_el);\n        this.render_selection();\n        let item = \"choices__item\";\n        let button = \"choices__button\";\n        if (this.model.solid) {\n            item = item + \" solid\";\n            button = button + \" solid\";\n        }\n        else {\n            item = item + \" light\";\n            button = button + \" light\";\n        }\n        const opts = {\n            removeItemButton: this.model.delete_button,\n            classNames: { item, button },\n        };\n        if (this.model.placeholder !== null)\n            opts.placeholderValue = this.model.placeholder;\n        if (this.model.max_items !== null)\n            opts.maxItemCount = this.model.max_items;\n        if (this.model.option_limit !== null)\n            opts.renderChoiceLimit = this.model.option_limit;\n        this.choice_el = new Choices(this.select_el, opts);\n        this.select_el.addEventListener(\"change\", () => this.change_input());\n    }\n    render_selection() {\n        const selected = new Set(this.model.value);\n        for (const el of Array.from(this.el.querySelectorAll('option')))\n            el.selected = selected.has(el.value);\n    }\n    set_disabled() {\n        if (this.model.disabled)\n            this.choice_el.disable();\n        else\n            this.choice_el.enable();\n    }\n    change_input() {\n        const is_focused = this.el.querySelector('select:focus') != null;\n        const values = [];\n        for (const el of Array.from(this.el.querySelectorAll('option'))) {\n            if (el.selected)\n                values.push(el.value);\n        }\n        this.model.value = values;\n        super.change_input();\n        // Restore focus back to the <select> afterwards,\n        // so that even if python on_change callback is invoked,\n        // focus remains on <select> and one can seamlessly scroll\n        // up/down.\n        if (is_focused)\n            this.select_el.focus();\n    }\n}\nMultiChoiceView.__name__ = \"MultiChoiceView\";\nexport class MultiChoice extends InputWidget {\n    constructor(attrs) {\n        super(attrs);\n    }\n    static init_MultiChoice() {\n        this.prototype.default_view = MultiChoiceView;\n        this.define({\n            value: [p.Array, []],\n            options: [p.Array, []],\n            max_items: [p.Number, null],\n            delete_button: [p.Boolean, true],\n            placeholder: [p.String, null],\n            option_limit: [p.Number, null],\n            solid: [p.Boolean, true],\n        });\n    }\n}\nMultiChoice.__name__ = \"MultiChoice\";\nMultiChoice.init_MultiChoice();\n//# sourceMappingURL=multichoice.js.map"]},"metadata":{},"sourceType":"module"}