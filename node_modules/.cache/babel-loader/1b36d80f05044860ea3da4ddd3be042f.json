{"ast":null,"code":"import { Layoutable } from \"./layoutable\";\nimport { BBox } from \"../util/bbox\";\nexport class Stack extends Layoutable {\n  constructor() {\n    super(...arguments);\n    this.children = [];\n  }\n\n}\nStack.__name__ = \"Stack\";\nexport class HStack extends Stack {\n  _measure(_viewport) {\n    let width = 0;\n    let height = 0;\n\n    for (const child of this.children) {\n      const size_hint = child.measure({\n        width: 0,\n        height: 0\n      });\n      width += size_hint.width;\n      height = Math.max(height, size_hint.height);\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n  _set_geometry(outer, inner) {\n    super._set_geometry(outer, inner);\n\n    const {\n      top,\n      bottom\n    } = outer;\n    let {\n      left\n    } = outer;\n\n    for (const child of this.children) {\n      const {\n        width\n      } = child.measure({\n        width: 0,\n        height: 0\n      });\n      child.set_geometry(new BBox({\n        left,\n        width,\n        top,\n        bottom\n      }));\n      left += width;\n    }\n  }\n\n}\nHStack.__name__ = \"HStack\";\nexport class VStack extends Stack {\n  _measure(_viewport) {\n    let width = 0;\n    let height = 0;\n\n    for (const child of this.children) {\n      const size_hint = child.measure({\n        width: 0,\n        height: 0\n      });\n      width = Math.max(width, size_hint.width);\n      height += size_hint.height;\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n  _set_geometry(outer, inner) {\n    super._set_geometry(outer, inner);\n\n    const {\n      left,\n      right\n    } = outer;\n    let {\n      top\n    } = outer;\n\n    for (const child of this.children) {\n      const {\n        height\n      } = child.measure({\n        width: 0,\n        height: 0\n      });\n      child.set_geometry(new BBox({\n        top,\n        height,\n        left,\n        right\n      }));\n      top += height;\n    }\n  }\n\n}\nVStack.__name__ = \"VStack\";\nexport class AnchorLayout extends Layoutable {\n  constructor() {\n    super(...arguments);\n    this.children = [];\n  }\n\n  _measure(viewport) {\n    let width = 0;\n    let height = 0;\n\n    for (const {\n      layout\n    } of this.children) {\n      const size_hint = layout.measure(viewport);\n      width = Math.max(width, size_hint.width);\n      height = Math.max(height, size_hint.height);\n    }\n\n    return {\n      width,\n      height\n    };\n  }\n\n  _set_geometry(outer, inner) {\n    super._set_geometry(outer, inner);\n\n    for (const {\n      layout,\n      anchor,\n      margin\n    } of this.children) {\n      const {\n        left,\n        right,\n        top,\n        bottom,\n        hcenter,\n        vcenter\n      } = outer;\n      const {\n        width,\n        height\n      } = layout.measure(outer);\n      let bbox;\n\n      switch (anchor) {\n        case 'top_left':\n          bbox = new BBox({\n            left: left + margin,\n            top: top + margin,\n            width,\n            height\n          });\n          break;\n\n        case 'top_center':\n          bbox = new BBox({\n            hcenter,\n            top: top + margin,\n            width,\n            height\n          });\n          break;\n\n        case 'top_right':\n          bbox = new BBox({\n            right: right - margin,\n            top: top + margin,\n            width,\n            height\n          });\n          break;\n\n        case 'bottom_right':\n          bbox = new BBox({\n            right: right - margin,\n            bottom: bottom - margin,\n            width,\n            height\n          });\n          break;\n\n        case 'bottom_center':\n          bbox = new BBox({\n            hcenter,\n            bottom: bottom - margin,\n            width,\n            height\n          });\n          break;\n\n        case 'bottom_left':\n          bbox = new BBox({\n            left: left + margin,\n            bottom: bottom - margin,\n            width,\n            height\n          });\n          break;\n\n        case 'center_left':\n          bbox = new BBox({\n            left: left + margin,\n            vcenter,\n            width,\n            height\n          });\n          break;\n\n        case 'center':\n          bbox = new BBox({\n            hcenter,\n            vcenter,\n            width,\n            height\n          });\n          break;\n\n        case 'center_right':\n          bbox = new BBox({\n            right: right - margin,\n            vcenter,\n            width,\n            height\n          });\n          break;\n      }\n\n      layout.set_geometry(bbox);\n    }\n  }\n\n}\nAnchorLayout.__name__ = \"AnchorLayout\";","map":{"version":3,"sources":["/Users/gen/Desktop/defund_to_refund/node_modules/@bokeh/bokehjs/build/js/lib/core/layout/alignments.js"],"names":["Layoutable","BBox","Stack","constructor","arguments","children","__name__","HStack","_measure","_viewport","width","height","child","size_hint","measure","Math","max","_set_geometry","outer","inner","top","bottom","left","set_geometry","VStack","right","AnchorLayout","viewport","layout","anchor","margin","hcenter","vcenter","bbox"],"mappings":"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","sourcesContent":["import { Layoutable } from \"./layoutable\";\nimport { BBox } from \"../util/bbox\";\nexport class Stack extends Layoutable {\n    constructor() {\n        super(...arguments);\n        this.children = [];\n    }\n}\nStack.__name__ = \"Stack\";\nexport class HStack extends Stack {\n    _measure(_viewport) {\n        let width = 0;\n        let height = 0;\n        for (const child of this.children) {\n            const size_hint = child.measure({ width: 0, height: 0 });\n            width += size_hint.width;\n            height = Math.max(height, size_hint.height);\n        }\n        return { width, height };\n    }\n    _set_geometry(outer, inner) {\n        super._set_geometry(outer, inner);\n        const { top, bottom } = outer;\n        let { left } = outer;\n        for (const child of this.children) {\n            const { width } = child.measure({ width: 0, height: 0 });\n            child.set_geometry(new BBox({ left, width, top, bottom }));\n            left += width;\n        }\n    }\n}\nHStack.__name__ = \"HStack\";\nexport class VStack extends Stack {\n    _measure(_viewport) {\n        let width = 0;\n        let height = 0;\n        for (const child of this.children) {\n            const size_hint = child.measure({ width: 0, height: 0 });\n            width = Math.max(width, size_hint.width);\n            height += size_hint.height;\n        }\n        return { width, height };\n    }\n    _set_geometry(outer, inner) {\n        super._set_geometry(outer, inner);\n        const { left, right } = outer;\n        let { top } = outer;\n        for (const child of this.children) {\n            const { height } = child.measure({ width: 0, height: 0 });\n            child.set_geometry(new BBox({ top, height, left, right }));\n            top += height;\n        }\n    }\n}\nVStack.__name__ = \"VStack\";\nexport class AnchorLayout extends Layoutable {\n    constructor() {\n        super(...arguments);\n        this.children = [];\n    }\n    _measure(viewport) {\n        let width = 0;\n        let height = 0;\n        for (const { layout } of this.children) {\n            const size_hint = layout.measure(viewport);\n            width = Math.max(width, size_hint.width);\n            height = Math.max(height, size_hint.height);\n        }\n        return { width, height };\n    }\n    _set_geometry(outer, inner) {\n        super._set_geometry(outer, inner);\n        for (const { layout, anchor, margin } of this.children) {\n            const { left, right, top, bottom, hcenter, vcenter } = outer;\n            const { width, height } = layout.measure(outer);\n            let bbox;\n            switch (anchor) {\n                case 'top_left':\n                    bbox = new BBox({ left: left + margin, top: top + margin, width, height });\n                    break;\n                case 'top_center':\n                    bbox = new BBox({ hcenter, top: top + margin, width, height });\n                    break;\n                case 'top_right':\n                    bbox = new BBox({ right: right - margin, top: top + margin, width, height });\n                    break;\n                case 'bottom_right':\n                    bbox = new BBox({ right: right - margin, bottom: bottom - margin, width, height });\n                    break;\n                case 'bottom_center':\n                    bbox = new BBox({ hcenter, bottom: bottom - margin, width, height });\n                    break;\n                case 'bottom_left':\n                    bbox = new BBox({ left: left + margin, bottom: bottom - margin, width, height });\n                    break;\n                case 'center_left':\n                    bbox = new BBox({ left: left + margin, vcenter, width, height });\n                    break;\n                case 'center':\n                    bbox = new BBox({ hcenter, vcenter, width, height });\n                    break;\n                case 'center_right':\n                    bbox = new BBox({ right: right - margin, vcenter, width, height });\n                    break;\n            }\n            layout.set_geometry(bbox);\n        }\n    }\n}\nAnchorLayout.__name__ = \"AnchorLayout\";\n//# sourceMappingURL=alignments.js.map"]},"metadata":{},"sourceType":"module"}